<?xml version="1.0"?>
<doc>
  <assembly>
    <name>OpcLabs.EasyOpcClassicCore</name>
  </assembly>
  <members>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for OPC Alarms&amp;Events address space classes.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement" /> to COM clients.
            </summary>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_AEAttributeElement\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.AttributeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.AttributeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.Description">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.Description" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.DataType">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DataType" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Item(System.Int32)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Contains(System.Int32)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.Remove(System.Int32)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> to COM clients.
            </summary>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_AECategoryElement\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.AttributeElementCount">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElementCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.AttributeElements">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElements" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.CategoryId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.CategoryId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.ConditionElementCount">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElementCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.ConditionElements">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElements" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.Description">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.Description" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Item(System.Int32)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Contains(System.Int32)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.Remove(System.Int32)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement" /> to COM clients.
            </summary>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_AEConditionElement\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.SubconditionNames">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.SetSubconditionNames(System.String[]@)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Item(System.String)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Contains(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.Remove(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.HasChildren">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.HasChildren" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.IsArea">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsArea" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.IsSource">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsSource" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.QualifiedName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.QualifiedName" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Item(System.String)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Contains(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.Remove(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Definition">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Definition" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Severity">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Severity" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.Description">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Description" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Item(System.String)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Contains(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.Remove(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.NamespaceDoc">
      <summary>
            This namespace contains classes for OPC Alarms&amp;Events address space.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection">
      <summary>
            A collection of attribute elements (<see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement" />), keyed by their Attribute Ids.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.Keys">
      <summary>
            A collection of Attribute Ids that are keys to the attribute elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.GetKeyForItem(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection">
      <summary>
            A collection of category elements (<see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" />), keyed by their Category Ids.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.Keys">
      <summary>
            A collection of Category Ids that are keys to the category elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.GetKeyForItem(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection">
      <summary>
            A collection of condition elements (<see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement" />), keyed by their names.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.Keys">
      <summary>
            A collection of condition names that are keys to the condition elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.GetKeyForItem(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection">
      <summary>
            A collection of node elements (<see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" />), keyed by their names.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.Keys">
      <summary>
            A collection of node names that are keys to the condition elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.GetKeyForItem(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection">
      <summary>
            A collection of subcondition elements (<see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement" />), keyed by their names.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.Keys">
      <summary>
            A collection of subcondition names that are keys to the subcondition elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection.GetKeyForItem(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement">
      <summary>Contains information gathered about an OPC event attribute.</summary>
      <remarks>
        <para>This object is filled in and returned e.g. when you query for OPC event categories.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DefaultAttributeId">
      <summary>
            Default attribute Id. Equals to zero.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DefaultDescription">
      <summary>
            Default description. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement" /> object.</summary>
      <param name="attributeElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.#ctor(System.Int64,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DefaultDataType">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DataType" /> property. Equals to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement)~System.String">
      <summary>Converts the object to its string representation.</summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="attributeElement">The object to be expressed as a string.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.AttributeId">
      <summary>Attribute ID.</summary>
      <remarks>
        <para>Event attributes are vendor-specific and are associated with the event category and available from the server. 
            Their attribute IDs can be used in the event subscription to specify the information to be returned with an event 
            notification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.Description">
      <summary>Text name or description for the event attribute.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DataType">
      <summary>Data type of the event attribute (a VARTYPE).</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEAttributeElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.ToString">
      <summary>Returns string with the attribute Id and description.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AEAttributeElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AEAttributeElement#AttributeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEAttributeElement.AttributeId" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.ResetDataType">
      <summary>
            Resets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DataType" /> to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.ShouldSerializeDataType">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement.DataType" /> differs from its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement">
      <summary>Contains information gathered about an OPC event category.</summary>
      <remarks>
        <para>This object is filled in and returned e.g. when you query for OPC event categories.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.DefaultCategoryId">
      <summary>
            Default category Id. Equals to zero.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.DefaultDescription">
      <summary>
            Default description. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> object.</summary>
      <param name="categoryElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.#ctor(System.Int64,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElementCollection)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.DefaultAttributeElements">
      <summary>
            Default attribute elements. An empty collection.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.DefaultConditionElements">
      <summary>
            Default condition elements. An empty collection.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="attributeElement1">First object to be compared.</param>
      <param name="attributeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="attributeElement1">First object to be compared.</param>
      <param name="attributeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement)~System.String">
      <summary>Converts the object to its string representation.</summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="categoryElement">The object to be expressed as a string.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElementCount">
      <summary>
            Count of event attributes provided with notifications in this event category.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElements">
      <summary>Event attributes that the server can provide as part of an event notification within this event category.
            </summary>
      <remarks>
        <para>Simple servers may not support <i>any</i> vendor-specific attributes for some or even all event categories.
            </para>
        <para>This is a keyed collection where the key is attribute ID, and the value is an 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEAttributeElement" />.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.CategoryId">
      <summary>Category ID.</summary>
      <remarks>
        <para>Event categories are vendor-specific. Their category IDs can be used in the event subscription for specifying 
            filters. Category IDs are unique across the server (e.g. if Category ID x is used for both simple events and 
            condition events, then the ID references the exact same category.)</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElementCount">
      <summary>
            Count of conditions supported by this event category.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElements">
      <summary>Event conditions supported by this event category.</summary>
      <remarks>
        <para>This is a keyed collection where the key is condition name, and the value is an 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement" />.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.Description">
      <summary>Text name or description for the event category.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AECategoryElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ToString">
      <summary>Returns string with the category Id and description.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AECategoryElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AECategoryElement#CategoryId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AECategoryElement.CategoryId" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ResetAttributeElements">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElements" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ShouldSerializeAttributeElements">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.AttributeElements" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ResetConditionElements">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElements" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ShouldSerializeConditionElements">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement.ConditionElements" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement">
      <summary>Contains information gathered about an OPC event condition.</summary>
      <remarks>
            This object is filled in and returned e.g. when you query for OPC event categories.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.DefaultName">
      <summary>
            Default condition name. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement" /> object.</summary>
      <param name="conditionElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.DefaultSubconditionNames">
      <summary>
            Default subcondition names. An empty array.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="conditionElement1">First object to be compared.</param>
      <param name="conditionElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="conditionElement1">First object to be compared.</param>
      <param name="conditionElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement)~System.String">
      <summary>Converts the object to its string representation.</summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="conditionElement">The object to be expressed as a string.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.Name">
      <summary>Condition name. This is the string to be used for display purposes.</summary>
      <remarks>
        <para>Condition names are server specific.</para>
        <para>The number of condition names returned will vary depending on the sophistication of the server, but is 
            expected to be less than 30 for most servers.</para>
        <para>The Server is in fact allowed to change the available selection at any time. Therefore, a Client should
            do (or at least allow as an option) a fresh Query every time a selection is to be presented to the end user.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames">
      <summary>An array of subcondition names.</summary>
      <remarks>
        <para>Subcondition names are server specific.</para>
        <para>The number of sub-condition names returned will vary depending on the sophistication of the server, but is 
            expected to be less than 10 for most servers.</para>
        <para>It is expected that the available subcondition names for a particular condition on the Server will be fairly 
            'stable' and that they will generally not change 'online'. However, the Server is in fact allowed to change the 
            available selection at any time. Therefore, a Client should do (or at least allow as an option) a fresh Query every 
            time a selection is to be presented to the end user.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AEConditionElement\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SetSubconditionNames(System.String[]@)">
      <summary>
            Sets an array of subcondition names.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames" /> property setter in .NET instead.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.ToString">
      <summary>Returns a string with the condition name.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AEConditionElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AEConditionElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.ResetSubconditionNames">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.ShouldSerializeSubconditionNames">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement.SubconditionNames" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement">
      <summary>Contains information gathered about an OPC node (area or source in OPC event server's area space).</summary>
      <remarks>
            This object is filled in and returned e.g. when you browse the OPC event server's area space.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultIsArea">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsArea" />. Equals to <b>false</b>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultIsBranch">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultIsLeaf">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultIsSource">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsSource" />. Equals to <b>false</b>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultNodeId">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DefaultQualifiedName">
      <summary>
            Default qualified name.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="nodeDescriptor">Node descriptor to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> object.</summary>
      <param name="nodeElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.Root">
      <summary>
            The node element for the root of the address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.MakePathElements(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a path containing <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" />-s made from browse names, starting from the root.
            </summary>
      <param name="browseNames">The browse names that represent the path to be created.</param>
      <returns>An enumerable of node elements, starting from the root.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsArea">
      <summary>The node is an event area (a "folder" the can contain other nodes).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsBranch">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsLeaf">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.IsSource">
      <summary>The node is an event source that can provide OPC events.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.Name">
      <summary>Short user friendly portion of the namespace pointing to the element. This is the string to be used for 
            display purposes.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.NodeId">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.NodePath">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.QualifiedName">
      <summary>The fully qualified name for this area or source.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AENodeElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AENodeElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement">
      <summary>Contains information about an OPC event subcondition.</summary>
      <remarks>Available in ActiveSubcondition and values of SubconditionElements dictionary of 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.</remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.DefaultDefinition">
      <summary>
            Default definition of the subcondition. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.DefaultDescription">
      <summary>
            Default description. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.DefaultName">
      <summary>
            Default subcondition name. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.DefaultSeverity">
      <summary>
            Default subcondition severity. Equals to zero.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement" /> object.</summary>
      <param name="subconditionElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="subconditionElement1">First object to be compared.</param>
      <param name="subconditionElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="subconditionElement1">First object to be compared.</param>
      <param name="subconditionElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement)~System.String">
      <summary>Converts the object to its string representation.</summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="subconditionElement">The object to be expressed as a string.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Name">
      <summary>The name assigned to the sub-condition, e.g. "HighAlarm" for a sub-condition of "LevelAlarm".</summary>
      <remarks>
            In the case of a single-state alarm, the sub-condition name is the same as the associated condition name. The name of the 
            sub-condition is unique within its associated condition.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Definition">
      <summary>An expression which defines the sub-state represented by the sub-condition.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Severity">
      <summary>The severity of any event notifications generated on behalf of this sub-condition.</summary>
      <remarks>
            Remark: different sub-conditions of the same condition may have different severity levels.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Description">
      <summary>The text string to be included in any event notification generated on behalf of this sub-condition.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.ToString">
      <summary>Returns a string with the subcondition name.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.OpcLabs#EasyOpc#AlarmsAndEvents#AddressSpace#ComTypes#_AESubconditionElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.ComTypes._AESubconditionElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary">
      <summary>
            This is a dictionary where the key is category ID, and the value an array of event attribute IDs for that category.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Net.AttributeValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.#ctor">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.#ctor(System.Collections.Generic.IDictionary{System.Int64,System.Int64[]})">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.#ctor(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.Empty">
      <summary>
            An empty OPC-A&amp;E attribute set dictionary.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="attributeSetDictionary1">First object to be compared.</param>
      <param name="attributeSetDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="attributeSetDictionary1">First object to be compared.</param>
      <param name="attributeSetDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary">
      <summary>
            This is a dictionary where the key is attribute ID, and the value is the actual value of that event attribute.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.#ctor">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.Int64,System.Object})">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.#ctor(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="attributeValueDictionary1">First object to be compared.</param>
      <param name="attributeValueDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="attributeValueDictionary1">First object to be compared.</param>
      <param name="attributeValueDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.Empty">
      <summary>
            An empty OPC-A&amp;E attribute value dictionary.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState">
      <summary>Contains current state information about an OPC condition instance.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState)">
      <summary>Initializes a new instance of the class, from other <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.</summary>
      <param name="conditionState">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> object to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElementCollection,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement,System.Boolean,System.Boolean,System.Boolean,OpcLabs.EasyOpc.DataAccess.DAQuality,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DefaultAcknowledgeTime">
      <summary>
            Default acknowledge time. In UTC.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DefaultActiveTime">
      <summary>
            Default active time. In UTC.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DefaultInactiveTime">
      <summary>
            Default inactive time. In UTC.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DefaultQuality">
      <summary>
            Default quality. In UTC.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DefaultSubconditionActiveTime">
      <summary>
            Default subcondition active time.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState,OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState,OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionElements">
      <summary>Sub-conditions defined for this condition.</summary>
      <remarks>
        <para>For multi-state conditions, there will be more than one subcondition. For single-state conditions, there will 
            be one subcondition.</para>
        <para>This is a keyed collection where the key is the subcondition name, and the value is an 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement" />.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AttributeValues">
      <summary>Attributes associated with latest event notification for this condition.</summary>
      <remarks>
        <para>Attributes are vendor-specific.</para>
        <para>If a server cannot provide reasonable data for an attribute, the returned VARIANT should is set to VT_EMPTY.
            </para>
        <para>This is a dictionary where the key is attribute ID, and the value is the actual value of that event attribute.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveSubcondition">
      <summary>Currently active sub-condition, for multi-state conditions which are active. For a single-state condition, 
            this contains the information about the condition itself.</summary>
      <remarks>
        <para>Contains an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AESubconditionElement" />.</para>
        <para>For inactive conditions, this value is <c>null</c>.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Enabled">
      <summary>The condition is enabled.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Active">
      <summary>The condition is active.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Acknowledged">
      <summary>The condition is acknowledged.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Quality">
      <summary>Quality associated with the condition state.</summary>
      <remarks>
        <para>Values are as defined for the OPC Quality Flags in the OPC Data Access Server specification.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTime">
      <summary>Time of the most recent transition into the condition. There may be transitions among the sub-conditions 
            which are more recent. In UTC.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeDouble">
      <summary>
            Time of the most recent transition into the condition. There may be transitions among the sub-conditions 
            which are more recent. In UTC, as double-precision floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocal">
      <summary>Time of the most recent transition into the condition. There may be transitions among the sub-conditions 
            which are more recent. In local time.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocalDouble">
      <summary>
            Time of the most recent transition into the condition. There may be transitions among the sub-conditions 
            which are more recent. In local time, as double-precision floating-point number that contains an OLE Automation
            date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTime">
      <summary>Time of the most recent transition into active subcondition. This is the time value which must be specified 
            when acknowledging the condition. In UTC.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeDouble">
      <summary>
            Time of the most recent transition into active subcondition. This is the time value which must be specified 
            when acknowledging the condition. In UTC, as double-precision floating-point number that contains an OLE
            Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocal">
      <summary>Time of the most recent transition into active subcondition. This is the time value which must be specified 
            when acknowledging the condition. In local time.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocalDouble">
      <summary>
            Time of the most recent transition into active subcondition. This is the time value which must be specified 
            when acknowledging the condition. In local time, as double-precision floating-point number that contains an OLE
            Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTime">
      <summary>Time of the most recent transition out of this condition. In UTC.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active, or if it is currently active for the first time and has 
            never been exited.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeDouble">
      <summary>
            Time of the most recent transition out of this condition. In UTC, as double-precision floating-point number
            that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocal">
      <summary>Time of the most recent transition out of this condition. In local time</summary>
      <remarks>
        <para>Contains 0 if the condition has never been active, or if it is currently active for the first time and has 
            never been exited.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocalDouble">
      <summary>
            Time of the most recent transition out of this condition. In local time, as double-precision floating-point
            number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTime">
      <summary>The time of the most recent acknowledgment of this condition (of any sub-condition). In UTC.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been acknowledged.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeDouble">
      <summary>
            The time of the most recent acknowledgment of this condition (of any sub-condition). In UTC, as double-precision
            floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocal">
      <summary>The time of the most recent acknowledgment of this condition (of any sub-condition). In local time.</summary>
      <remarks>
        <para>Contains 0 if the condition has never been acknowledged.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocalDouble">
      <summary>
            The time of the most recent acknowledgment of this condition (of any sub-condition). In local time, as
            double-precision floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgerId">
      <summary>This is the ID of the client who last acknowledged this condition.</summary>
      <remarks>
        <para>Contains an empty string if the condition has never been acknowledged.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Comment">
      <summary>The comment string passed in by the client who last acknowledged this condition.</summary>
      <remarks>
        <para>Contains an empty string if the condition has never been acknowledged.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AEConditionState#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetAcknowledgeTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTime" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeAcknowledgeTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetAcknowledgeTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeAcknowledgeTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetAcknowledgeTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocal" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeAcknowledgeTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetAcknowledgeTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocalDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeAcknowledgeTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetActiveTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTime" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeActiveTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetActiveTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeActiveTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetActiveTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocal" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeActiveTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetActiveTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocalDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeActiveTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetAttributeValues">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AttributeValues" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeAttributeValues">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AttributeValues" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetInactiveTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTime" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeInactiveTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetInactiveTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeInactiveTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetInactiveTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocal" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeInactiveTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetInactiveTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocalDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeInactiveTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetQuality">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Quality" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeQuality">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Quality" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetSubconditionActiveTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTime" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeSubconditionActiveTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetSubconditionActiveTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeSubconditionActiveTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetSubconditionActiveTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocal" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeSubconditionActiveTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetSubconditionActiveTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocalDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeSubconditionActiveTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ResetSubconditionElements">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionElements" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ShouldSerializeSubconditionElements">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionElements" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData">
      <summary>Contains event notification information.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData" /> object.</summary>
      <param name="eventData">Event object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.#ctor(System.String,System.DateTime,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType,System.Int64,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,OpcLabs.EasyOpc.DataAccess.DAQuality,System.Boolean,System.DateTime,System.Int64,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultActiveTime">
      <summary>
            Default active time. In UTC.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultEventType">
      <summary>
            Default event type.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultQuality">
      <summary>
            Default quality.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultTime">
      <summary>
            Default time. In UTC.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Null">
      <summary>
            An empty OPC-A&amp;E event.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.QualifiedSourceName">
      <summary>The source of event notification.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Time">
      <summary>Time of the event occurrence - for conditions, time that the condition transitioned into the new state or 
            sub-condition. In UTC.</summary>
      <remarks>
        <para>For example, if the event notification is for acknowledgment of a condition, this would be the time that the 
            condition became acknowledged.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeDouble">
      <summary>
            Time of the event occurrence - for conditions, time that the condition transitioned into the new state or sub-
            condition. In UTC, as double-precision floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Time" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocal">
      <summary>Time of the event occurrence - for conditions, time that the condition transitioned into the new state or 
            sub-condition. In local time.</summary>
      <remarks>
        <para>For example, if the event notification is for acknowledgment of a condition, this would be the time that the 
            condition became acknowledged.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocalDouble">
      <summary>
            Time of the event occurrence - for conditions, time that the condition transitioned into the new state or sub-
            condition. In local time, as double-precision floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Message">
      <summary>Event notification message describing the event.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.EventType">
      <summary>Simple, Condition-Related, or Tracking event.</summary>
      <remarks>
        <para>One of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> constants.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.CategoryId">
      <summary>Event category ID.</summary>
      <remarks>
        <para>Standard and Vendor-specific event category codes.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Severity">
      <summary>Event severity (1..1000). Zero is valid but has special meaning.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AttributeValues">
      <summary>Vendor-specific event attributes.</summary>
      <remarks>
        <para>Attributes are vendor-specific.</para>
        <para>If a server cannot provide reasonable data for an attribute, the returned VARIANT should be set to VT_EMPTY.
            </para>
        <para>This is a dictionary where the key is attribute ID, and the value is the actual value of that event attribute.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ConditionName">
      <summary>The name of the condition related to this event notification.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.SubconditionName">
      <summary>The name of the current sub-condition, for multi-state conditions. For a single-state condition, this contains 
            the condition name.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Enabled">
      <summary>New state of the condition: The condition is enabled.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Active">
      <summary>New state of the condition: The condition is active.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Acknowledged">
      <summary>New state of the condition: The condition is acknowledged.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Quality">
      <summary>Quality associated with the condition.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>Values are as defined for the OPC Quality Flags in the OPC Data Access Server specification.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AcknowledgeRequired">
      <summary>This flag indicates that the related condition requires acknowledgment of this event.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>The determination of those events which require acknowledgment is server specific. For example, transition into 
            a LimitAlarm condition would likely require an acknowledgment, while the event notification of the resulting 
            acknowledgment would likely not require an acknowledgment.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime">
      <summary>Time that the condition became active (for single-state conditions), or the time of the transition into the 
            current sub-condition (for multi-state conditions). In UTC.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>This time is used by the client when acknowledging the condition.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeDouble">
      <summary>
            Time that the condition became active (for single-state conditions), or the time of the transition into the
            current sub-condition (for multi-state conditions). In UTC, as double-precision floating-point number that
            contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocal">
      <summary>Time that the condition became active (for single-state conditions), or the time of the transition into the 
            current sub-condition (for multi-state conditions). In local time.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>This time is used by the client when acknowledging the condition.</para>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocalDouble">
      <summary>
            Time that the condition became active (for single-state conditions), or the time of the transition into the
            current sub-condition (for multi-state conditions). In local time, as double-precision floating-point number
            that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeTicks">
      <summary>
            Time that the condition became active (for single-state conditions), or the time of the transition into the
            current sub-condition (for multi-state conditions). In UTC ticks.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at Python.NET, which loses the precision below microseconds level, as it
            represents the .NET <see cref="T:System.DateTime" /> as Python 'datetime' object. This alternative property uses 64-bit
            integer type instead, and provides a resolution of 100 nanoseconds.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Cookie">
      <summary>Server defined cookie associated with the event notification.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>The cookie is used by the client when acknowledging the condition. This value is opaque to the client.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActorId">
      <summary>Actor ID.</summary>
      <remarks>
        <para>
          <b>This property is used only for Tracking Events and for Condition-Related Events which are acknowledgment 
            notifications (see EventType).</b>
        </para>
        <para>For tracking events, this is the actor ID for the event notification.</para>
        <para>For condition-related events, this is the AcknowledgerID when the new state is acknowledged. If the 
            AcknowledgerID is an empty string, the event was automatically acknowledged by the server.</para>
        <para>For other events, the value is an empty string.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AEEventData#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetActiveTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeActiveTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetActiveTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeActiveTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetActiveTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocal" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeActiveTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetActiveTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocalDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeActiveTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetAttributeValues">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AttributeValues" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeAttributeValues">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AttributeValues" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetEventType">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.EventType" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeEventType">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.EventType" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetQuality">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Quality" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeQuality">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Quality" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Time" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Time" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocal" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ResetTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocalDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ShouldSerializeTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter">
      <summary>Contains the filtering criteria to be used for the event subscription.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultLowSeverity">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.LowSeverity" /> property. Equals to 1.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultHighSeverity">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.HighSeverity" /> property. Equals to 1000.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType,System.Int64[],System.Int32,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor[],OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor[])">
      <summary>Initializes a new instance of the class with given data.</summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> object.</summary>
      <param name="subscriptionFilter">Subscription filter object to be copied from.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>Initializes a new instance of the class, with given source descriptor.</summary>
      <param name="sourceDescriptor">Event source of interest.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultAreas">
      <summary>
            Default areas. An empty array.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultCategories">
      <summary>
            Default categories. An empty array.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultSources">
      <summary>
            Default sources. An empty array.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Empty">
      <summary>
            An empty OPC-A&amp;E subscription filter.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DefaultEventTypes">
      <summary>
            Default event types. Equals to all types included.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="subscriptionFilter1">First object to be compared.</param>
      <param name="subscriptionFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="subscriptionFilter1">First object to be compared.</param>
      <param name="subscriptionFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas">
      <summary>Array of process area strings of interest - only events or conditions in these areas will be reported.</summary>
      <remarks>
            Area strings can be obtained using browsing. It is possible to specify areas using the wildcard syntax.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories">
      <summary>
      </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.EventTypes">
      <summary>An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> value specifying which event types are of interest (essentially, a bit mask).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.HighSeverity">
      <summary>Highest severity of interest (inclusive).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.LowSeverity">
      <summary>Lowest severity of interest (inclusive).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources">
      <summary>Array of event sources of interest - only events from these sources will be reported.</summary>
      <remarks>
            Source strings can be obtained using browsing. It is possible to specify sources using the wildcard syntax.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Properties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Net.Properties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Properties.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.MemberwiseClone">
      <summary>
            Creates a new object that is a memberwise copy of the current instance.
            </summary>
      <returns>A new object that is a memberwise copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.SetAreas(System.Object)">
      <summary>
            Sets array of process area strings of interest - only events or conditions in these areas will be reported.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas" /> property setter in .NET instead.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.SetCategories(System.Object)">
      <summary>
            Sets array of event category IDs of interest.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories" /> property setter in .NET instead.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.SetSources(System.Object)">
      <summary>
            Sets array of event sources of interest - only events from these sources will be reported.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources" /> property setter in .NET instead.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AESubscriptionFilter#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ResetAreas">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ShouldSerializeAreas">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ResetCategories">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ShouldSerializeCategories">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ResetEventTypes">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.EventTypes" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ShouldSerializeEventTypes">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.EventTypes" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ResetSources">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ShouldSerializeSources">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities">
      <summary>
            Contains static members that facilitate work with types related to OPC Alarms&amp;Events.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidAttributeId(System.Int64)">
      <summary>
            Determines whether a given attribute Id value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="attributeId">The attribute Id to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="attributeId" /> is a valid attribute Id; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidCategoryId(System.Int64)">
      <summary>
            Determines whether a given category Id value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="categoryId">The category Id to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="categoryId" /> is a valid category Id; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidCookie(System.Int64)">
      <summary>
            Determines whether a given cookie value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="cookie">The cookie to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="cookie" /> is a valid cookie; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidDataType(OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
            Determines whether a given <see cref="T:OpcLabs.BaseLib.ComInterop.VarType" /> is a valid data type in OPC Alarms&amp;Events.
            </summary>
      <param name="dataType">The data type to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="dataType" /> is a valid data type in OPC Alarms&amp;Events;
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidEventSeverity(System.Int32)">
      <summary>
            Determines whether a given event severity value is valid in OPC Alarms&amp;Events. 
            Zero severities are not allowed.
            </summary>
      <param name="eventSeverity">The event severity to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="eventSeverity" /> is a valid event severity; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidEventSeverity(System.Int32,System.Boolean)">
      <summary>
            Determines whether a given event severity value is valid in OPC Alarms&amp;Events. 
            You can choose whether zero severities are also allowed.
            </summary>
      <param name="eventSeverity">The event severity to be tested.</param>
      <param name="allowZero">Indicates that zero represents a valid event severity for the test.</param>
      <returns>
        <c>true</c> if <paramref name="eventSeverity" /> is a valid event severity; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidEventTypeFilter(System.Int64)">
      <summary>
            Determines whether a given event type filter value is valid in OPC Alarms&amp;Events. 
            Empty event type filters are not allowed.
            </summary>
      <param name="eventTypeFilter">The event type filter to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="eventTypeFilter" /> is a valid event type filter; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidEventTypeFilter(System.Int64,System.Boolean)">
      <summary>
            Determines whether a given event type filter value is valid in OPC Alarms&amp;Events. 
            You can choose whether empty event type filters are also allowed.
            </summary>
      <param name="eventTypeFilter">The event type filter to be tested.</param>
      <param name="allowEmpty">Indicates that empty filter is valid for the test.</param>
      <returns>
        <c>true</c> if <paramref name="eventTypeFilter" /> is a valid event type filter; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidNotificationRate(System.Int32)">
      <summary>
            Determines whether a given notification rate value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="notificationRate">The notification rate value to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="notificationRate" /> is a valid notification rate; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidTime(System.DateTime)">
      <summary>
            Determines whether a given time value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="time">The time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be in UTC, or it must be either <see cref="F:System.DateTime.MinValue" /> or <see cref="F:System.DateTime.MaxValue" />.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.IsValidTimeLocal(System.DateTime)">
      <summary>
            Determines whether a given local time value is valid in OPC Alarms&amp;Events. 
            </summary>
      <param name="time">The local time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be local, or it must be either <see cref="F:System.DateTime.MinValue" /> or <see cref="F:System.DateTime.MaxValue" />.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateAttributeId(System.Int64,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateCategoryId(System.Int64,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateDataType(OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateEventTypeFilter(System.Int64,System.Boolean,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateEventTypeFilter(System.Int64,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateEventSeverity(System.Int32,System.Boolean,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateEventSeverity(System.Int32,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateNotificationRate(System.Int32,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateTime(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEUtilities.ValidateTimeLocal(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Analysis.AEServerDescriptorValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Analysis.AEServerSchemeValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Analysis.NamespaceDoc">
      <summary>
            This namespace contains types for design-time and run-time analysis in OPC Alarms&amp;Events (OPC-A&amp;E).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate browsing in OPC Alarms&amp;Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemBrowsingOpcAEAreas">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Alarms&amp;Events areas..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemBrowsingOpcAECategoryConditions">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Alarms&amp;Events conditions of an event category..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemBrowsingOpcAESourceConditions">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Alarms&amp;Events conditions of an event source..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemBrowsingOpcAESources">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Alarms&amp;Events sources..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemQueryingOpcAEAttributes">
      <summary>
              Looks up a localized string similar to Problem querying OPC Alarms&amp;Events attributes..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.Resource1.ProblemQueryingOpcAECategories">
      <summary>
              Looks up a localized string similar to Problem querying OPC Alarms&amp;Events categories..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEAttributeBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryConditionBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESourceConditionBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESubconditionBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter,OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter,OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.VendorFilter">
      <summary>A server specific filter string (empty string for no filtering).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseFilter)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEAttributeBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEAttributeBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEAttributeBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEAttributeBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode,OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode,OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AECategoryBrowseNode)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEConditionBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEConditionBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEConditionBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AEConditionBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AENodeBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESubconditionBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESubconditionBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESubconditionBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.AESubconditionBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.IAECategoryBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Browsing.IAENodeBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that facilitate easy work with OPC Alarms and Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Item(System.Int32)">
      <inheritdoc cref="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Add(System.Int32,System.Object)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.ContainsKey(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Remove(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.TryGetValue(System.Int32,System.Object@)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.ContainsValue(System.Int64[])">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Item(System.Int32)">
      <inheritdoc cref="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Add(System.Int32,System.Object)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.ContainsKey(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Remove(System.Int32)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.TryGetValue(System.Int32,System.Object@)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.ContainsValue(System.Object)">
      <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.BrowseFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.BrowseFilter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.VendorFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.VendorFilter" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.SubconditionElements">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionElements" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AttributeValues">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AttributeValues" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ActiveSubcondition">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveSubcondition" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Enabled">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Enabled" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Active">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Active" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Acknowledged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Acknowledged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Quality">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Quality" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ActiveTime">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTime" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ActiveTimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ActiveTimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.ActiveTimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.ActiveTimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.SubconditionActiveTime">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTime" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.SubconditionActiveTimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.SubconditionActiveTimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.SubconditionActiveTimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.SubconditionActiveTimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.InactiveTime">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTime" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.InactiveTimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.InactiveTimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.InactiveTimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.InactiveTimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AcknowledgeTime">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTime" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AcknowledgeTimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AcknowledgeTimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AcknowledgeTimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgeTimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.AcknowledgerId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.AcknowledgerId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEConditionState.Comment">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState.Comment" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.QualifiedSourceName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.QualifiedSourceName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Time">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Time" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.TimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.TimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.TimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.TimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Message">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Message" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.EventType">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.EventType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.CategoryId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.CategoryId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Severity">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Severity" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.AttributeValues">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AttributeValues" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ConditionName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ConditionName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.SubconditionName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.SubconditionName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Enabled">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Enabled" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Active">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Active" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Acknowledged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Acknowledged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Quality">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Quality" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.AcknowledgeRequired">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.AcknowledgeRequired" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActiveTime">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTime" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActiveTimeDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActiveTimeLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActiveTimeLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActiveTimeTicks">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActiveTimeTicks" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Cookie">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Cookie" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActorId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ActorId" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.StandardName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.IsSimple">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsSimple" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.IsTracking">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsTracking" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.IsCondition">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsCondition" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.InternalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.InternalValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.NumericalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.NumericalValue" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.AliasName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.AliasName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.IsAliased">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.IsAliased" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.ArgumentString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.ArgumentString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.HasBrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasBrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.HasNodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasNodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.NodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.NodePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Match(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.NodeDescriptor.Match(OpcLabs.EasyOpc.NodeDescriptor)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.QualifiedName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.QualifiedName" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Clone">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Flatten">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Flatten" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> to COM clients.
            </summary>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.EventTypes">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.EventTypes" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.Categories">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.LowSeverity">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.LowSeverity" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.HighSeverity">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.HighSeverity" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.Areas">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.Sources">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources" />
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_AESubscriptionFilter\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.SetAreas(System.Object)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Areas" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.SetCategories(System.Object)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Categories" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.SetSources(System.Object)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Sources" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.Active">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Active" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.NotificationRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.NotificationRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.Filter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Filter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.ReturnedAttributesByCategory">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ReturnedAttributesByCategory" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Diagnostics.EasyAEClientEventIds">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Diagnostics.EasyAEClientEventSource">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Diagnostics.NamespaceDoc">
      <summary>
            This namespace contains diagnostics classes for "Classic" OPC-A&amp;E (Alarms and Events).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.EasyAEUriStrings">
      <summary>
            Contains URI strings used by the OPC A&amp;E client.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.EasyAEUriStrings.OptimizerPlugin">
      <summary>
            OPC-A&amp;E optimizer plug-in.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.EasyAEUriStrings.TelemetryPlugin">
      <summary>
            OPC-A&amp;E telemetry plug-in.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode">
      <summary>
            Specifies how various operations are performed on OPC Alarms&amp;Events servers.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode)">
      <param name="mode">Client mode to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.Default">
      <summary>
            Default client mode.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_AEClientMode#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used by the OPC Alarms&amp;Events engine. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.Reset">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Reset" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.ServerDetach">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.ServerDetach" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.AcknowledgerId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.AcknowledgerId" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ClientReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ClientReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ComInstantiationParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ServerFailedReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerFailedReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ServerShutdownReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerShutdownReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ServerStatusCheckPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerStatusCheckPeriod" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.GetEffectiveComInstantiationParameters">
      <inheritdoc cref="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetEffectiveComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.RequestQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.RequestQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.LinkCallbackQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkCallbackQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.ResponseQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.ResponseQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.BrowseNodesChunk">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.BrowseNodesChunk" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.LinkRetrialPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkRetrialPeriod" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters" /> to COM Engines.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.GarbageCollectionPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GarbageCollectionPeriod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.WorkerSleepDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WorkerSleepDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.DefaultEventQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultEventQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.MaxClientAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.MaxClientAge" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.PluginConfigurations">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginConfigurations" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.PluginSetups">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginSetups" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.Reset">
      <inheritdoc cref="M:OpcLabs.BaseLib.ComponentParameters.Reset" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.EnableCachePersistence">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableCachePersistence" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.EnableNativeClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNativeClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.EnableNetApiClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNetApiClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.EnableServiceClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableServiceClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.PersistenceKey">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.PersistenceKey" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.HoldPeriods">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.HoldPeriods" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.Mode">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Mode" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.LinkRetrialDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.LinkRetrialDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.BufferSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.BufferSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.FastestNotificationRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.FastestNotificationRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.SlowestNotificationRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.SlowestNotificationRate" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.PluginConfigurations">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginConfigurations" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.PluginSetups">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginSetups" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.Reset">
      <inheritdoc cref="M:OpcLabs.BaseLib.ComponentParameters.Reset" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.ClientParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ClientParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.EngineParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.EngineParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.LinkParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.LinkParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.MachineParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.MachineParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode">
      <summary>
            Specifies how the OPC client object performs various operations on OPC Alarms&amp;Events servers.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.DefaultAcknowledgerId">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.AcknowledgerId" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.AEClientMode)">
      <param name="mode">Client mode to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode)">
      <param name="mode">Client mode to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.Default">
      <summary>
            Default client mode.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.AcknowledgerId">
      <summary>A string identifying who is acknowledging the conditions.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEClientMode#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.NamespaceDoc">
      <summary>
            This namespace contains classes that are used by the OPC Alarms&amp;Events engine. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters">
      <summary>
            Adaptable parameters for non-isolated client objects.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="adaptableParameters">Isolator to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Default">
      <summary>
            Default adaptable parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Reset">
      <summary>
            Sets the object properties back to their defaults.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEAdaptableParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods">
      <summary>
            Contains optimization parameters that reduce the load on the OPC server by keeping the connections open should they
            be soon needed again.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.DefaultServerDetach">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.ServerDetach" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods)">
      <param name="holdPeriods">Hold periods to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientHoldPeriods1">First object to be compared.</param>
      <param name="clientHoldPeriods2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientHoldPeriods1">First object to be compared.</param>
      <param name="clientHoldPeriods2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.Default">
      <summary>
            Default client hold periods.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.ServerDetach">
      <summary>After a server object is detached, connection to the OPC server 
            will be maintained at least for the time period specified here.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEClientHoldPeriods#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC server a whole.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DefaultBrowseNodesChunk">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.BrowseNodesChunk" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DefaultLinkCallbackQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkCallbackQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DefaultLinkRetrialPeriod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkRetrialPeriod" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DefaultRequestQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.RequestQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DefaultResponseQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.ResponseQueueSize" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <param name="clientParameters">Client parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters)">
      <param name="clientParameters">Client parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.Default">
      <summary>
            Default client parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.RequestQueueSize">
      <summary>
            The maximum number of requests in a global queue.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkCallbackQueueSize">
      <summary>
            Size of the internal queue that holds callback data from the OPC server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.ResponseQueueSize">
      <summary>
            The maximum number of responses in a global queue.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.BrowseNodesChunk">
      <summary>
            Number of nodes requested in one call when browsing for OPC areas or sources.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.LinkRetrialPeriod">
      <summary>
            Link retrial period. Number of milliseconds.
            Determines how often will the component run the internal process to re-connect to OPC links (live event 
            subscriptions) that have failed (e.g. due to incorrect parameters). 
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEClientParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters">
      <summary>
            Contains parameters that are perpetually shared among all instances of the OPC Alarms&amp;Events client object.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.DefaultMaxClientAge">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.MaxClientAge" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <param name="engineParameters">Engine parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters)">
      <param name="engineParameters">Engine parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.Default">
      <summary>
            Default engine parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.MaxClientAge">
      <summary>
            Maximum client age. Number of milliseconds. 
            When the engine recognizes that there is a connection to some OPC server that is unused for this period of time or 
            longer, it will disconnect from it.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEEngineParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters">
      <summary>
            Contains parameters that influence the behavior of just this instance of the component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientHoldPeriods)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="clientMode">Client mode to use.</param>
      <param name="holdPeriods">Hold periods to use.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="instanceParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Default">
      <summary>
            Default host parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.DefaultPluginConfigurations">
      <summary>
            Default plug-in configurations.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.DefaultPluginSetups">
      <summary>
            Default plug-in setups.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.HoldPeriods">
      <summary>
            Specifies optimization parameters that reduce the load on the OPC server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Mode">
      <summary>
            Specifies common parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAEInstanceParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.VirtualDefaultPluginConfigurations">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.VirtualDefaultPluginSetups">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Reset(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.ResetHoldPeriods">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.HoldPeriods" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.ShouldSerializeHoldPeriods">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.HoldPeriods" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.ResetMode">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Mode" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.ShouldSerializeMode">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters.Mode" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC item.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.DefaultBufferSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.BufferSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.DefaultFastestNotificationRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.FastestNotificationRate" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.DefaultLinkRetrialDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.LinkRetrialDelay" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.DefaultSlowestNotificationRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.SlowestNotificationRate" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters)">
      <param name="linkParameters">Link parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.Default">
      <summary>
            Default link parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.LinkRetrialDelay">
      <summary>
            Link retrial delay. Number of milliseconds.
            If a specific OPC link is found to be not operational, further attempts to use it will not be made until the link 
            retrial delay elapses. One of typical reasons for entering the link retrial period is using an unknown OPC area or source name, which can later become correct when the OPC server configuration is updated. 
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.BufferSize">
      <summary>
            Subscription buffer size.
            Maximum number of events that the OPC server will send in a single callback. 
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.FastestNotificationRate">
      <summary>
            Fastest notification rate. Number of milliseconds.
            If the client application specifies notification rate faster than the value specified here, EasyOPC will use the value from 
            this field instead.  
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.SlowestNotificationRate">
      <summary>
            Slowest notification rate. Number of milliseconds.
            If the client application specifies notification rate slower than the value specified here, EasyOPC will use the value from 
            this field instead.  
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAELinkParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters">
      <summary>
            Parameters that are always shared by all instances of the component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEEngineParameters,OpcLabs.EasyOpc.Engine.EasyMachineParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAELinkParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="engineParameters">Engine parameters to be used.</param>
      <param name="machineParameters">Machine parameters to be used.</param>
      <param name="clientParameters">Client parameters to be used.</param>
      <param name="linkParameters">Topic parameters to be used.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="sharedParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.Default">
      <summary>
            Default adaptable parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.DefaultPluginConfigurations">
      <summary>
            Default plug-in configurations.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.DefaultPluginSetups">
      <summary>
            Default plug-in setups.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ClientParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC server as a whole.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.EngineParameters">
      <summary>
            Contains parameters that influence the behavior of the component on the engine (global) level.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.LinkParameters">
      <summary>
            A "link" represents a live subscription connection to OPC events. Contains parameters that influence how EasyOPC 
            works with OPC event subscriptions. 
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.MachineParameters">
      <summary>
            Contains parameters related to operations that target a specific computer but not a specific OPC server, such as 
            browsing for OPC servers using various methods.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Engine#ComTypes#_EasyAESharedParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.VirtualDefaultPluginConfigurations">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.VirtualDefaultPluginSetups">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.Reset(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ResetClientParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ClientParameters" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ShouldSerializeClientParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ClientParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ResetEngineParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.EngineParameters" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ShouldSerializeEngineParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.EngineParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ResetLinkParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.LinkParameters" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ShouldSerializeLinkParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.LinkParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ResetMachineParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.MachineParameters" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.ShouldSerializeMachineParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAESharedParameters.MachineParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.
            </summary>
      <remarks>
            Note that other extension classes for the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> exist as well.
            Specifically, the basic set of extension methods is in the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension" /> class.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseOne(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>
        <para>
            Browses the nodes in OPC A&amp;E server's address space. Starts from the specified node, and 
            returns information about child nodes found.</para>
        <para>
            Browses the nodes in server's address space, given a browse arguments object.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC A&amp;E server nodes.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.AcknowledgeMultipleConditions(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments[])">
      <summary>
            Acknowledges multiple conditions in the Event Server. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="acknowledgeConditionArgumentsArray">Conditions to be acknowledged.</param>
      <returns>An array of <see cref="T:OpcLabs.BaseLib.OperationModel.OperationResult" /> objects, with indices corresponding to the input array.
            </returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.SubscribeMultipleEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments[])">
      <overloads>
        <summary>
        </summary>
        <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
        <returns>The function returns an array of integer handles. Each such handle uniquely identifies the events 
            subscription. The indices of elements in the output array are the same as those in the input array.
            </returns>
      </overloads>
      <param name="client">The client object that will perform the operation.</param>
      <param name="eventsSubscriptionArgumentsArray">Array of arguments, one element per each OPC events specification
            involved in the operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.SubscribeMultipleEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments[],OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler)">
      <summary>
      </summary>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <returns>The function returns an array of integer handles. Each such handle uniquely identifies the events 
            subscription. The indices of elements in the output array are the same as those in the input array.
            </returns>
      <param name="client">The client object that will perform the operation.</param>
      <param name="eventsSubscriptionArgumentsArray">Array of arguments, one element per each OPC events specification
            involved in the operation.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.SubscribeMultipleEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments[])">
      <summary>
      </summary>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <returns>The function returns an array of integer handles. Each such handle uniquely identifies the events 
            subscription. The indices of elements in the output array are the same as those in the input array.
            </returns>
      <param name="client">The client object that will perform the operation.</param>
      <param name="eventsSubscriptionArgumentsArray">Array of arguments, one element per each OPC events specification
            involved in the operation. The arguments element may contain callback method as well.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.SupportsTechnology(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.OpcTechnologies)">
      <summary>
            Determines whether the client object supports a given OPC technology or technologies (such as OPC COM or OPC XML).
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="opcTechnology">The OPC technologies to be tested.</param>
      <returns>Returns <c>true</c> iff the client object supports all technologies specified in
            <paramref name="opcTechnology" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.UnsubscribeMultipleEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <para>
            Unsubscribe from changes of multiple OPC events.</para>
        <para>
            Unsubscribe from changes of multiple OPC events, specifying array of integer handles.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="handles">Subscription handles. Can be an array.</param>
      <remarks>
        <para>
            The event subscription handles become invalid after this method is called.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node, using given browse arguments.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC A&amp;E server nodes.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments,System.Func{System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement},System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement}})">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node, using given browse arguments,
            transforming the sequence of child node elements using a specified function.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC A&amp;E server nodes.</param>
      <param name="nodeElementsTransformer">Transforms a sequence of child node elements before it is used for further
            browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the root.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the ObjectsFolder node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName  is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node, using given browse parameters.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Alarms&amp;Events node browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters,System.Func{System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement},System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement}})">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node, using given browse parameters,
            transforming the sequence of child node elements using a specified function.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Alarms&amp;Events node browsing.</param>
      <param name="nodeElementsTransformer">Transforms a sequence of child node elements before it is used for further browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters,System.Predicate{OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement})">
      <summary>
            Allows to traverse through OPC A&amp;E address space nodes under the specified node, using given browse parameters,
            and allowing only nodes that fulfill a specified predicate into the traversal.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Alarms&amp;Events node browsing.</param>
      <param name="nodeElementPredicate">The predicate specifying which nodes will be allowed into the traversal.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> properties, only its
            QualifiedName is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.FindEventCategory(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,System.Int64,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement@)">
      <summary>
            Attempts to find a specified event category in the OPC server, and returns information about it when found.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="categoryId">Event category ID to be found.</param>
      <param name="categoryElement">Information about the event category, if found.</param>
      <returns>Returns 'true' if the event category has been found, 'false' otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.FindEventCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,System.Int64,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AEConditionElement@)">
      <summary>
            Attempts to find a specified event condition in the OPC server and for given event category, and returns information 
            about it when found.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="categoryId">Event category whose conditions should be searched.</param>
      <param name="conditionName">Event condition name to be found.</param>
      <param name="conditionElement">Information about the event condition, if found.</param>
      <returns>Returns 'true' if the event condition has been found, 'false' otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.NamespaceDoc">
      <summary>
            This namespace contains extension classes that facilitate easy work with OPC Alarms and Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler">
      <summary>
            Represents the method that will handle an event raised every OPC event subscribed to. 
            This method can be called whether this is a refresh or standard event notification.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition">
      <summary>
            A position in a tree of OPC A&amp;E nodes.
            </summary>
      <remarks>
        <para>
            The node that corresponds to the root of the tree is special in that from the properties inherited from
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" />, only the qualified name is filled in.</para>
        <para>
            The tree positions can be used to obtain information about the current node, and the nodes on the path to the root,
            but you cannot access child or sibling nodes of the current node. This is because the tree is constructed 
            "on the fly", as the OPC address space is traversed, and sufficient information about child or sibling nodes
            may not be available.</para>
      </remarks>
      <seealso cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.Extensions.IEasyAEClientExtension2.BrowseTree(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement,OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="nodeElement">Contains information gathered about a node in OPC server's address space.</param>
      <param name="parentPosition">The parent object in the tree.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="nodeTreePosition">The OPC node tree position to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition,OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition,OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.BrowseException">
      <summary>
            Gets the exception encountered during browsing.
            </summary>
      <returns>Returns <c>null</c> reference if there has not been an exception during browsing from this node. 
            Otherwise, returns the exception that prevented the object from browsing further.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.BrowseSucceeded">
      <summary>
            Determines whether browsing was successful.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.Level">
      <summary>
            Determines the level of this object inside a tree.
            </summary>
      <returns>Level of the object.</returns>
      <remarks>The root has a level of 0.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.IsTreeRoot">
      <summary>
            Determines whether this object represents a root of the tree.
            </summary>
      <returns>
        <c>True</c> if this objects represents a root; <c>false</c> otherwise.</returns>
      <remarks>The root object does not have the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> information filled in, except for the
            <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement.NodeId" />.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.ParentPosition">
      <summary>
            Gets the parent object in the tree.
            </summary>
      <returns>Returns parent object, or <c>null</c> if this object is a root of the tree.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.GetRoot">
      <summary>
            Determines root of a tree to which the current tree position belongs.
            </summary>
      <returns>Returns a root position in this tree.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.AENodeTreePosition.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Graphs.NamespaceDoc">
      <summary>
            This namespace contains classes for graph-related operations in OPC-A&amp;E.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.NamespaceDoc">
      <summary>
            This namespace contains implementation classes that facilitate easy work with OPC Alarms and Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.Resource1.AEEventTypeConverter_ConvertTo_NotAEEventType">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not AEEventType, but a '{0}'..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.HandleMappingEasyAEClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.HandleMappingEasyAEClient.#ctor(OpcLabs.BaseLib.Identification.CookieManager,OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <overloads>
        <summary>Initializes a new instance of the class.</summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.HandleMappingEasyAEClient.MappedSubscribeEvents(System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
            Subscribes to event, with a pre-allocated outer handle.
            </summary>
      <param name="handle">The pre-allocated outer handle.</param>
      <param name="arguments">Arguments to subscribe.</param>
      <returns>Returns the outer handle, <paramref name="handle" />.</returns>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.HandleMappingEasyAEClient._innerHandleDictionary">
      <summary>
            The key is the outer handle, the value is the inner handle.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientCompositor">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientCompositor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientCompositor.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type serviceType, or <c>null</c> if there is no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientCompositor._cookieManager">
      <remarks>
        <para>
            All handle mapping clients in the compositor share the same cookie manager.</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientSettingsCompositor">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientSettingsCompositor.InstanceParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.InstanceParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientSettingsCompositor.IsolatedParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.IsolatedParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.EasyAEClientSettingsCompositor.Isolated">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.Isolated" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.AENodeDescriptorConverter">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.EasyAEClientStaticData">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.EasyAEClientStaticDataBase">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.EasyAEClientTimeouts">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.NamespaceDoc">
      <summary>
            This namespace contains internal classes that facilitate easy work with OPC Alarms and Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1.SimulatedEasyAEClient_BrowseNodes_NoParentBrowsePath">
      <summary>
              Looks up a localized string similar to The simulated OPC-A&amp;E client does not support browsing nodes without a given parent browse path..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1.SimulatedEasyAEClient_BrowseNodes_ParentNotAnArea">
      <summary>
              Looks up a localized string similar to When browsing nodes in a simulated OPC-A&amp;E client, the parent node is not an area..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.Resource1.SimulatedEasyAEClient_GetComponent_ClsidNotFound">
      <summary>
              Looks up a localized string similar to The simulated OPC-A&amp;E client cannot find a server component with given CLSID..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.BrowsePathResolvingEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.CompositeEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.BaseLib.Runtime.InteropServices.ComManagement)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
      <param name="comManagement">The COM management object to use for retrieving the parameters.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ComSecurityInitializingEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient">
      <tocexclude />
      <summary>
            Delegates all IEasyAEClient calls to the inner client.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.DelegationRecord">
      <remarks>
        <para>
            Equality must be properly defined, because it propagates to the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" />
            when the delegation is used.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.DelegationRecord.ToString">
      <remarks>
            Among others, provides better result when the delegated state is output as part of XXXXEventArgs. The 
            doubling or even further nesting of "[]" is intentional in this case, to provide a minimal visual 
            distinction of the fact the a delegation is taking place.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.PullMultipleNotifications(System.Int32,System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.PullMultipleNotifications(System.Int32,System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.TransformBackNotificationEventArgsExceptArguments(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>
            Defines how event arguments of type <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" /> are transformed.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.TransformEventsSubscriptionArguments(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
            Defines how operation arguments of type <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" /> are transformed.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.DelegateEventsSubscriptionArguments(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
            Delegates operation arguments, <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.UndelegateNotificationEventArgs(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>
            Undelegates event arguments of type <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" />.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.EnqueuingEasyAEClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.EnqueuingEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ErrorTransformingEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.FailingEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient">
      <exclude />
      <tocexclude />
      <summary>
            Forwards all IEasyAEClient calls to the inner client.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.Finalize">
      <summary>
            Finalizer.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is forwarded.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.InnerClient">
      <summary>
            Inner client to which the functionality is forwarded.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.Dispose">
      <inheridoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.SupportedTechnologies">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SupportedTechnologies" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.GetEventsSubscriptionArguments(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetEventsSubscriptionArguments(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.IsKnownEventsSubscriptionHandle(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.IsKnownEventsSubscriptionHandle(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.ChangeEventSubscription(System.Int32,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,System.Boolean)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.ChangeEventSubscription(System.Int32,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,System.Boolean)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.RefreshEventSubscription(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.RefreshEventSubscription(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.UnsubscribeEvents(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.UnsubscribeEvents(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.UnsubscribeAllEvents">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.UnsubscribeAllEvents" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.PullMultipleNotifications(System.Int32,System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.PullMultipleNotifications(System.Int32,System.Int32)" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.Notification">
      <inheritdoc cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.EventingFailure">
      <inheritdoc cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.EventingFailure" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type serviceType, or <c>null</c> if there is no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.InvokeEventingFailureEventHandler(OpcLabs.BaseLib.FailureEventHandler,OpcLabs.BaseLib.FailureEventArgs)">
      <summary>
            Invokes a <see cref="T:OpcLabs.BaseLib.FailureEventHandler" /> event handler.
            </summary>
      <param name="eventingFailureEventHandler">The event handler.</param>
      <param name="failureEventArgs">The event arguments.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.ForwardingEasyAEClient.InvokeNotificationEventHandler(OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>
            Invokes an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler" /> event handler.
            </summary>
      <param name="notificationEventHandler">The event handler.</param>
      <param name="notificationEventArgs">The event arguments.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.NotifyingEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.PSBoxingEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient">
      <exclude />
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient" /> object.</summary>
      <param name="client">The simulated OPC-A&amp;E client object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.SimulatedEasyAEClient.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.TechnologyUnsupportedEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.TimeoutImposingEasyAEClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate easy work with OPC Alarms and Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AENodeKind">
      <exclude />
      <summary>
            Provides classification of OPC Alarms&amp;Events (OPC-A&amp;E) nodes.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AENodeKind.None">
      <summary>
            The node kind is not set.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AENodeKind.Source">
      <summary>
            The node is an event source.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AENodeKind.Area">
      <summary>
            The node is an event area.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AENodeKind.Root">
      <summary>
            The node is a root.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.NamespaceDoc">
      <summary>
            This namespace defines a node space for OPC Alarms&amp;Events.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd">
      <exclude />
      <summary>
            Represents a branch front-end in OPC Alarms&amp;Events (OPC-A&amp;E) address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd" /> object.</summary>
      <param name="areaFrontEnd">The OPC-A&amp;E area front end object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given branch name.
            </summary>
      <param name="name">The name of the branch.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.NodeKind">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAENode.NodeKind" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEAreaFrontEnd.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea">
      <exclude />
      <summary>
            Represents a branch in OPC Alarms&amp;Events (OPC-A&amp;E) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea" /> object.</summary>
      <param name="serverArea">The OPC-A&amp;E server area object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given branch name.
            </summary>
      <param name="name">The name of the branch.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerArea.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent">
      <exclude />
      <summary>
            The OPC-A&amp;E server component, i.e. the executive part of the OPC-A&amp;E server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent" /> object.</summary>
      <param name="serverComponent">The OPC-A&amp;E component object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Required for Windows.Forms Class Composition Designer support
            </summary>
      <param name="container">The component container to which the new instance will be added.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.ComponentBackEnd">
      <summary>
            The OPC-A&amp;E component back-end serving this component.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.Nodes">
      <summary>
            The OPC-A&amp;E address space nodes, starting from the root level.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.Root">
      <summary>
            The root node of the OPC-A&amp;E address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.CreateRoot">
      <summary>
            Creates the root node of the address space.
            </summary>
      <returns>Returns the root node created.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.ShouldSerializeNodes">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerComponent.Nodes" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot">
      <exclude />
      <summary>
            Represents a root node in OPC Alarms&amp;Events (OPC-A&amp;E) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot" /> object.</summary>
      <param name="serverRoot">The OPC-A&amp;E server root object to be copied from.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.IsRoot">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.Node.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.Name">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.Node.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.NodeKind">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAENode.NodeKind" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerRoot.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource">
      <exclude />
      <summary>
            Represents a leaf in OPC Alarms&amp;Events (OPC-A&amp;E) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource" /> object.</summary>
      <param name="serverSource">The OPC-A&amp;E server source object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given event source name.
            </summary>
      <param name="name">The name of the leaf.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.LeafBackEnd">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.LeafFrontEnd.LeafBackEnd" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AEServerSource.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd">
      <exclude />
      <summary>
            Represents an event source front-end in OPC Alarms&amp;Events (OPC-A&amp;E) address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd" /> object.</summary>
      <param name="serverSource">The OPC-A&amp;E source front end object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given leaf name.
            </summary>
      <param name="name">The name of the leaf.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.Clone">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.NodeKind">
      <summary>
            Determines whether the node is an event source, event area, or an event root.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd.ValueEquals(OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.AESourceFrontEnd" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAEAreaBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAEComponentBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAENode">
      <exclude />
      <summary>
            An OPC Alarms&amp;Events node.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAENode.NodeKind">
      <summary>
            Determines whether the node is an event source, an event area, or an event root.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAENodeBackEnd">
      <exclude />
      <summary>
            A back-end to an OPC-A&amp;E node.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.NodeSpace.IAESourceBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used to pass arguments to OPC Alarms&amp;Events operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.NodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.NodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.BrowseParameters">
      <summary>
      </summary>
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.BrowseParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.SubscriptionParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.SubscriptionParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.RefreshWhenActive">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.RefreshWhenActive" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.NodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.NodeDescriptor" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <remarks>
        <para>
            Due to overload conflict, the actual name of this method becomes ToString_2.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ToString(System.String)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Extensions.IFormattableExtension.ToString(System.IFormattable,System.String)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_3.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Diagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Diagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.DiagnosticsCount">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.DiagnosticsSummary">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsSummary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ErrorId">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ErrorMessage">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessage" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ErrorMessageBrief">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessageBrief" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Exception">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Exception" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.NormalizedDiagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedDiagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.NormalizedException">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.State" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Succeeded">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Succeeded" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationResult.ThrowIfFailed" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ThrowIfFailed">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationResult.ThrowIfFailed" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.RegularizedValue">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.RegularizedValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.Value">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.Value" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.ValueType">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.ValueType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.SetValue(System.Object)">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.Value" />
      <remarks>Intended for use from Visual Basic 6.0.</remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.SubscriptionParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.SubscriptionParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.RefreshWhenActive">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.RefreshWhenActive" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.MemberwiseClone">
      <inheritdoc cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.MemberwiseClone" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" /> to COM clients.
            </summary>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Diagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Diagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.DiagnosticsCount">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.DiagnosticsCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.DiagnosticsSummary">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.DiagnosticsSummary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ErrorId">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ErrorMessage">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorMessage" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ErrorMessageBrief">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorMessageBrief" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Exception">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Exception" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.NormalizedDiagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.NormalizedDiagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.NormalizedException">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.NormalizedException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Succeeded">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Succeeded" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.MemberwiseClone">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationEventArgs.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ToLongString">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ToLongString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Arguments">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Arguments" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.Refresh">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Refresh" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.RefreshComplete">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.RefreshComplete" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.EnabledChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EnabledChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ActiveChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ActiveChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.AcknowledgedChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.AcknowledgedChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.QualityChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.QualityChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.SeverityChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.SeverityChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.SubconditionChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.SubconditionChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.MessageChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.MessageChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.AttributeChanged">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.AttributeChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.EventData">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EventData" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.ChangeMask">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ChangeMask" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.NamespaceDoc">
      <summary>
            This namespace contains classes that are used to pass arguments to OPC Alarms&amp;Events operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments">
      <summary>Holds arguments need to perform OPC-A&amp;E condition acknowledgement operation.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId">
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.AcknowledgerId" /> property. Equals to the 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments" /> type name in curly brackets.
        </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultComment">
      <summary>
            Default comment. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultConditionName">
      <summary>
            Default condition name. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="acknowledgeConditionArguments">Arguments to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
      <param name="state">The user-defined state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Int64,System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.Int64)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultActiveTime">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime" /> property.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultSourceDescriptor">
      <summary>
            Default source descriptor.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ServerDescriptor">
      <summary>Gets or sets the OPC server descriptor that is an argument to the operation.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.SourceDescriptor">
      <summary>Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ConditionName">
      <summary>
            A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime">
      <summary>
            An active time corresponding to the Source and Condition Name pair. In UTC.
            </summary>
      <remarks>
            This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeDouble">
      <summary>
            An active time corresponding to the Source and Condition Name pair. In UTC, as double-precision floating-point
            number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocal">
      <summary>
            An active time corresponding to the Source and Condition Name pair. In local time.
            </summary>
      <remarks>
            This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocalDouble">
      <summary>
            An active time corresponding to the Source and Condition Name pair. In local time, as double-precision
            floating-point number that contains an OLE Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.Cookie">
      <summary>
            A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.AcknowledgerId">
      <summary>
            A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. 
            When omitted, a <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DefaultAcknowledgerId" /> value is used. 
            An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.Comment">
      <summary>
            Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetActiveTime">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeActiveTime">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTime" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetActiveTimeDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeActiveTimeDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetActiveTimeLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocal" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeActiveTimeLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetActiveTimeLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocalDouble" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeActiveTimeLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ActiveTimeLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ServerDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ServerDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ResetSourceDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.SourceDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.ShouldSerializeSourceDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEAcknowledgeConditionArguments.SourceDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments">
      <summary>
            Holds arguments needed to browse OPC A&amp;E server nodes.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance, with all defaults.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.#ctor(System.Object,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="state">User-defined state object.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param>
      <param name="browseParameters">Specifies which nodes will be returned by browsing the OPC server's address space.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="browseArguments">Browse arguments object to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param>
      <param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param>
      <param name="browseParameters">Specifies which nodes will be returned by browsing the OPC server's address space.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.DefaultBrowseParameters">
      <summary>
            Default browse parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.BrowseParameters">
      <summary>
            Specifies which nodes will be returned.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_AEBrowseArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEBrowseArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.ResetBrowseParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.BrowseParameters" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.ShouldSerializeBrowseParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEBrowseArguments.BrowseParameters" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments">
      <summary>
            Holds an OPC server descriptor and event subscription parameters as arguments to subscription operation.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.DefaultRefreshWhenActive">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.RefreshWhenActive" /> property. Equals to <c>true</c>.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="eventsSubscriptionArguments">The arguments object to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Event source of interest.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,System.Boolean,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="subscriptionParameters">Subscription parameters to be used when the subscription is created</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.DefaultSubscriptionParameters">
      <summary>
            Default subscription parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ServerDescriptor">
      <summary>Gets or sets the OPC server descriptor that is an argument to the operation.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.SubscriptionParameters">
      <summary>Subscription parameters to be used when the subscription is created.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.RefreshWhenActive">
      <summary>When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_AEEventsSubscriptionArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AEEventsSubscriptionArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ServerDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ServerDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ResetSubscriptionParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.SubscriptionParameters" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.ShouldSerializeSubscriptionParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments.SubscriptionParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments">
      <summary>
            Holds all arguments needed to specify a node in an OPC-A&amp;E server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.DefaultNodeDescriptor">
      <summary>
            Default node descriptor.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor">
      <overloads>
            Initializes a new instance of the class.
            </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(System.Object,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
            Initializes a new instance of the class.
            <param name="state">User-defined state object.</param><param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para></remarks></member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(OpcLabs.BaseLib.OperationModel.OperationArguments)">
            Initializes a new instance of the class.
            <param name="operationArguments">Operation arguments object to be copied from.</param></member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(OpcLabs.BaseLib.OperationModel.OperationArguments,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
            Initializes a new instance of the class.
            <param name="operationArguments">Operation arguments object to be copied from.</param><param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para></remarks></member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
            Initializes a new instance of the class.
            <param name="serverDescriptor">Server descriptor. Identifies the OPC-A&amp;E server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.</para></remarks></member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments)">
            Initializes a new instance of the class.
            <param name="nodeArguments">An object that specifies the node in the OPC server.</param></member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            Initializes a new instance of the class.
            <summary>Initializes a new instance of the class with serialized data.</summary><param name="info">The SerializationInfo that holds the serialized object data.</param><param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param></member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ServerDescriptor">
      <summary>
            Contains the server descriptor, i.e. the data defining a connection to the OPC-A&amp;E Server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.NodeDescriptor">
      <summary>
            A descriptor of a node in a server's address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_AENodeArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ServerDescriptor" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ServerDescriptor" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ResetNodeDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.NodeDescriptor" /> to a default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.ShouldSerializeNodeDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeArguments.NodeDescriptor" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments">
      <summary>Holds an OPC server descriptor, event subscription parameters, and possibly a callback method,
            as arguments to subscription operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="eventsSubscriptionArguments">The events subscription arguments object to copy from.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="eventsSubscriptionArguments">The events subscription arguments object to copy from</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,System.Boolean,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="subscriptionParameters">Subscription parameters to be used when the subscription is created</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,System.Boolean,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="subscriptionParameters">Subscription parameters to be used when the subscription is created</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.String,System.String,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.Default">
      <summary>
            Default events subscription arguments for EasyOPC.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.Callback">
      <summary>A callback method to be invoked for each event notification.</summary>
      <value>If this is a null reference, only the notification events are generated, but no callback method is invoked.
            </value>
      <remarks>
        <para>
            This method can be called whether this is a refresh or standard event notification.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.MemberwiseClone">
      <summary>
            Creates a new object that is a memberwise copy of the current instance.
            </summary>
      <returns>A new object that is a memberwise copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_EasyAEEventsSubscriptionArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAEEventsSubscriptionArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs">
      <summary>Provides data for the EasyAEClient.Notification event.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>
            Initializes a new instance of the class, with a copy of another instance.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>Initializes a new instance of the class with given data.</summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="eventArgs1">First object to be compared.</param>
      <param name="eventArgs2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="eventArgs1">First object to be compared.</param>
      <param name="eventArgs2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.DefaultArguments">
      <summary>
            Default (events subscription) arguments.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Arguments">
      <summary>
            Holds arguments that were used to subscribe to events in an OPC-A&amp;E server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Refresh">
      <summary>Denotes whether this notification was triggered by subscription refresh.</summary>
      <remarks>
        <para>When Refresh is True, the value of True in RefreshComplete tells that the refresh has completed.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.RefreshComplete">
      <summary>When True, this notification denotes that the subscription refresh is complete.</summary>
      <remarks>
        <para>RefreshComplete can only be True when Refresh is also True.</para>
        <para>When RefreshComplete is True, the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EventData" /> property contains a null reference.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EnabledChanged">
      <summary>Indicates to the application that the Enabled state of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ActiveChanged">
      <summary>Indicates to the application that the Active state of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>This property will be always True for a "new event". (A "new event" is any event resulting from the related 
            condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.AcknowledgedChanged">
      <summary>Indicates to the application that the Acknowledged state of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.QualityChanged">
      <summary>Indicates to the application that the Quality of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.SeverityChanged">
      <summary>Indicates to the application that the Severity of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.SubconditionChanged">
      <summary>Indicates to the application that the subcondition (SubconditionName) of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.MessageChanged">
      <summary>Indicates to the application that the Message of the condition has changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.AttributeChanged">
      <summary>Indicates to the application that one or more attributes of the condition have changed.</summary>
      <remarks>
        <para>
          <b>This property is used only for Condition-Related Events (see EventType).</b>
        </para>
        <para>If the event notification is the result of a Refresh, the value of this property should be ignored.</para>
        <para>It is server-specific whether this property will be True for a "new event". (A "new event" is any event resulting 
            from the related condition leaving the Inactive and Acknowledged state.)</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EventData">
      <summary>Event notification information.</summary>
      <remarks>
        <para>The <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EventData" /> property contains an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData" /> object for regular event notifications, and for notifications 
            triggered by subscription refresh (except for RefreshComplete notification).</para>
        <para>The <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.EventData" /> property contains a null reference when an error occurred (indicating connection loss; an Exception
            property is filled in this case), when a connection is re-gained (an Exception property contains a null reference in this 
            case), or when the notification indicates that subscription refresh is complete (RefreshComplete property contains True
            in this case).</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ChangeMask">
      <summary>
            Indicates to the client which properties of the condition have changed, to have caused the server to send the event 
            notification.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_EasyAENotificationEventArgs#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ResetArguments">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Arguments" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ShouldSerializeArguments">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Arguments" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult">
      <summary>
            Holds result of a Browse operation, i.e. the node elements obtained by browsing a node in OPC-A&amp;E Server's
            address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor(System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElementCollection)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and value.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="value">The value that is a successful result of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor(System.Object,System.Exception)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and exception.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor(System.Object,System.Exception,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object, exception, and value.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
      <param name="value">The value that is a successful result of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class as a copy of another node element collection result.</summary>
      <param name="nodeElementCollectionResult">The node element collection result to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.Value">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.Generic.ValueResult`1.Value" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.OpcLabs#EasyOpc#AlarmsAndEvents#OperationModel#ComTypes#_AENodeElementCollectionResult#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._AENodeElementCollectionResult.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AENodeElementCollectionResult)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Optimization.Implementation.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E implementation types for optimization.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Optimization.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E types for optimization.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters">
      <summary>
            Contains parameters for OPC-A&amp;E Optimizer plug-in.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="optimizerPluginParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.Default">
      <summary>
            Default OPC-A&amp;E Optimizer plug-in parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters,OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.EnableServerDatabase">
      <summary>
            Determines whether ProgID database is enabled.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.OpcLabs#EasyOpc#AlarmsAndEvents#Plugins#Optimizer#ComTypes#_AEOptimizerPluginParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for OPC-A&amp;E Optimizer.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.EnableServerDatabase">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.AEOptimizerPluginParameters.EnableServerDatabase" />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.Internal.AEOptimizerPlugin">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.Internal.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E Optimizer plugin internal types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E Optimizer plugin types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Telemetry.AETelemetryPlugin">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Telemetry.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E Telemetry plugin types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.Resource1.ExceptionMessage_UnknownEventCategoryId">
      <summary>
              Looks up a localized string similar to Unknown OPC-A&amp;E event category ID..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.Telemetry.NamespaceDoc">
      <summary>
            This namespace contains OPC-A&amp;E types for telemetry.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter">
      <summary>An enumeration specifying which subset of browse elements to return.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter.NoFilter">
      <summary>
            Return nothing.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter.All">
      <summary>
            Return areas and sources.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter.Areas">
      <summary>
            Return areas only.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter.Sources">
      <summary>
            Return sources only.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType">
      <summary>Type of event, or multiple event types combined.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultAsString">
      <summary>
            Default value of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" />, i.e. corresponding to <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.All" />, expressed as
            string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultInternalValue">
      <summary>
            Internal enumeration-based value of default <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> (corresponds to <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.All" />).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultIsSimple">
      <summary>
            Default <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsSimple" /> value.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultIsTracking">
      <summary>
            Default <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsTracking" /> value.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultIsCondition">
      <summary>
            Default <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsCondition" /> value.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DefaultNumericalValue">
      <summary>
            Numerical value of default <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" />, which corresponds to <see cref="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.All" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class, with all event types included.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from other <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" />.</summary>
      <param name="eventType">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with value specified as a combination of enumerated values.</summary>
      <param name="internalValue">Combination of enumerated values to be converted.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.#ctor(System.Int64)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with value specified as bit fields in an integer.</summary>
      <param name="numericalValue">Numerical value to be converted.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)~System.Int64">
      <summary>Converts an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object to a numerical bit-coded value.</summary>
      <param name="eventType">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object value to be converted.</param>
      <returns>Returns a bit-coded value converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Implicit(System.Int64)~OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType">
      <summary>Converts a numerical bit-coded value to an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object.</summary>
      <param name="numericalValue">Numerical value to be converted.</param>
      <returns>Returns an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes)~OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType">
      <summary>Converts a combination of enumerated values to an AEEventType object.</summary>
      <param name="internalValue">Combination of enumerated values to be converted.</param>
      <returns>Returns an AEEventType converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)~OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes">
      <summary>Converts AEEventType object to a combination of enumerated values.</summary>
      <param name="eventType">AEEventType object to be converted.</param>
      <returns>Returns a combination of enumerated values converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.FromAEEventTypes(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes)">
      <summary>Converts a combination of enumerated values to an AEEventType object.</summary>
      <param name="internalValue">Combination of enumerated values to be converted.</param>
      <returns>Returns an AEEventType converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.FromInt64(System.Int64)">
      <summary>Converts a numerical bit-coded value to an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object.</summary>
      <param name="value">Numerical value to be converted.</param>
      <returns>Returns an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ToAEEventTypes(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>Converts AEEventType object to a combination of enumerated values.</summary>
      <param name="eventType">AEEventType object to be converted.</param>
      <returns>Returns a combination of enumerated values converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ToInt64(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>Converts an <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object to a numerical bit-coded value.</summary>
      <param name="eventType">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> object value to be converted.</param>
      <returns>Returns a bit-coded value converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsSimple">
      <summary>Denotes whether simple event is included in the event types.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsTracking">
      <summary>Denotes whether tracking event is included in the event types.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.IsCondition">
      <summary>Denotes whether condition-related event is included in the event types.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.InternalValue">
      <summary>
            An internal value of the event types - a combination of enumerated values.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.NumericalValue">
      <summary>
            The numerical (integer) value of the event types.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ToString">
      <summary>Returns a string with the descriptions of event types included in the filter.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.PropertyChanged">
      <summary>
            Handler for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.StandardName">
      <summary>
            A symbolic name of the current AEEventType if it has a standard name. Empty otherwise. 
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AEEventType#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes">
      <summary>Contains pre-defined constants of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> internal values.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.None">
      <summary>No event type.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.Simple">
      <summary>Simple event.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.Tracking">
      <summary>Tracking event.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.Condition">
      <summary>Condition-Related event.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes.All">
      <summary>All event types.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor">
      <summary>Contains information necessary to identify an OPC Alarms&amp;Events node (area or source), such as its 
            QualifiedName.</summary>
      <remarks>
            It is possible to construct this object from <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> returned by the browsing methods.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.DefaultQualifiedName">
      <summary>
            Default qualified name (none, i.e. <b>null</b>).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.RootQualifiedName">
      <summary>
            A qualified name that represents a root of the address space. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor.</summary>
      <param name="nodeDescriptor">The node descriptor object.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node element.</summary>
      <param name="nodeElement">The node element object - contains information gathered about a node in OPC server's 
            address space.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified qualified name.</summary>
      <param name="qualifiedName">Contains OPC qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified qualified name, and browse path.</summary>
      <param name="qualifiedName">Contains OPC qualified name (empty string for the root or if unknown).</param>
      <param name="browsePath">Contains the browse path for the OPC area or source.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Null">
      <summary>
            A null node descriptor (contains a null node ID and a null browse path).
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Root">
      <summary>
            The node descriptor for the root of the address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.op_Implicit(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)~OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> to an AENodeDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns an AENodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.op_Implicit(System.String)~OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor">
      <summary>Converts a string containing a qualified name to an AENodeDescriptor object.</summary>
      <param name="qualifiedName">Contains OPC qualified name (empty string for the root or if unknown).</param>
      <returns>Returns an AENodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.FromAENodeElement(OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement)">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> to an AENodeDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns an AENodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.FromString(System.String)">
      <summary>Converts a string containing a qualified name to an AENodeDescriptor object.</summary>
      <param name="qualifiedName">Contains OPC qualified name (empty string for the root or if unknown).</param>
      <returns>Returns an AENodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.QualifiedName">
      <summary>
            Contains OPC qualified name (empty string for the root, null reference if unknown).
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Flatten">
      <summary>
            Computes an equivalent node descriptor that is flattened.
            </summary>
      <returns>Returns an equivalent node descriptor browse path is flattened.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.Clone">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AENodeDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.DeserializeNodeDescriptorIfPresent(System.Xml.XmlReader,System.String,System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.GetNodeIdArgumentName">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.SerializeNodeDescriptorIfNotNull(System.Xml.XmlWriter,System.String,System.String,OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> interface.
            </summary>
      <remarks>
        <para>
            NOTE: This class is intentionally *not* placed in the <c>Extensions</c> namespace, but rather alongside the 
            extendee. The extension methods in this class are commonly used, and from the point of view of the developer,
            can be considered as part of the interface. In addition, this placement allows less namespaces references in typical
            projects, and better consistency with the COM interfaces (as only methods from this extension class may appear
            in the COM interfaces).</para>
        <para>
            Other extension classes may exist as well.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseServers(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <overloads>
        <summary>
            Browses for OPC (Alarms&amp;Events) servers.  
            </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Browses the local computer and returns information about OPC (Alarms&amp;Events) servers found.  
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
            about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
            CLSIDs.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseServers(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String)">
      <summary>
            Browses for OPC (Alarms&amp;Events) servers.  
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified computer and returns information about OPC (Alarms&amp;Events) servers found.  
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="location">Name of the machine. Determines the computer to browse for OPC servers. May be an empty 
            string, in which case the local computer will be browsed.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
            about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
            CLSIDs.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.GetConditionState(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String)">
      <overloads>
        <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name.
            </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
          <para>Some servers may not maintain sufficient condition state information to fully implement this method.</para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Returns the current state information for the condition instance corresponding to the source and condition name,
             passing in a server descriptor. 
             No event attributes are returned.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name, as returned by browsing. The state of 
             the condition instance associated with this source is returned.</param>
      <param name="conditionName">A condition name, as returned by querying. The state of this condition is returned.
             </param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> object. The object contains 
             information about the state of the condition.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.GetConditionState(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String,System.Int64[])">
      <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name.
            </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>Some servers may not maintain sufficient condition state information to fully implement this method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name,
            passing in the individual parameters for server location and its class. 
            Also allows to retrieve specified event attributes.
            </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. A source name, as returned by browsing. The state of 
            the condition instance associated with this source is returned.</param>
      <param name="conditionName">A condition name, as returned by querying. The state of this condition is returned.
            </param>
      <param name="attributes">Specifies the event attributes to be returned.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> object. The object contains 
            information about the state of the condition.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.GetConditionState(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String)">
      <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name.
            </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>Some servers may not maintain sufficient condition state information to fully implement this method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name,
            passing in the individual parameters for server location and its class. 
            No event attributes are returned.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. A source name, as returned by browsing. The state of 
            the condition instance associated with this source is returned.</param>
      <param name="conditionName">A condition name, as returned by querying. The state of this condition is returned.
            </param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> object. The object contains 
            information about the state of the condition.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String)">
      <overloads>
        <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
          <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses server descriptor for specifying the OPC server.
            Pass in acknowledger ID, use empty comment.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses computer name and server class for specifying the OPC server.
            Pass in acknowledger ID and comment.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String,System.DateTime,System.Int64,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses computer name and server class for specifying the OPC server.
            Pass in acknowledger ID, use empty comment.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64,System.Int64,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses server descriptor for specifying the OPC server.
            Pass in acknowledger ID, use empty comment.
            The active time is specified in UTC ticks.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTimeTicks">An active time (in UTC ticks) corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64,System.Int64,System.String,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
        <para>
            Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
            acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
            transitioning into a different sub-condition (and no other state transition of the condition). One or more 
            conditions belong to a specific event source - the source of the event notification. For each condition-related 
            event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
            part of the event notification.</para>
        <para>
            Uses server descriptor for specifying the OPC server.
            Pass in acknowledger ID and comment.
            The active time time is specified in UTC ticks.
            </para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTimeTicks">An active time (in UTC ticks) corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
            AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.String,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses computer name and server class for specifying the OPC server.
            Pass in acknowledger ID and comment.
            The active time is specified in UTC ticks.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTimeTicks">An active time (in UTC ticks) corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.AcknowledgeCondition(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.String)">
      <summary>
             Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
             acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
             transitioning into a different sub-condition (and no other state transition of the condition). One or more 
             conditions belong to a specific event source - the source of the event notification. For each condition-related 
             event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
             part of the event notification.
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
             AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Acknowledges a condition in the Event Server. 
            Uses computer name and server class for specifying the OPC server.
            Pass in acknowledger ID, use empty comment.
            The active time is specified in UTC ticks.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="qualifiedSourceName">Fully qualified source name. Identifies the source of the condition that is being 
            acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTimeTicks">An active time (in UTC ticks) corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String)">
      <overloads>
        <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Browses the specified area for child areas.
             Uses server descriptor for specifying the OPC server.
             A parent area, and a filter is passed in.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Contains fully qualified name of the parent area to be browsed (empty string for 
             root).</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
             about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child areas.
            Uses server descriptor for specifying the OPC server.
            A parent area is passed in. No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Contains fully qualified name of the parent area to be browsed (empty string for 
            root).</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the root area for child areas.
            Uses server descriptor for specifying the OPC server.
            No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child areas.
            Uses computer name and server class for specifying the OPC server.
            A parent area, and a filter is passed in.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="parentQualifiedName">Fully qualified name of the parent area to be browsed (empty string for root)
            </param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child areas.
            Uses computer name and server class for specifying the OPC server.
            A parent area is passed in. No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="parentQualifiedName">Fully qualified name of the parent area to be browsed (empty string for root)
            </param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseAreas(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child areas 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the root area for child areas.
            Uses computer name and server class for specifying the OPC server.
            No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular area found. The keys of the keyed collection are the names of the areas.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseAreas.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseAreas.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseNodes(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter)">
      <overloads>
        <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child nodes 
             (areas or sources) found.
             </summary>
      </overloads>
      <summary>
             Browses the specified area for child nodes (areas or sources).
             Uses server descriptor for specifying the OPC server.
             A parent area descriptor, and a vendor filter is passed in.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent area to be browsed (can be the root).</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <param name="browseFilter">Which subset of browse elements (areas, sources, or both) to return.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
             about a particular node (area or source) found. The keys of the keyed collection are the names of the nodes.
             </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseNodes(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child nodes 
             (areas or sources) found.
             </summary>
      <summary>
            Browses the specified area for child areas.
            Uses computer name and server class for specifying the OPC server.
            A parent area name is passed in.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="parentQualifiedName">Fully qualified name of the parent area to be browsed (empty string for root)
            </param>
      <param name="browseParameters">Contains filtering conditions.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular node (area or source) found. The keys of the keyed collection are the names of the nodes.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String)">
      <overloads>
        <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Browses the specified area for child sources.
             Uses server descriptor for specifying the OPC server.
             A parent area, and a filter is passed in.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Contains fully qualified name of the parent area to be browsed (empty string for 
             root).</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
             about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child sources.
            Uses server descriptor for specifying the OPC server.
            A parent area is passed in. No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Contains fully qualified name of the parent area to be browsed (empty string for 
            root).</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the root area for child areas.
            Uses server descriptor for specifying the OPC server.
            No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child sources.
            Uses computer name and server class for specifying the OPC server.
            A parent area, and a filter is passed in.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="parentQualifiedName">Fully qualified name of the parent area to be browsed (empty string for root)
            </param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the specified area for child sources.
            Uses computer name and server class for specifying the OPC server.
            A parent area is passed in. No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="parentQualifiedName">Fully qualified name of the parent area to be browsed (empty string for root)
            </param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.BrowseSources(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String)">
      <summary>
             Browses the specified area (or root) in OPC server's process area space, and returns information about child sources
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Browses the root area for child sources.
            Uses computer name and server class for specifying the OPC server.
            No filtering.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it by 
            DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular source found. The keys of the keyed collection are the names of the sources.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.BrowseSources.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseSources.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryCategoryConditions(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,System.Int64)">
      <summary>
            Finds out event conditions supported by given event category.
            Uses server descriptor for specifying the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="categoryId">An event category Id for which the event conditions should be queried.</param>
      <returns>A collection of condition elements, one element for each condition of the given event category.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryCategoryConditions(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int64)">
      <summary>
            Finds out event conditions supported by given event category.
            Uses computer name and server class for specifying the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="categoryId">An event category Id for which the event conditions should be queried.</param>
      <returns>A collection of condition elements, one element for each condition of the given event category.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryEventCategories(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <overloads>
        <summary>
             The QueryEventCategories method gives clients a means of finding out the specific categories of events supported by 
             a given server. This method would typically be invoked prior to specifying an event filter. Servers are able to 
             define their own custom event categories, but a list of recommended categories is provided in the OPC specification.  
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Finds out events categories supported by the server.  
             Server descriptor is used for specifying the OPC server.
             Queries event categories for all available event types.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> values, each containing 
             information about an event category implemented by the server. The keys of the keyed collection are the event 
             category IDs.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryEventCategories(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>
             The QueryEventCategories method gives clients a means of finding out the specific categories of events supported by 
             a given server. This method would typically be invoked prior to specifying an event filter. Servers are able to 
             define their own custom event categories, but a list of recommended categories is provided in the OPC specification.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Finds out events categories supported by the server.  
            Computer name and server class are used for specifying the OPC server.
            Queries event categories for given event types.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="eventTypes">One or more event types of interest. See <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> constants.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> values, each containing 
            information about an event category implemented by the server. The keys of the keyed collection are the event 
            category IDs.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryEventCategories(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String)">
      <summary>
             The QueryEventCategories method gives clients a means of finding out the specific categories of events supported by 
             a given server. This method would typically be invoked prior to specifying an event filter. Servers are able to 
             define their own custom event categories, but a list of recommended categories is provided in the OPC specification.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Finds out events categories supported by the server.  
            Computer name and server class are used for specifying the OPC server.
            Queries event categories for all available event types.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> values, each containing 
            information about an event category implemented by the server. The keys of the keyed collection are the event 
            category IDs.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QuerySourceConditions(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
            Finds out event conditions associated with the specified source name.
            Computer name and server class are used for specifying the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="sourceNodeDescriptor">A source node descriptor, usually expressed as qualified source name. 
            Only the conditions associated with this source are returned.</param>
      <returns>A collection of condition elements, one element for each condition of the given source.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryCategoryAttributes(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,System.Int64)">
      <summary>
            Finds out event attributes that the server can provide as part of an event notification within a given event 
            category.
            Uses server descriptor for specifying the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="categoryId">An event category Id for which the event attributes should be queried.</param>
      <returns>A collection of attribute elements, one element for each attribute of the given event category.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.QueryCategoryAttributes(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int64)">
      <summary>
            Finds out event attributes that the server can provide as part of an event notification within a given event 
            category.
            Uses computer name and server class for specifying the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="categoryId">An event category Id for which the event attributes should be queried.</param>
      <returns>A collection of attribute elements, one element for each attribute of the given event category.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.AEEventsSubscriptionArguments,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler)">
      <overloads>
        <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Subscribe to OPC events, using an object that holds all necessary arguments, and an optional callback.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="arguments">Holds an OPC server descriptor, event subscription parameters, and possibly a callback method,
            as arguments to subscription operation.</param>
      <param name="callback">A callback method to be invoked for each event notification.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,System.Boolean,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify server descriptor and subscription parameters objects, "refresh when active" 
            flag, and a callback method.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="subscriptionParameters">Subscription parameters to be used when the subscription is created</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> events will be 
            generated, but no callback method will be invoked.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main.php" lang="PHP" title="PHP" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.Int32)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify server and source descriptors, and notification rate.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Event source of interest.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.Int32,System.Object)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify server and source descriptors, notification rate, and state object.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Event source of interest.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,System.Boolean,System.Object)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify server descriptor and subscription parameters objects, and "refresh when active" 
            flag.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="subscriptionParameters">Subscription parameters to be used when the subscription is created</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean,System.Boolean)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, filter object, returned attributes,
            callback method, and "active" and "refresh when active" flags.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> events will be 
            generated, but no callback method will be invoked.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Net.AttributeValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean,System.Boolean)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, filter object, returned attributes,
            and "active" and "refresh when active" flags.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <param name="refreshWhenActive">When set, the subscription will automatically perform
            a Refresh after each successful connection to the server (either the initial connection, or any automatic 
            reconnection after the connection is lost).</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Net.AttributeValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, filter object, returned attributes,
            and an "active" flag. The subscription will automatically perform a Refresh after each successful connection to the 
            server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category.</param>
      <param name="active">Creates activated or deactivated subscription. See ChangeEventSubscription
            for more information.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Net.AttributeValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, filter object, and returned 
            attributes. The subscription is created active, and it will automatically perform a Refresh after each successful 
            connection to the server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="returnedAttributesByCategory">Determines the attributes to be returned for each category with 
            event notifications. A dictionary where they key is the category ID, and the value is an array of attribute IDs for 
            that event category. If omitted, no event attributes will be returned in event notifications.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\Net.AttributeValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAENotificationEventArgs\AttributeValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, and filter object.
            The subscription is created active, and it will automatically perform a Refresh after each successful connection to 
            the server. No event attributes will be returned with the notifications.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, notification rate, and a callback method.
            The subscription is created active, and it will automatically perform a Refresh after each successful connection to 
            the server. No event attributes will be returned with the notifications, and events will not be filtered.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="callback">A callback method to be invoked for each OPC event.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> events will be 
            generated, but no callback method will be invoked.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.CallbackLambda.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.CallbackMethod.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.CallbackLambda.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,System.Object)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, and notification rate.
            The subscription is created active, and it will automatically perform a Refresh after each successful connection to 
            the server. No event attributes will be returned with the notifications, and events will not be filtered.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Subscribe to OPC events. Specify machine name, server class, and notification rate.
            The subscription is created active, and it will automatically perform a Refresh after each successful connection to 
            the server. No event attributes will be returned with the notifications, and events will not be filtered.
            Does not pass in a "state" object for use in event notifications.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.ChangeEventSubscription(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.Int32,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <overloads>
        <summary>
             Changes parameters of a particular event subscription.
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.ChangeEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Changes parameters of an event subscription. Specify new notification rate and subscription filter object.
             The subscription will be activated.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="handle">Event subscription handle as returned by the SubscribeEvents method</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
             the server how often to send event notifications. This is a minimum time - do not send event notifications any 
             faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
             send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
             between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
             the parameter.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
             for the event subscription.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.ChangeEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.ChangeEventSubscription(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.Int32,System.Int32)">
      <summary>
             Changes parameters of a particular event subscription.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.ChangeEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Changes parameters of an event subscription. Specify new notification rate.
            There will be no filtering, and the subscription will be activated.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="handle">Event subscription handle as returned by the SubscribeEvents method</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.ChangeEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.PullNotification(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.Int32)">
      <summary>
            Attempts to pull an OPC event subscribed to by the <see cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" /> method. Returns
            refresh or standard event notifications.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The event arguments, or <c>null</c> if no event is available within the specified time.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.PullNotification.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\AlarmsAndEvents_EasyAEClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example PullNotification.Main" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient">
      <summary>
            Allows simple access to OPC Alarms&amp;Events servers.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.PullNotificationQueueCapacity">
      <summary>
            Capacity of the event pull queue for notifications.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.PullNotification.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\PullNotification.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\AlarmsAndEvents_EasyAEClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example PullNotification.Main" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SupportedTechnologies">
      <summary>
            Gets the OPC technologies supported.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetEventsSubscriptionArguments(System.Int32)">
      <summary>
            Obtains parameters of specified events subscription.
            </summary>
      <param name="handle">Events subscription handle as returned by the subscription method.</param>
      <returns>Returns an object that holds all information pertaining to the events subscription.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.IsKnownEventsSubscriptionHandle(System.Int32)">
      <summary>
            Determines whether the given event subscription handle is known to this client.
            </summary>
      <param name="handle">The event subscription handle to be tested.</param>
      <returns>Returns <c>true</c> if the given handle is known to the client (i.e. represents a currently subscribed event).
            Otherwise, returns <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.GetConditionState(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.Int64[])">
      <summary>
            Returns the current state information for the condition instance corresponding to the source and condition name,
            passing in a server descriptor. 
            Also allows to retrieve specified event attributes.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name, as returned by browsing. The state of 
            the condition instance associated with this source is returned.</param>
      <param name="conditionName">A condition name, as returned by querying. The state of this condition is returned.
            </param>
      <param name="attributes">Specifies the event attributes to be returned.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" /> object. The object contains 
            information about the state of the condition.</returns>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>Some servers may not maintain sufficient condition state information to fully implement this method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.GetConditionState.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\GetConditionState.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.AcknowledgeCondition(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,System.String,System.DateTime,System.Int64,System.String,System.String)">
      <summary>
        <para>
            Acknowledges a condition in the Event Server. The client will receive event notifications (indicating the 
            acknowledgement) from conditions. This method specifically acknowledges the condition becoming active or 
            transitioning into a different sub-condition (and no other state transition of the condition). One or more 
            conditions belong to a specific event source - the source of the event notification. For each condition-related 
            event notification, the corresponding Source, Condition Name, Active Time and Cookie is received by the client as 
            part of the event notification.</para>
        <para>
            Uses server descriptor for specifying the OPC server.
            Pass in acknowledger ID and comment.</para>
      </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceDescriptor">Contains fully qualified source name. Identifies the source of the condition that is 
            being acknowledged, e.g. FIC101.</param>
      <param name="conditionName">A condition name, identifying the condition that is being acknowledged. Condition Names 
            are unique within the scope of the event server. Examples of Condition Names might be "LevelAlarm" or "Deviation".
            </param>
      <param name="activeTime">An active time corresponding to the Source and Condition Name pair. This parameter uniquely 
            identifies a specific transition of the condition to the active state or into a different sub-condition and is the 
            same as the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEConditionState" />.SubconditionActiveTime condition attribute. Active Times are passed to 
            the client in the event notification. If the condition has become active again or transitioned into a different 
            sub-condition at a later time, this acknowledgment will be ignored.</param>
      <param name="cookie">A server supplied "cookie" corresponding to the Source and Condition Name pair that in addition 
            to the Active Time uniquely identifies a specific event notification. Cookies are passed to the client in the event
            notification. The client is responsible for returning the same cookie parameter, received in the event notification, 
            back to the server in the condition acknowledgment.</param>
      <param name="acknowledgerId">A string passed in by the client, identifying who is acknowledging the 
            condition. This is an attribute (AcknowledgerID) of the condition that identifies who acknowledged the condition. 
            This is just a string generated by the client. This is also also included as the ActorId in the acknowledgment event 
            notification sent to all subscribing clients. When omitted, a default value from 
            <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEClientMode" />.AcknowledgerId is used. An AcknowledgerId cannot result in an empty string, since 
            such AcknowledgerId is used to indicate that the event was automatically acknowledged by the server.</param>
      <param name="comment">Comment string passed in by the client associated with acknowledging the condition. 
            An empty string indicating no comment is allowed. When omitted, an empty string is used instead.</param>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>The client is required to pass the activeTime and cookie received in the event notification to the 
            AcknowledgeCondition method without modification.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.AcknowledgeCondition.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\AcknowledgeCondition.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <summary>
            Browses the specified computer and returns information about OPC (Alarms and Events) servers found.
            </summary>
      <param name="location">Name of the machine. Determines the computer to browse for OPC servers. May be an empty 
            string, in which case the local computer will be browsed.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
            about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
            CLSIDs.</returns>
      <param name="technologies">The OPC technologies to be used for server browsing.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\BrowseServers.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
            Browses the specified area (or root) in OPC server's process area space, and returns information about child nodes 
            (areas or sources) found.
            Uses server descriptor for specifying the OPC server.
            A parent area descriptor is passed in. No vendor-specific filtering.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent area to be browsed (can be the root).</param>
      <param name="browseParameters">Contains filtering conditions.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AENodeElement" /> values, each containing information 
            about a particular node (area or source) found. The keys of the keyed collection are the names of the nodes.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QueryEventCategories(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <summary>
        <para>
            Finds out events categories supported by the server.</para>
        <para>
            The QueryEventCategories method gives clients a means of finding out the specific categories of events supported
            by a given server. This method would typically be invoked prior to specifying an event filter. Servers are able
            to define their own custom event categories, but a list of recommended categories is provided in the OPC
            specification.</para>
        <para>
            Server descriptor is used for specifying the OPC server.
            Queries event categories for given event types.</para>
      </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="eventTypes">One or more event types of interest. See <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType" /> constants.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AddressSpace.AECategoryElement" /> values, each containing 
            information about an event category implemented by the server. The keys of the keyed collection are the event 
            category IDs.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QueryEventCategories.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QueryEventCategories.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.QuerySourceConditions(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <summary>
            Finds out event conditions associated with the specified source name.
            Uses server descriptor for specifying the OPC server.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="sourceNodeDescriptor">A source node descriptor, usually expressed as qualified source name. 
            Only the conditions associated with this source are returned.</param>
      <returns>A collection of condition elements, one element for each condition of the given source.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QuerySourceConditions.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.QuerySourceConditions.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\QuerySourceConditions.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <summary>
        <para>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.</para>
        <para>
            Subscribe to particular OPC events, using an object that holds all necessary arguments.</para>
      </summary>
      <param name="arguments">Holds an OPC server descriptor, event subscription parameters, and possibly a callback method,
            as arguments to subscription operation.</param>
      <returns>The method returns an integer handle that uniquely identifies the event subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\AlarmsAndEvents_EasyAEClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example SubscribeEvents.Main" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.ChangeEventSubscription(System.Int32,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,System.Boolean)">
      <summary>
        <para>
            Changes parameters of a particular event subscription.</para>
        <para>
            Changes parameters of an event subscription. Specify new notification rate, subscription filter object, and 
            an "active" flag.</para>
      </summary>
      <param name="handle">Event subscription handle as returned by the SubscribeEvents method</param>
      <param name="notificationRate">The requested notification rate. The notification rate is in milliseconds and tells 
            the server how often to send event notifications. This is a minimum time - do not send event notifications any 
            faster that this UNLESS the buffer size is reached. A value of 0 for notification rate means that the server should 
            send event notifications as soon as it gets them. This parameter is used to improve communications efficiency 
            between client and server. This parameter is a recommendation from the client, and the server is allowed to ignore 
            the parameter.</param>
      <param name="filter">An <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> that determines the filtering criteria to be used 
            for the event subscription.</param>
      <param name="active">Activates or deactivates the subscription. If the client deactivates the subscription, then 
            the server will no longer send event notifications to the client based on that subscription, and 
            has no responsibility to buffer or maintain the event notifications. Thus event notifications may be lost.
            Even if the subscription is inactive, the Refresh method will still function. In effect, this allows a client to 
            obtain current condition states from time to time (by invoking Refresh) without the need to process event 
            notifications in "real time".</param>
      <remarks>
        <para>
            The user-defined state, as given when subscribing to the events, cannot be changed.</para>
        <para>When you use this method, the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.Arguments" /> in the event
            notifications and callbacks may, during the transition period, correspond to an improper (older or newer) value.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.ChangeEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\ChangeEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.RefreshEventSubscription(System.Int32)">
      <summary>
            Force a refresh for all active conditions and inactive, unacknowledged conditions whose event notifications match 
            the filter of the event subscription.
            <br /><br />
            Clients often need to get the current condition information from the server, particularly at client startup, for 
            things such as a current alarm summary. The OPC Event Server supports this requirement by resending the most recent 
            event notifications which satisfy the filter in the event subscription and which are related to active and/or 
            unacknowledged conditions. The client can then derive the current condition status from the "refreshed" event 
            notifications.
            </summary>
      <param name="handle">Event subscription handle as returned by the SubscribeEvents method</param>
      <remarks>
        <para>When the client needs a refreshed list of active conditions, it will request a "refresh" from the server. The 
            server will send event notifications to that specific client indicating that they are "refresh" instead of 
            "original" event notifications. Since the client only needs to get the current state information for conditions, 
            only condition events will be refreshed. 
            Remark: "Refresh" is not a general "replay" capability since the server is not required to 
            maintain an event history. Refresh is only for updating the client's state information for active or unacknowledged 
            conditions.</para>
        <para>In addition to the refresh indicator, there may be other differences between original and refresh event 
            notifications. Specifically, since some attribute information available at the time of the original event 
            notification may be unavailable at the time of the refresh, some attributes in the refresh may be null.</para>
        <para>Refresh and original event notifications may be interleaved. Thus, it is the responsibility of the client to 
            check time stamps on the event notifications and put them into the correct order, to ensure correct condition status 
            is obtained.</para>
        <para>When sending refresh event notifications, the server indicates if there are more refresh event notifications 
            to send (see the RefreshComplete property of EasyAENotificationEventArgs).</para>
        <para>This method is applicable to condition-related events only. Notifications for simple events and tracking 
            events are not returned, even if they would satisfy the filter of the event subscription.</para>
        <para>This method is applicable both when the subscription is active and when it is inactive (see the discussion of 
            the Active for the SubscribeEvents and ChangeEventSubscription methods).</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\RefreshEventSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.RefreshEventSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\RefreshEventSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.UnsubscribeEvents(System.Int32)">
      <summary>
            Unsubscribe from particular OPC event notifications.
            </summary>
      <param name="handle">Event subscription handle as returned by the SubscribeEvents method</param>
      <remarks>
        <para>The event subscription handle becomes invalid after this method is called.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\UnsubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.UnsubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\UnsubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\AlarmsAndEvents_EasyAEClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example SubscribeEvents.Main" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.UnsubscribeAllEvents">
      <summary>
            Unsubscribe from changes of all OPC events.
            </summary>
      <remarks>
            All event subscriptions on this <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> object are unsubscribed. Their corresponding handles
            become invalid after this method is called.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\UnsubscribeAllEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.UnsubscribeAllEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\UnsubscribeAllEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.PullMultipleNotifications(System.Int32,System.Int32)">
      <summary>
            Attempts to pull multiple OPC events subscribed to by the <see cref="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)" /> method. Returns refresh or standard event notifications.
            </summary>
      <param name="maximumCount">Maximum number of event notifications returned.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>An array of event arguments, or <c>null</c> if no event is available within the specified time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.EventingFailure">
      <summary>
            Raised when a failure in the eventing infrastructure occurs.
            </summary>
    </member>
    <member name="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification">
      <summary>
            Raised for every OPC event subscribed to by the SubscribeEvents method. This method can be called whether this is 
            a refresh or standard event notification.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\AlarmsAndEvents_EasyAEClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example SubscribeEvents.Main" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\SWToolbox\TOPServer_AE.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings">
      <summary>
            Provides access to settings for <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient" /> objects.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.InstanceParameters">
      <summary>
            Contains parameters that influence the behavior of just this instance of the component.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.IsolatedParameters">
      <summary>
            Contains parameters that influence the behavior of the component when it is isolated.
            </summary>
      <remarks>Parameters in this property only apply to instances that have their <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.Isolated" /> property 
            equal to <c>true</c>.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.Isolated">
      <summary>Specifies that you wish that the object instance works with an "isolated" 
            connection to the OPC server, i.e. one that is not shared with other instances.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters">
      <summary>Contains filtering conditions for OPC Alarms&amp;Events node browsing.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.DefaultBrowseFilter">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.BrowseFilter" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.DefaultVendorFilter">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.VendorFilter" />. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter and vendor filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseFilter)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> object.</summary>
      <param name="browseParameters">Contains filtering conditions to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.Default">
      <summary>
            Default OPC A&amp;E browse parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.Empty">
      <summary>
            An empty node filter.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="nodeFilter1">First object to be compared.</param>
      <param name="nodeFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters,OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="nodeFilter1">First object to be compared.</param>
      <param name="nodeFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.BrowseFilter">
      <summary>Specifies which subset of browse elements to return (areas, sources, or both).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.VendorFilter">
      <summary>A server specific filter string (empty string for no filtering).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AEBrowseParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEBrowseParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters">
      <summary>Contains event subscription parameters, such as the active flag, notification rate, filter, and selection 
            of returned attributes.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.DefaultActive">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Active" /> property. Equals to <c>true</c>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.DefaultNotificationRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.NotificationRate" /> property. Equals to <see cref="F:System.Threading.Timeout.Infinite" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, from other <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" />.</summary>
      <param name="subscriptionParameters">Subscription parameters object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Boolean,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying the "active" flag, notification rate, subscription
            filter object, and returned attributes.</summary>
      <param name="active">Denotes active or inactive subscription.</param>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <param name="filter">Filtering criteria for the event subscription.</param>
      <param name="returnedAttributesByCategory">Attributes to be returned with event notifications for each event 
            category.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Boolean,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying the "active" flag, notification rate, and
            subscription filter object.</summary>
      <param name="active">Denotes active or inactive subscription.</param>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <param name="filter">Filtering criteria for the event subscription.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying the "active" flag, and notification rate.</summary>
      <param name="active">Denotes active or inactive subscription.</param>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying notification rate, subscription
            filter object, and returned attributes.</summary>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <param name="filter">Filtering criteria for the event subscription.</param>
      <param name="returnedAttributesByCategory">Attributes to be returned with event notifications for each event 
            category.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying notification rate, and
            subscription filter object.</summary>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <param name="filter">Filtering criteria for the event subscription.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class, specifying notification rate.</summary>
      <param name="notificationRate">Notification rate of the event subscription.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Default">
      <summary>
            Default subscription parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.DefaultFilter">
      <summary>
            Default filter.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.op_Equality(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.op_Inequality(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Active">
      <summary>Denotes active or inactive subscription.</summary>
      <remarks>
        <para>If the client deactivates the subscription, then the server will no longer send event notifications to the client 
            based on that subscription, and has no responsibility to buffer or maintain the event notifications. Thus event 
            notifications may be lost.</para>
        <para>Even if the subscription is inactive, the Refresh method will still function. In effect, this allows a client 
            to obtain current condition states from time to time (by invoking Refresh) without the need to process event notifications 
            in "real time".</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.NotificationRate">
      <summary>Notification rate of the event subscription.</summary>
      <remarks>
        <para>The notification rate is in milliseconds and tells the server how often to send event notifications. This is a 
            minimum time - do not send event notifications any faster that this UNLESS the buffer size is reached. A value of 0 
            for notification rate means that the server should send event notifications as soon as it gets them. This property is 
            used to improve communications efficiency between client and server. The notification rate is a recommendation from 
            the client, and the server is allowed to ignore the parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Filter">
      <summary>Filtering criteria for the event subscription.</summary>
      <remarks>
        <para>Contains <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter" /> object.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ReturnedAttributesByCategory">
      <summary>Attributes to be returned with event notifications for each event category.</summary>
      <remarks>
        <para>A dictionary where they key is the category ID, and the value is an array of attribute IDs for that event 
            category.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.MemberwiseClone">
      <summary>
            Creates a new object that is a memberwise copy of the current instance.
            </summary>
      <returns>A new object that is a memberwise copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.OpcLabs#EasyOpc#AlarmsAndEvents#ComTypes#_AESubscriptionParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ResetFilter">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Filter" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ShouldSerializeFilter">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.Filter" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ResetReturnedAttributesByCategory">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ReturnedAttributesByCategory" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ShouldSerializeReturnedAttributesByCategory">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ReturnedAttributesByCategory" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Analysis.NamespaceDoc">
      <summary>
            This namespace contains types for design-time and run-time analysis in OPC "Classic".
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Analysis.ServerDescriptorStringValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Analysis.ServerDescriptorValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Analysis.ServerSchemeValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Boxing.Redistributables.NamespaceDoc">
      <summary>
            This namespace contains boxer classes for OPC "Classic" redistributables.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Boxing.Redistributables.OpcCorePSBoxer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate browsing in OPC "Classic".
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.NoOpcServerFamily">
      <summary>
              Looks up a localized string similar to No OPC server family has been specified..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.ProblemBrowsingOpcAEServers">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Alarms&amp;Events (OPC-A&amp;E) servers..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.ProblemBrowsingOpcDAServers">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Data Access (OPC-DA) servers..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.ServerBrowseable_CreateNode_ServerUrlComputerNameMismatch">
      <summary>
              Looks up a localized string similar to The location "{0}" contained in OPC server URL "{1}" does not match the computer name of the parent node, "{2}". You need to add your server node under the proper computer node, or place it under "Any Computer", if available..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.Resource1.ServerBrowseable_ServerClassOrUrlCannotBeEmpty">
      <summary>
              Looks up a localized string similar to Server class or URL cannot be empty..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.ServerBrowseable">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.ServerBrowseable.ServerFamilies">
      <summary>
            The server family or families. Determines e.g. whether OPC Data Access servers, OPC Alarms&amp;Events servers, 
            other servers, or a combination of them will be browsed.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.op_Equality(OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode,OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.op_Inequality(OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode,OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.Technologies">
      <summary>
            The OPC technologies to be used for server browsing.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.Matches(OpcLabs.BaseLib.Browsing.ComputerBrowseNode)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Browsing.ComputerBrowseNode.Matches(OpcLabs.BaseLib.Browsing.ComputerBrowseNode)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode.Equals(OpcLabs.EasyOpc.Browsing.OpcComputerBrowseNode)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.ServerBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.op_Equality(OpcLabs.EasyOpc.Browsing.ServerBrowseNode,OpcLabs.EasyOpc.Browsing.ServerBrowseNode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.op_Inequality(OpcLabs.EasyOpc.Browsing.ServerBrowseNode,OpcLabs.EasyOpc.Browsing.ServerBrowseNode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Browsing.ServerBrowseNode.Equals(OpcLabs.EasyOpc.Browsing.ServerBrowseNode)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.IOpcRootBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Browsing.IServerBrowseNode">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.IServerBrowseNode.ServerDescriptor">
      <summary>Gets the OPC server descriptor.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Browsing.IServerBrowseNode.ServerElement">
      <summary>
            Gets the information about the OPC server. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Catids">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that facilitate easy work with OPC Classic.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._NodeDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.AliasName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.AliasName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.IsAliased">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.IsAliased" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.ArgumentString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.ArgumentString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.HasBrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasBrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.HasNodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasNodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.NodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.NodePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.Match(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.NodeDescriptor.Match(OpcLabs.EasyOpc.NodeDescriptor)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._NodeElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.NodeElement" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._NodeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeElement.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeElement.HasChildren">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.HasChildren" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeElement.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._NodeElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.Name" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._OpcResultException">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.OpcResultException" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.Message">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.Message" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.StackTrace">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.StackTrace" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.HelpLink">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.HelpLink" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.Source">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.Source" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.InnerException">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.InnerException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.TargetSite">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.TargetSite" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.GetBaseException">
      <inheritdoc cref="M:System.Runtime.InteropServices._Exception.GetBaseException" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._OpcResultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.Data">
      <inheritdoc cref="P:System.Exception.Data" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._OpcResultException.HResult">
      <inheritdoc cref="P:System.Exception.HResult" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._ServerCategories">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.ServerCategories" /> to COM clients.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\_ServerCategories\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\_ServerCategories\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\_ServerCategories\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerCategories.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerCategories.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerCategories.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerCategories.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerCategories.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.Families">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.Families" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.OpcAlarmsAndEvents10">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.OpcAlarmsAndEvents10" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.OpcDataAccess10">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess10" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.OpcDataAccess20">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess20" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.OpcDataAccess30">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess30" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.OpcXmlDataAccess10">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerCategories.OpcXmlDataAccess10" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._ServerDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.AliasName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.AliasName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.IsAliased">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.IsAliased" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Authority">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Authority" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.DescriptorString">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.DescriptorString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.PathAndQuery">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.PathAndQuery" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.SchemeAndAuthority">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.SchemeAndAuthority" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.UserInfo">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.UserInfo" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.UrlString">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.UrlString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Fragment">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Fragment" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Host">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Host" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Password">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Password" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Path">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Path" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Port">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Port" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Prefix">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Prefix" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Query">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Query" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Scheme">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.Scheme" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.UserName">
      <inheritdoc cref="P:OpcLabs.BaseLib.ResourceDescriptor.UserName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.NetworkSecurity">
      <inheritdoc cref="P:OpcLabs.BaseLib.EndpointDescriptor.NetworkSecurity" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Clsid">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.Clsid" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ClsidString">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ClsidString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.HasClsid">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.HasClsid" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.HasProgId">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.HasProgId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Location">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.Location" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.MachineName">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.MachineName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ObjectId">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ObjectId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ProgId">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ProgId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ServerClass">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ServerClass" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ServerProgram">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ServerProgram" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ShortUrlString">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.ShortUrlString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ServerCategories">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerCategories" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Technology">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerDescriptor.Technology" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._ServerElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.ServerElement" /> to COM clients.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\_ServerElement\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\_ServerElement\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\_ServerElement\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.Clsid">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.Clsid" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.ClsidString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.ClsidString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.Description">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.Description" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.Location">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.Location" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.ProgId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.ProgId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.ServerCategories">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.ServerCategories" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.ServerClass">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.ServerClass" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.Technology">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.Technology" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.UrlString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.UrlString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.UrlStringUnescaped">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.UrlStringUnescaped" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.Vendor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.Vendor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElement.VersionIndependentProgId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ServerElement.VersionIndependentProgId" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ComTypes._ServerElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.ServerElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Item(System.String)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Contains(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.Remove(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for OPC Data Access address space classes.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.HasChildren">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.HasChildren" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.IsBranch">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.IsBranch" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.IsLeaf">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.IsLeaf" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.IsHint">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.IsHint" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.IsItem">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.IsItem" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.ItemId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.ItemId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.NodePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeElement.NodePath" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Item(System.String)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Contains(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.Remove(System.String)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.DataType">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DataType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.Description">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Description" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.DescriptorString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DescriptorString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.ItemId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ItemId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.Name">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.ItemPath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ItemPath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.PropertyId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.PropertyId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.QualifiedName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.QualifiedName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.QualifiedNameString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedNameString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Item(System.Object)">
      <inheritdoc cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Count">
      <inheritdoc cref="P:System.Collections.ObjectModel.Collection`1.Count" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Add(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Clear">
      <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Contains(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.Remove(System.Object)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElementCollection.ToList">
      <summary>
            Creates a list from a keyed collection.
            </summary>
      <returns>A list that contains values from the keyed collection.</returns>
      <remarks>
        <para>
            This method is provided to allow access to the keyed collection elements to languages and tools with limited COM
            collection support, such PowerScript (PowerBuilder).</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.NamespaceDoc">
      <summary>
            This namespace contains classes for OPC Data Access address space.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection">
      <summary>
            A collection of node elements (<see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" />), keyed by their names.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.#ctor">
      <summary> 
            Initializes a new instance of the class. 
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement})">
      <summary> 
            Initializes a new instance of the class that contains 
            elements copied from the specified collection. 
            </summary>
      <param name="collection">collection: The collection from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.op_Equality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection,OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.op_Inequality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection,OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.Keys">
      <summary>
            A collection of node names that are keys to the condition elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.GetKeyForItem(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection">
      <summary>
            A collection of property elements (<see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" />), keyed by their names.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.#ctor">
      <summary> 
            Initializes a new instance of the class. 
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement})">
      <summary> 
            Initializes a new instance of the class that contains 
            elements copied from the specified collection. 
            </summary>
      <param name="collection">collection: The collection from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.op_Equality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection,OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.op_Inequality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection,OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.Keys">
      <summary>
            A collection of property descriptors that are keys to the condition elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.GetKeyForItem(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElementCollection.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement">
      <summary>Contains information gathered about an OPC-DA node (branch or leaf in OPC-DA server's address space).</summary>
      <remarks>
            This object is filled in and returned e.g. when you browse the OPC-DA server's address space.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.DefaultNodeId">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.DefaultItemId">
      <summary>
            Default Item Id. Equals to <b>null</b>, meaning that no Item Id is specified.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.#ctor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Initializes a new instance of the node element, with information from given node descriptor.
            </summary>
      <param name="nodeDescriptor">The node descriptor to use the information from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> object.</summary>
      <param name="nodeElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.Root">
      <summary>
            The node element for the root of the address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.op_Equality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement,OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.op_Inequality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement,OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.MakePathElements(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a path containing <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" />-s made from browse names, starting from the root.
            </summary>
      <param name="browseNames">The browse names that represent the path to be created.</param>
      <returns>An enumerable of node elements, starting from the root.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.ItemId">
      <summary>The unique identifier for this item.</summary>
      <remarks>
            If the <see cref="P:OpcLabs.EasyOpc.NodeElement.IsLeaf" /> is True and ItemID is an empty string, then this element is a “hint” versus 
            being a valid item. The <see cref="P:OpcLabs.EasyOpc.NodeElement.Name" /> property contains the hint text.
            If the value is a null reference, then the server has failed provide the item ID.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.IsHint">
      <summary>
            This element is a “hint” leaf versus being a valid item. The <see cref="P:OpcLabs.EasyOpc.NodeElement.Name" /> property contains the 
            hint text, and ItemID is an empty string.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.IsItem">
      <summary>
            This element is an item, i.e. it is a leaf but not a hint.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.Name">
      <summary>Short user friendly portion of the namespace pointing to the element. This is the string to be used for 
            display purposes.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.NodeId">
      <exclude />
      <summary>Infrastructure.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.OpcLabs#EasyOpc#DataAccess#AddressSpace#ComTypes#_DANodeElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DANodeElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement">
      <summary>Contains information gathered about an OPC property.</summary>
      <remarks>
            This object is filled in and returned e.g. when you browse the properties of an OPC item.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultDescription">
      <summary>
            Default description. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultItemId">
      <summary>
            Default Item Id that can be used to access the property (none, i.e. an empty string). 
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultItemPath">
      <summary>
            Default item path that can be used to access the property (none, i.e. an empty string). 
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultName">
      <summary>
            Default property name. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultQualifiedNameString">
      <summary>
            Default string form of the qualified name. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" /> object.</summary>
      <param name="propertyElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.Xml.XmlQualifiedName2,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.ComInterop.VarType,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.Xml.XmlQualifiedName2,OpcLabs.BaseLib.ComInterop.VarType,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.BaseLib.Xml.XmlQualifiedName2,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(OpcLabs.BaseLib.Xml.XmlQualifiedName2,OpcLabs.BaseLib.ComInterop.VarType,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultDataType">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DataType" /> property. Equals to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultPropertyId">
      <summary>
            Default property Id. It is a "null" property Id, signifying that the property Id is not specified.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DefaultQualifiedName">
      <summary>
            Default qualified name (used with OPC XML-DA). Empty.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.op_Equality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement,OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="propertyElement1">First object to be compared.</param>
      <param name="propertyElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.op_Inequality(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement,OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="propertyElement1">First object to be compared.</param>
      <param name="propertyElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.op_Implicit(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)~System.String">
      <summary>
            Converts the object into a string usable for identification of the property.
            The value returned is the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.PropertyId" /> integer formatted as a string.
            </summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="propertyElement">The object to be expressed as a string.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DataType">
      <summary>The canonical data type of this property.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Description">
      <summary>A non-localized text description of the property.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DescriptorString">
      <summary>
            A string that describes the property.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ItemId">
      <summary>A fully qualified Item Id that can be used to access this property. An empty string denotes that 
            the property can not be accessed via an Item Id.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ItemPath">
      <summary>
            Contains item path (empty string for the root or if unknown) of an item that can be used to access this property. 
            Only used with OPC XML.
            </summary>
      <remarks>
        <para>
            Not to be confused with the browse path, or the access path (only in OPC-DA 1.0, and quite rare). 
            Corresponds to <see cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Name">
      <summary>A string identifier of the property, for pre-defined properties. An empty string if the property is not 
            known.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.PropertyId">
      <summary>The Property ID for this property.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.QualifiedName">
      <summary>The qualified name for this property (used with OPC XML-DA).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.QualifiedNameString">
      <summary>The string form of the qualified name for this property (used with OPC XML-DA).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ToString">
      <summary>Returns a string with the property Id.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.OpcLabs#EasyOpc#DataAccess#AddressSpace#ComTypes#_DAPropertyElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.ComTypes._DAPropertyElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ResetDataType">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DataType" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ShouldSerializeDataType">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.DataType" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ResetPropertyId">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.PropertyId" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ShouldSerializePropertyId">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.PropertyId" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ResetQualifiedName">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.QualifiedName" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.ShouldSerializeQualifiedName">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement.QualifiedName" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Analysis.DAServerDescriptorValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Analysis.DAServerSchemeValueAnalyzer">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Analysis.NamespaceDoc">
      <summary>
            This namespace contains types for design-time and run-time analysis in OPC Data Access (OPC-DA).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate browsing in OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.ProblemBrowsingOpcDAAccessPaths">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Data Access (OPC-DA) access paths..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.ProblemBrowsingOpcDABranches">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Data Access (OPC-DA) branches..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.ProblemBrowsingOpcDALeaves">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Data Access (OPC-DA) leaves..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.Resource1.ProblemBrowsingOpcDAProperties">
      <summary>
              Looks up a localized string similar to Problem browsing OPC Data Access (OPC-DA) properties..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DAAccessPathBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DAPropertyBrowseable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DABranchBrowseFilter">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DABranchBrowseFilter.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DABranchBrowseFilter.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DABranchBrowseFilter.Equals(OpcLabs.EasyOpc.DataAccess.Browsing.DABranchBrowseFilter)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.DefaultDataType">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.DataType" /> property. Equals to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.DataType">
      <summary>Specifies to only return nodes of certain data type. Use Empty for no filtering.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.RequireReadable">
      <summary>
            Determines whether the leaves returned by the filter must be readable.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.RequireWritable">
      <summary>
            Determines whether the leaves returned by the filter must be writable.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.Equals(OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.ResetDataType">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.DataType" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.ShouldSerializeDataType">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Browsing.DALeafBrowseFilter.DataType" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter.NamePattern">
      <summary>A wildcard string to filter the returned element names (empty string for no filtering).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter.VendorFilter">
      <summary>A server specific filter string (empty string for no filtering).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
      <filterpriority>2</filterpriority>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter.Equals(OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseFilter)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DAAccessPathBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DAAccessPathBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DANodeBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.DAPropertyBrowseNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DAPropertyBrowseNode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DAPropertyBrowseNode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Browsing.DAPropertyBrowseNode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.IDAAccessPathBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.IDANodeBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Browsing.IDAPropertyBrowseNode">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that facilitate easy work with OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.StandardName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.AllowRead">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.AllowRead" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.AllowWrite">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.AllowWrite" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.InternalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.InternalValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.NumericalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.NumericalValue" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.BrowseFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.BrowseFilter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.ElementNameFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ElementNameFilter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.VendorFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.VendorFilter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.DataTypeFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DataTypeFilter" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.AccessRightsFilter">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.AccessRightsFilter" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.Locale">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Locale" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.RequestedUpdateRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.RequestedUpdateRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.PercentDeadband">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.PercentDeadband" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.AliasName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.AliasName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.IsAliased">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.IsAliased" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.ArgumentString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.ArgumentString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.HasBrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasBrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.HasNodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasNodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.NodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.NodePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Match(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.NodeDescriptor.Match(OpcLabs.EasyOpc.NodeDescriptor)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.ItemId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.ItemId" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Flatten">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Flatten" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.AccessPath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.AccessPath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.RequestedDataType">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.RequestedDataType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Clone">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.Clone" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.AliasName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.AliasName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.IsAliased">
      <inheritdoc cref="P:OpcLabs.BaseLib.Aliasing.IAliasable.IsAliased" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.ArgumentString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.ArgumentString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.BrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.HasBrowsePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasBrowsePath" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.HasNodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.HasNodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.IsRoot">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.NodeId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.NodePath">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Match(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.NodeDescriptor.Match(OpcLabs.EasyOpc.NodeDescriptor)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.ItemId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.ItemId" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Clone">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Flatten">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Flatten" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.PropertyId">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PropertyId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.QualifiedName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.QualifiedNameString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedNameString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.StandardName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.InternalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.InternalValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.IsNull">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.IsNull" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.NumericalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.NumericalValue" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetName(System.String)">
      <summary>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</summary>
      <param name="serverClsidString">A CLSID of the OPC server for which the property name should be obtained. This is used
            for properties that are server-specific. For standard properties, the method does not use this parameter and
            it can be passed in as a <c>null</c> reference.</param>
      <returns>Returns the property name.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetPropertyType(System.String)">
      <summary>
            Determines a type of this OPC property.
            </summary>
      <param name="serverClsidString">The CLSID of the OPC server on which the property resides. This is used
            for properties that are server-specific. For standard properties, the method does not use this parameter and
            it can be passed in as a <c>null</c> reference.</param>
      <returns>A type of the OPC property. If the property type cannot be determined, the property is assumed to be of 
            <see cref="T:System.Object" /> type.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_2.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.ToString(System.String)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Extensions.IFormattableExtension.ToString(System.IFormattable,System.String)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_3.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.StandardName">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.CarriesValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.CarriesValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.InternalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.InternalValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.IsBad">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsBad" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.IsGood">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsGood" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.IsUncertain">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsUncertain" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.LimitBitField">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.LimitBitField" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.NumericalValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.NumericalValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.QualityChoiceBitField">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.QualityChoiceBitField" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.StatusBitField">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAQuality.StatusBitField" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.SetQualityAndSubStatus(OpcLabs.EasyOpc.DataAccess.DAQualityChoice,System.Int16)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DAQuality.SetQualityAndSubStatus(OpcLabs.EasyOpc.DataAccess.DAQualityChoice,System.Int16)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> to COM clients.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.DataSource">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.ValueAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ValueAge" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_2.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.ToString(System.String)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Extensions.IFormattableExtension.ToString(System.IFormattable,System.String)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_3.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.HasTimestamp">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasTimestamp" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.HasValue">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.Quality">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.StatusInfo">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.StatusInfo" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.Timestamp">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.TimestampDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.TimestampLocal">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.TimestampLocalDouble">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocalDouble" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.Value">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.ValueType">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.ValueType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.DisplayValue">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DAVtq.DisplayValue" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.SetValue(System.Object)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value" />
      <remarks>Intended for use from Visual Basic 6.0.</remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAUtilities">
      <summary>
            Contains static members that facilitate work with types related to OPC Data Access.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidDataType(OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
            Determines whether a given <see cref="T:OpcLabs.BaseLib.ComInterop.VarType" /> is a valid data type in OPC Data Access.
            </summary>
      <param name="dataType">The data type to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="dataType" /> is a valid data type in OPC Data Access;
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidLocale(System.Int64)">
      <summary>
            Determines whether a given locale is valid in OPC Data Access. 
            </summary>
      <param name="locale">The locale to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="locale" /> is a valid locale; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidPercentDeadband(System.Single)">
      <summary>
            Determines whether a given percent deadband value is valid in OPC Data Access. 
            </summary>
      <param name="percentDeadband">The percent deadband value to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="percentDeadband" /> is a valid percent deadband value; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidTime(System.DateTime)">
      <summary>
            Determines whether a given time value is valid in OPC Data Access. 
            </summary>
      <param name="time">The time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be in UTC, or it must be either <see cref="F:System.DateTime.MinValue" /> or <see cref="F:System.DateTime.MaxValue" />.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidTimeLocal(System.DateTime)">
      <summary>
            Determines whether a given local time value is valid in OPC Data Access. 
            </summary>
      <param name="time">The local time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be local, or it must be either <see cref="F:System.DateTime.MinValue" /> or <see cref="F:System.DateTime.MaxValue" />.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidTimeWeak(System.DateTime)">
      <summary>
            Determines whether a given time value is weakly valid in OPC Data Access. 
            </summary>
      <param name="time">The time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be in UTC, or it must be of unspecified kind.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidTimeWeakLocal(System.DateTime)">
      <summary>
            Determines whether a given local time value is weakly valid in OPC Data Access. 
            </summary>
      <param name="time">The local time to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="time" /> is a valid time; 
            <c>false</c> otherwise.</returns>
      <remarks>Time must be local, or it must be of unspecified kind.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidUpdateRate(System.Int32)">
      <summary>
            Determines whether a given update rate value is valid in OPC Data Access. 
            </summary>
      <param name="updateRate">The update rate value to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="updateRate" /> is a valid update rate; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.IsValidValueAge(System.Int32)">
      <summary>
            Determines whether a given value age is valid in OPC Data Access. 
            </summary>
      <param name="valueAge">The value age to be tested.</param>
      <returns>
        <c>true</c> if <paramref name="valueAge" /> is a valid value age; 
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateDataType(OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateLocale(System.Int64,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidatePercentDeadband(System.Single,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateTime(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateTimeLocal(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateTimeWeak(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateTimeWeakLocal(System.DateTime,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateUpdateRate(System.Int32,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAUtilities.ValidateValueAge(System.Int32,System.String)">
      <exclude />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAVtq">
      <summary>Holds data value, timestamp and quality, abbreviated sometimes as VTQ. This is a common combination in OPC,
            e.g. returned when an OPC item is read.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class, with the specified data value, timestamp and quality.</summary>
      <param name="value">The actual data value.</param>
      <param name="timestamp">The timestamp of the data.</param>
      <param name="quality">The quality of the data.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(System.Object,System.DateTime)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value and timestamp.</summary>
      <param name="value">The actual data value.</param>
      <param name="timestamp">The timestamp of the data.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(System.Object,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value and quality.</summary>
      <param name="value">The actual data value.</param>
      <param name="quality">The quality of the data.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value.</summary>
      <param name="value">The actual data value.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object.</summary>
      <param name="vtq">The object containing the value, timestamp and quality to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.DefaultQuality">
      <summary>
            Default quality.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.DefaultTimestamp">
      <summary>
            Default timestamp. In UTC.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.DefaultTimestampLocal">
      <summary>
            Default timestamp. In local time.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Null">
      <summary>
            A null value-timestamp-quality.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.op_Equality(OpcLabs.EasyOpc.DataAccess.DAVtq,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAVtq,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasTimestamp">
      <summary>
            Determines whether there is a (non-default)  timestamp in the VTQ.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasValue">
      <summary>Returns whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value" /> contains valid data.</summary>
      <value>Returns True when the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality" /> is not Bad.</value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality">
      <summary>Gets or sets the quality.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.StatusInfo">
      <summary>
            Status information.
            </summary>
      <remarks>When this object represents a failure, the status information is 
            <see cref="F:OpcLabs.BaseLib.Data.StatusInfo.Unknown" />. When the object represents a success, the status information
            depends on the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality" />.
            </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp">
      <summary>Gets or sets the timestamp. In UTC.</summary>
      <remarks>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampDouble">
      <summary>
            Gets or sets the timestamp. In UTC, as double-precision floating-point number that contains an OLE Automation
            date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal">
      <summary>Gets or sets the timestamp. In local time.</summary>
      <remarks>
        <para>
            If you are using VBA in Excel, beware that it reduces the precision of date/times from OLE Automation to
            seconds. In order to achieve milliseconds precision from VBA in Excel, use the
            <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocalDouble" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocalDouble">
      <summary>
            Gets or sets the timestamp. In local time, as double-precision floating-point number that contains an OLE
            Automation date.
            </summary>
      <remarks>
        <para>
            This property is primarily aimed at VBA in Excel, which removes the sub-seconds parts of VT_DATE values. This
            alternative property uses VT_R8 variant type instead, and provides a milliseconds resolution.
            </para>
        <para>
            For more remarks, see <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value">
      <summary>Gets or sets the data value.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.ValueType">
      <summary>
            Returns the type of the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value" />, or <c>null</c> if there is no value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.DisplayValue">
      <summary>Formats the data value for display.</summary>
      <returns>Returns the string formatted with information about data value. Returns empty string when there is no value
            define in this object (i.e. when the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasValue" /> returns false), usually when the quality is bad. 
            </returns>
      <remarks>The current data value can be a null reference.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.SetValue(System.Object)">
      <summary>
            Sets the data value.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Value" /> property setter in .NET instead.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" />.</summary>
      <remarks>
        <para>When the quality is bad, the returned string contains just the timestamp and quality. Otherwise, the
            returned string contains also the data value, and its type.</para>
      </remarks>
      <returns>Returns the object contents expressed as readable string.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ToString(System.String)">
      <summary>
            Converts the value of the current object to its equivalent string representation using the specified format.
            </summary>
      <param name="format">A standard or custom format string (see Remarks).</param>
      <returns>A string representation of value of the current object as specified by <paramref name="format" />.</returns>
      <remarks>
        <para>
            The <paramref name="format" /> parameter should contain either a standard format specifier or a custom format 
            pattern that defines the format of the returned string. If <paramref name="format" /> is <c>null</c> or an empty 
            string, the general format specifier, 'G', is used.</para>
        <para>
            This method uses formatting information derived from the current culture.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAVtq#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.CheckValue(System.Object)">
      <summary>
            Infrastructure.
            </summary>
      <param name="value">Value to be checked.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.Equals(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ResetQuality">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldSerializeQuality">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Quality" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ResetTimestamp">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldSerializeTimestamp">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ResetTimestampDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldSerializeTimestampDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ResetTimestampLocal">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldSerializeTimestampLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ResetTimestampLocalDouble">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocalDouble" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldSerializeTimestampLocalDouble">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocalDouble" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldShowHasTimestamp">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasTimestamp" /> value is evident.
            </summary>
      <returns>
        <c>true</c> if the property value is evident when the object is converted to string, and its other
            properties shown if indicated; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldShowHasValue">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.HasValue" /> value is evident.
            </summary>
      <returns>
        <c>true</c> if the property value is evident when the object is converted to string, and its other
            properties shown if indicated; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldShowTimestamp">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.Timestamp" /> value is evident.
            </summary>
      <returns>
        <c>true</c> if the property value is evident when the object is converted to string, and its other
            properties shown if indicated; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ShouldShowTimestampLocal">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAVtq.TimestampLocal" /> value is evident.
            </summary>
      <returns>
        <c>true</c> if the property value is evident when the object is converted to string, and its other
            properties shown if indicated; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Diagnostics.EasyDAClientEventIds">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Diagnostics.EasyDAClientEventSource">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Diagnostics.NamespaceDoc">
      <summary>
            This namespace contains diagnostics classes for "Classic" OPC-DA (Data Access).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.EasyDAUriStrings">
      <summary>
            Contains URI strings used by OPC-DA client object.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.EasyDAUriStrings.OptimizerPlugin">
      <summary>
            OPC-DA optimizer plug-in.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.EasyDAUriStrings.TelemetryPlugin">
      <summary>
            OPC-DA telemetry plug-in.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used by the OPC Data Access engine. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.AllowAsynchronousMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowAsynchronousMethod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.AllowSynchronousMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowSynchronousMethod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.DesiredMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DesiredMethod" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.HttpClientConnectionLimit">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.HttpClientConnectionLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.UseAdvancedPolledRefresh">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.UseAdvancedPolledRefresh" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutFactor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutFactor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutIncrease">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutIncrease" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.Reset">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Reset" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.ItemDetach">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ItemDetach" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.ServerDetach">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ServerDetach" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.TopicRead">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicRead" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.TopicWrite">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicWrite" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.AllowAsynchronousMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowAsynchronousMethod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.AllowSynchronousMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowSynchronousMethod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.DesiredMethod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DesiredMethod" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ClientReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ClientReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ComInstantiationParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ServerFailedReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerFailedReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ServerShutdownReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerShutdownReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ServerStatusCheckPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerStatusCheckPeriod" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.GetEffectiveComInstantiationParameters">
      <inheritdoc cref="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetEffectiveComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.TopicProcessingIntervalTimeout">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingIntervalTimeout" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.TopicProcessingTotalTimeout">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingTotalTimeout" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ElementNameCaseSensitive">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ElementNameCaseSensitive" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.RequestQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.RequestQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.LinkCallbackQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.LinkCallbackQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.ResponseQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ResponseQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.BrowseNodesChunk">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.BrowseNodesChunk" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.TopicRetrialPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicRetrialPeriod" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.BrowseAccessPaths">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseAccessPaths" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.BrowseNodes">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseNodes" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.BrowseProperties">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseProperties" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.BrowseServers">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseServers" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.GetProperty">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GetProperty" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.ReadItem">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.ReadItem" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.WriteItem">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.WriteItem" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters" /> to COM Engines.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.GarbageCollectionPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GarbageCollectionPeriod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.WorkerSleepDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WorkerSleepDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.DefaultEventQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultEventQueueSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.MaxClientAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxClientAge" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.MaxTopicAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxTopicAge" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.PluginConfigurations">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginConfigurations" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.PluginSetups">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginSetups" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.Reset">
      <inheritdoc cref="M:OpcLabs.BaseLib.ComponentParameters.Reset" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.EnableCachePersistence">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableCachePersistence" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.EnableNativeClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNativeClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.EnableNetApiClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNetApiClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.EnableServiceClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableServiceClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.PersistenceKey">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.PersistenceKey" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.HoldPeriods">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HoldPeriods" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.Mode">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Mode" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.Timeouts">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Timeouts" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.PluginConfigurations">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginConfigurations" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.PluginSetups">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginSetups" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.Reset">
      <inheritdoc cref="M:OpcLabs.BaseLib.ComponentParameters.Reset" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.ClientParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ClientParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.EngineParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.EngineParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.MachineParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.MachineParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.TopicParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.TopicParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.TopicRetrialDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.TopicRetrialDelay" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode">
      <summary>
            Specifies allowed and desired methods of accessing the data in the OPC server.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Synchronous.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Synchronous.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Synchronous.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.Synchronous.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Synchronous.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DefaultAllowAsynchronousMethod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowAsynchronousMethod" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DefaultAllowSynchronousMethod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowSynchronousMethod" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DefaultDesiredMethod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DesiredMethod" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="clientMode">Client mode to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.Default">
      <summary>
            Default client mode.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode,OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode,OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowAsynchronousMethod">
      <summary>When True, asynchronous OPC reads and writes will be allowed.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Synchronous.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Synchronous.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Synchronous.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.Synchronous.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Synchronous.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.AllowSynchronousMethod">
      <summary>When True, synchronous OPC reads and writes will be allowed.</summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes (but asynchronous method is not supported)</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DesiredMethod">
      <summary>Determines whether synchronous or asynchronous OPC reads and writes will be preferred.</summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_DAClientMode#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.Equals(OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.DAReadWriteMethod">
      <summary>Determines the method (synchronous or asynchronous) used for OPC reads and writes.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.DAReadWriteMethod.Synchronous">
      <summary>Use synchronous OPC read or write.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.DAReadWriteMethod.Asynchronous">
      <summary>Use asynchronous OPC read or write.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods">
      <summary>
            Contains optimization parameters that reduce the load on the OPC server by keeping the connections open should they
            be soon needed again.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\TopicWrite.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\Net.TopicWrite.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\TopicWrite.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.DefaultItemDetach">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ItemDetach" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.DefaultServerDetach">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ServerDetach" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.DefaultTopicRead">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicRead" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.DefaultTopicWrite">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicWrite" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <param name="holdPeriods">Hold periods to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.Default">
      <summary>
            Default client hold periods.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientHoldPeriods1">First object to be compared.</param>
      <param name="clientHoldPeriods2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientHoldPeriods1">First object to be compared.</param>
      <param name="clientHoldPeriods2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ItemDetach">
      <summary>After an Item object is detached (UnsubscribeItem after SubscribeItem), connection to the OPC item 
            will be maintained at least for the time period specified here.</summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ServerDetach">
      <summary>After a server object is detached, connection to the OPC server 
            will be maintained at least for the time period specified here.</summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicRead">
      <summary>After an item read call, connection to an OPC item will be maintained at least for the time period 
            specified here.</summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.TopicWrite">
      <summary>After an item write call, connection to an OPC item will be maintained at least for the time period 
            specified here.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\TopicWrite.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\Net.TopicWrite.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientHoldPeriods\TopicWrite.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAClientHoldPeriods#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode">
      <summary>
            Specifies common parameters such as allowed and desired methods of accessing the data in the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="clientMode">Client mode to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="clientMode">Client mode to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.Default">
      <summary>
            Default client mode.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientMode1">First object to be compared.</param>
      <param name="clientMode2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAClientMode#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts">
      <summary>
            Specifies the maximum amount of time the various operations are allowed to take.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultBrowseAccessPaths">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseAccessPaths" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultBrowseNodes">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseNodes" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultBrowseProperties">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseProperties" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultBrowseServers">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseServers" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultGetProperty">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GetProperty" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultReadItem">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.ReadItem" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DefaultWriteItem">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.WriteItem" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <param name="timeouts">Timeouts to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.Default">
      <summary>
            Default client timeouts.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientTimeouts1">First object to be compared.</param>
      <param name="clientTimeouts2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientTimeouts1">First object to be compared.</param>
      <param name="clientTimeouts2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseAccessPaths">
      <summary>
            Browse access paths timeout. Number of milliseconds. 
            For BrowseAccessPaths method of the 
            <c>EasyDAClient</c>, this value determines the maximum amount of time this method waits for the signal that 
            the operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseNodes">
      <summary>
            Browse nodes timeout. Number of milliseconds. 
            For BrowseBranches, BrowseLeaves and BrowseNodes methods of the
            <c>EasyDAClient</c> object, this value determines the maximum amount of time these methods wait for the 
            signal from the OPC server that the operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseProperties">
      <summary>
            Browse properties timeout. Number of milliseconds. 
            For BrowseProperties method of the 
            <c>EasyDAClient</c>, this value determines the maximum amount of time this method waits for the signal that 
            the operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.BrowseServers">
      <summary>
            Browse servers timeout. Number of milliseconds. 
            For BrowseServers method of the 
            <c>EasyDAClient</c>, this value determines the maximum amount of time this method waits for the signal that 
            the operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GetProperty">
      <summary>
            Get property timeout. Number of milliseconds. 
            For GetPropertyValue and GetMultiplePropertyValues methods of the
            <c>EasyDAClient</c> object, this value determines the maximum amount of time these methods wait for the 
            signal from the OPC server that the operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.ReadItem">
      <summary>
            Read item timeout. Number of milliseconds. 
            For ReadItem, ReadItemValue, ReadMultipleItems and ReadMultipleItemValues methods of the
            <c>EasyDAClient</c> object, this value determines the maximum amount of time these methods wait for the 
            signal that the read operation was completed (either with success or failure). For ReadItemValue 
            and ReadMultipleItemValues methods, the received data must also be marked with Good OPC quality.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.WriteItem">
      <summary>
            Write item timeout. Number of milliseconds. 
            For WriteItem, WriteItemValue, WriteMultipleItems and WriteMultipleItemValues methods of the
            <c>EasyDAClient</c> object, this value determines the maximum amount of time these methods wait for the 
            signal from the OPC server that the write operation was completed (either with success or failure).
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAClientTimeouts#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.NamespaceDoc">
      <summary>
            This namespace contains classes that are used by the OPC Data Access engine. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters">
      <summary>
            Adaptable parameters for non-isolated client objects.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.DefaultHttpClientConnectionLimit">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.HttpClientConnectionLimit" /> property. Equals to 20.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.DefaultSubscriptionPolledRefreshTimeoutFactor">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutFactor" /> property. Equals to 1.1.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.DefaultSubscriptionPolledRefreshTimeoutIncrease">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutIncrease" /> property. Equals to 10000.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.DefaultUseAdvancedPolledRefresh">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.UseAdvancedPolledRefresh" /> property. Equals to <c>true</c>.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="adaptableParameters">Isolator to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Default">
      <summary>
            Default adaptable parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.HttpClientConnectionLimit">
      <summary>
            The maximum number of HTTP client connections allowed.
            </summary>
      <remarks>
        <para>
            Only applies to OPC XML-DA connections.</para>
        <para>
            Currently, this limit is fully functional on .NET Framework. It is only functional on .NET Core when
            authentication is not used.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: no</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.UseAdvancedPolledRefresh">
      <summary>
            Determines whether the advanced polled refresh approach will be used with OPC XML-DA.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: no</li><li>NET API client: yes</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutFactor">
      <summary>
            For computing the subscription polled refresh timeout (in OPC XML-DA), determines the multiplier used to increase the cycle time.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: no</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.SubscriptionPolledRefreshTimeoutIncrease">
      <summary>
            For computing the subscription polled refresh timeout (in OPC XML-DA), determines the absolute additional delay added. In milliseconds.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: no</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Reset">
      <summary>
            Sets the object properties back to their defaults.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAAdaptableParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC server a whole.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultBrowseNodesChunk">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.BrowseNodesChunk" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultElementNameCaseSensitive">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ElementNameCaseSensitive" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultLinkCallbackQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.LinkCallbackQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultRequestQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.RequestQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultResponseQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ResponseQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultTopicProcessingIntervalTimeout">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingIntervalTimeout" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultTopicProcessingTotalTimeout">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingTotalTimeout" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DefaultTopicRetrialPeriod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicRetrialPeriod" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <param name="clientParameters">Client parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <param name="clientParameters">Client parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.Default">
      <summary>
            Default client parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingIntervalTimeout">
      <summary>
            Topic processing interval timeout. Number of milliseconds.
            When the incoming requests related to OPC items pause for this interval, the requests collected so far are applied
            to the OPC server.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>Normally, incoming requests are logically grouped by the component, and processed according to how the
            application has structured them. This interval will therefore only have some effect under heavy system load.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicProcessingTotalTimeout">
      <summary>
            Topic processing total timeout. Number of milliseconds.
            When the incoming requests related to OPC items are being collected for this period, the requests collected so far 
            are applied to the OPC server.
            </summary>
      <remarks>
        <para>The value must be greater than zero.</para>
        <para>Normally, incoming requests are logically grouped by the component, and processed according to how the
            application has structured them. This interval will therefore only have some effect under heavy system load.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ElementNameCaseSensitive">
      <summary>
            Indicates whether the element names in the OPC server are case sensitive. This value is used when the element name
            is matched with element name filter pattern for OPC-DA 1.0 and 2.0 servers that generally cannot do the element name
            filtering internally.
            </summary>
      <remarks>
        <para>
            This parameter applies only during browsing, and only in somewhat special case. For browsing, there is a 
            parameter where you can specify a name filter (a string like "AB*", for examples), and the browse operation 
            would return only the items that match the filter. In newest OPC DA specification (3.0), this filter is passed 
            to the OPC server and interpreted there, giving us no choice to influence how it is interpreted. If your target 
            server happens to be OPC DA 1.0 or 2.0, then there is (generally) no name filtering guaranteed to be 
            implemented on the server side. We therefore get all the items from the server, ad then post-filter them on the 
            client side. In that case, you can influence the case-sensitivity of that filtering using this parameter. Note 
            that other aspects of browsing (such as case-sensitivity of the parent node ID passed to the browse operation) 
            are not influenced by this parameter.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.RequestQueueSize">
      <summary>
            Size of the internal queue that holds requests related to operations on OPC items.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.LinkCallbackQueueSize">
      <summary>
            Size of the internal queue that holds callback data from the OPC server.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ResponseQueueSize">
      <summary>
            Size of the internal queue that holds responses related to operations on OPC items.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.BrowseNodesChunk">
      <summary>
            Number of nodes requested in one call when browsing for OPC branches or leaves.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.TopicRetrialPeriod">
      <summary>
            Topic retrial period. Number of milliseconds.
            Determines how often will the component run the internal process to re-connect to OPC items that have failed (e.g. 
            due to incorrect Item IDs). 
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAClientParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters">
      <summary>
            Contains parameters that are perpetually shared among all instances of the OPC Data Access client object.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.DefaultMaxClientAge">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxClientAge" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.DefaultMaxTopicAge">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxTopicAge" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="engineParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="engineParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.Default">
      <summary>
            Default engine parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxClientAge">
      <summary>
            Maximum client age. Number of milliseconds. 
            When the engine recognizes that there is a connection to some OPC server that is unused for this period of time or 
            longer, it will disconnect from it.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.MaxTopicAge">
      <summary>
            Maximum topic age. Number of milliseconds. 
            When the engine recognizes that there is a connection to some OPC item that is unused for this period of time or 
            longer, it will disconnect from it.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAEngineParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters">
      <summary>
            Contains parameters that influence the behavior of just this instance of the OPC-DA client component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="clientMode">Client mode to use.</param>
      <param name="timeouts">Timeouts to use.</param>
      <param name="holdPeriods">Hold periods to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="instanceParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Default">
      <summary>
            Default host parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.DefaultPluginConfigurations">
      <summary>
            Default plug-in configurations.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.DefaultPluginSetups">
      <summary>
            Default plug-in setups.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HoldPeriods">
      <summary>
            Specifies optimization parameters that reduce the load on the OPC server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Mode">
      <summary>
            Specifies common parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Timeouts">
      <summary>
            Specifies the maximum amount of time the various operations are allowed to take.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDAInstanceParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.VirtualDefaultPluginConfigurations">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.VirtualDefaultPluginSetups">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Reset(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ResetHoldPeriods">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HoldPeriods" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ShouldSerializeHoldPeriods">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HoldPeriods" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ResetMode">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Mode" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ShouldSerializeMode">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Mode" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ResetTimeouts">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Timeouts" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ShouldSerializeTimeouts">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.Timeouts" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters">
      <summary>
            Parameters that are always shared by all instances of the component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters,OpcLabs.EasyOpc.Engine.EasyMachineParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="engineParameters">Engine parameters to be used.</param>
      <param name="machineParameters">Machine parameters to be used.</param>
      <param name="clientParameters">Client parameters to be used.</param>
      <param name="topicParameters">Topic parameters to be used.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="sharedParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.Default">
      <summary>
            Default adaptable parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.DefaultPluginConfigurations">
      <summary>
            Default plug-in configurations.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.DefaultPluginSetups">
      <summary>
            Default plug-in setups.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ClientParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC server as a whole.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.EngineParameters">
      <summary>
            Contains parameters that influence the behavior of the component on the engine (global) level.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.MachineParameters">
      <summary>
            Contains parameters related to operations that target a specific computer but not a specific OPC server, such as 
            browsing for OPC servers using various methods.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.TopicParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC item.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDASharedParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.VirtualDefaultPluginConfigurations">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.VirtualDefaultPluginSetups">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.Reset(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ResetClientParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ClientParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ShouldSerializeClientParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ClientParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ResetEngineParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.EngineParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ShouldSerializeEngineParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.EngineParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ResetMachineParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.MachineParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ShouldSerializeMachineParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.MachineParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ResetTopicParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.TopicParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ShouldSerializeTopicParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.TopicParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC item.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.DefaultTopicRetrialDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.TopicRetrialDelay" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <param name="topicParameters">Topic parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.Default">
      <summary>
            Default topic parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="topicParameters1">First object to be compared.</param>
      <param name="topicParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters,OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="topicParameters1">First object to be compared.</param>
      <param name="topicParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.TopicRetrialDelay">
      <summary>
            Topic retrial delay. Number of milliseconds.
            If a specific OPC item is found to be not operational, further attempts to use it will not be made until the topic 
            retrial delay elapses. One of typical reasons for entering the topic retrial period is using an unknown OPC ItemID,
            which can later become correct when the OPC server configuration is updated.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.Equals(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.OpcLabs#EasyOpc#DataAccess#Engine#ComTypes#_EasyDATopicParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord">
      <summary>
            Contains values of well-known OPC Properties for an OPC item.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.#ctor">
      <summary>
            Initializes a new instance of the class, with all values at their defaults.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.#ctor(OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord)">
      <summary>
            Initializes a new instance of the class, with all values copied from another instance.
            </summary>
      <param name="itemPropertyRecord">The item property record whose elements are copied to the new item property record.
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.PropertyIds">
      <summary>
            A property set defining which property Ids are contained in this structure.
            </summary>
      <remarks>
        <para>
            You can use this property set e.g. when obtaining a dictionary of OPC property values.
            </para>
        <para>
            This is currently equal to <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.OpcFoundationSet" /> property set.
            </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.op_Equality(OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord,OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="itemPropertyRecord1">First object to be compared.</param>
      <param name="itemPropertyRecord2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.op_Inequality(OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord,OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="conditionElement1">First object to be compared.</param>
      <param name="conditionElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.AccessRights">
      <summary>
            Gets or sets Item Access Rights.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.AlarmAreaList">
      <summary>
            Gets or sets Alarm Area List.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.AlarmQuickHelp">
      <summary>
            Gets or sets Alarm Quick Help.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.CloseLabel">
      <summary>
            Gets or sets Contact Close Label.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.ChangeRateLimit">
      <summary>
            Gets or sets Rate of Change Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.ConditionLogic">
      <summary>
            Gets or sets Condition Logic.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.ConditionStatus">
      <summary>
            Gets or sets Condition Status.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.DataType">
      <summary>
            Gets or sets Item Canonical DataType.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Deadband">
      <summary>
            Gets or sets Deadband.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Description">
      <summary>
            Gets or sets Item Description.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.DeviationLimit">
      <summary>
            Gets or sets Deviation Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.EUInfo">
      <summary>
            Gets or sets Item EUInfo.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.EUType">
      <summary>
            Gets or sets Item EU Type.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.EUUnits">
      <summary>
            Gets or sets EU Units.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.HighEU">
      <summary>
            Gets or sets High EU.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.HighHighLimit">
      <summary>
            Gets or sets HiHi Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.HighIR">
      <summary>
            Gets or sets High Instrument Range.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.HighLimit">
      <summary>
            Gets or sets Hi Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.LimitExceeded">
      <summary>
            Gets or sets Limit Exceeded.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.LowEU">
      <summary>
            Gets or sets Low EU.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.LowIR">
      <summary>
            Gets or sets Low Instrument Range.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.LowLimit">
      <summary>
            Gets or sets Lo Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.LowLowLimit">
      <summary>
            Gets or sets LoLo Limit.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.OpenLabel">
      <summary>
            Gets or sets Contact Open Label.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.PrimaryAlarmArea">
      <summary>
            Gets or sets Primary Alarm Area.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Quality">
      <summary>
            Gets or sets Item Quality.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.ScanRate">
      <summary>
            Gets or sets Server Scan Rate.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.SoundFile">
      <summary>
            Gets or sets Sound File.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Timestamp">
      <summary>
            Gets or sets Item Timestamp.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.TimeZone">
      <summary>
            Gets or sets Item Timezone.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Value">
      <summary>
            Gets or sets Item Value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.CanHaveNullValue(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>
            Determines whether the given property can have a <c>null</c> value.
            </summary>
      <param name="propertyId">The ID of the property to be tested.</param>
      <returns>Returns <c>true</c> if the property can have a <c>null</c> value; returns <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.GetProperty(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>
            Obtains a property value from this structure for an OPC property specified by its Id.
            </summary>
      <param name="propertyId">The Id of OPC property to be retrieved.</param>
      <returns>The value of OPC property.</returns>
      <remarks>
            Throws an exception if the structure does not contain a value for a specified OPC property.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.HasProperty(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>
            Determines whether a specified OPC property is contained in this structure.
            </summary>
      <param name="propertyId">The Id of OPC property to be queried.</param>
      <returns>True if the structure contains the OPC property specified, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.PutProperty(OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.Object)">
      <summary>
            Modified a property value in this structure, for an OPC property specified by its Id.
            </summary>
      <param name="propertyId">The Id of OPC property to be modified.</param>
      <param name="value">The new value of OPC property.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.TryGetProperty(OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.Object@)">
      <summary>
            Attempts to obtain a property value from this structure for an OPC property specified by its Id.
            </summary>
      <param name="propertyId">The Id of OPC property to be retrieved.</param>
      <param name="value">The value of OPC property.</param>
      <returns>True if the structure contains the OPC property specified, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord.Equals(OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdExtension">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" /> class.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet">
      <summary>
            Contains a set of OPC Property Ids.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.#ctor">
      <summary>
            Initializes a new instance of the class. The set will not contain any properties.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.DAPropertyId})">
      <summary>
            Initializes a new instance of the class, copying in OPC property IDs from another collection.
            </summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.AlarmAndEventsSet">
      <summary>
            Properties Related to Alarm and Condition Values.
            </summary>
      <remarks>
        <para>Contains following property Ids:
            <ul><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionStatus" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmQuickHelp" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmAreaList" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.PrimaryAlarmArea" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionLogic" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LimitExceeded" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Deadband" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighHighLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLowLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ChangeRateLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DeviationLimit" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.SoundFile" /></li></ul></para>
        <para>
            See the OPC Alarm and Events specification for additional information./// </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.BasicSet">
      <summary>
            Set of basic properties defined by the OPC Foundation. Includes dynamic (Value/Timestamp/Quality) properties.
            </summary>
      <remarks>
        <para>
            This is a union of <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.BasicSetNoVtq" /> and <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.VtqSet" /> property sets.
            </para>
        <para>
            ID Set 1:
            <br />
            "ID Set 1 - OPC Specific Properties - This includes information directly related to the OPC Server for the system."
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.BasicSetNoVtq">
      <summary>
            Set of basic properties defined by the OPC Foundation, excluding the dynamic (Value/Timestamp/Quality) properties.
            </summary>
      <remarks>
        <para>Contains following property Ids:
            <ul><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DataType" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AccessRights" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ScanRate" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUType" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUInfo" /></li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.ExtensionSet">
      <summary>
            Recommended properties related to the Item Value.
            </summary>
      <remarks>
        <para>Contains following property Ids:
            <ul><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUUnits" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Description" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighEU" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowEU" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighIR" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowIR" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.CloseLabel" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.OpenLabel" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TimeZone" /></li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.OpcFoundationSet">
      <summary>
            Basic and Recommended properties, as defined by OPC Foundation.
            </summary>
      <remarks>
        <para>
            This is a union of <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.BasicSet" /> and <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.RecommendedSet" /> property sets.
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.RecommendedSet">
      <summary>
            Properties recommended by OPC Foundation (related to Item Value, and also to Alarm and Condition Values).
            </summary>
      <remarks>
        <para>
            This is a union of <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.ExtensionSet" /> and <see cref="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.AlarmAndEventsSet" /> property sets.
            </para>
        <para>
            ID Set 2:
            <br />
            "Recommended Properties - This is additional information which is commonly associated with ITEMs. This includes 
            additional ranges of values that are reserved for use by other future OPC specifications. For information about the 
            newest field ID assignments, consult the other OPC Foundation specifications."
            <br />
            "... properties associated with an item which seem to fit the descriptions [are] recommended [to] use these specific 
            descriptions and ID codes to expose those properties ... ."
            <br />
            "A server can provide any subset of these values (or none of them)."
            </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.VtqSet">
      <summary>
            Dynamic (Value/Timestamp/Quality) properties.
            </summary>
      <remarks>
        <para>Contains following property Ids:
            <ul><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Value" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Quality" /></li><li><see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Timestamp" /></li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.op_Inequality(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet)">
      <summary>
            Determines whether the specified property sets contain different elements.
            </summary>
      <param name="left">First property set to be compared.</param>
      <param name="right">Second property set to be compared.</param>
      <returns>True if the property sets are different, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.op_Addition(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet)">
      <summary>
            Produces the set union of two property sets.
            </summary>
      <param name="first">First property set.</param>
      <param name="second">Second property set.</param>
      <returns>A property set that contains elements from both input property sets, excluding duplicates.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.op_Equality(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet)">
      <summary>
            Determines whether the specified property sets contain the same elements.
            </summary>
      <param name="left">First property set to be compared.</param>
      <param name="right">Second property set to be compared.</param>
      <returns>True if the property sets are the same, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.Add(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet)">
      <summary>
            Produces the set union of two property sets.
            </summary>
      <param name="first">First property set.</param>
      <param name="second">Second property set.</param>
      <returns>A property set that contains elements from both input property sets, excluding duplicates.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.Equals(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet)">
      <summary>
            Determines whether the specified property sets contain the same elements.
            </summary>
      <param name="left">First property set to be compared.</param>
      <param name="right">Second property set to be compared.</param>
      <returns>True if the property sets are the same, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.Equals(System.Object)">
      <summary>
            Determines whether the specified property set contains the same elements as the current property set.
            </summary>
      <param name="obj">Property set to be compared.</param>
      <returns>True if the property sets are the same, otherwise false.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyIdSet.GetHashCode">
      <summary>
            Serves as a hash function for a OPC property sets.
            </summary>
      <returns>A hash code for the current property set.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary">
      <summary>
            A dictionary whose key is a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" /> and value is a <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.#ctor">
      <summary>
            Initializes a new instance of the class that is empty.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.#ctor(System.Collections.Generic.IDictionary{OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.OperationModel.ValueResult})">
      <summary>
            Initializes a new instance of the class that contains elements copied from the specified dictionary.
            </summary>
      <param name="dictionary">The dictionary whose elements are copied to the new dictionary.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The initial number of elements that the dictionary can contain.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.op_Equality(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="propertyValueDictionary1">First object to be compared.</param>
      <param name="propertyValueDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.op_Inequality(OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary,OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="propertyValueDictionary1">First object to be compared.</param>
      <param name="propertyValueDictionary2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.
            </summary>
      <remarks>
            Note that other extension classes for the <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> exist as well.
            Specifically, the basic set of extension methods is in the <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension" /> class.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetDataTypePropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseOne(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>
        <para>
            Browses the nodes in OPC DA server's address space. Starts from the specified node, and 
            returns information about child nodes found.</para>
        <para>
            Browses the nodes in server's address space, given a browse arguments object.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC DA server nodes.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.SupportsTechnology(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.OpcTechnologies)">
      <summary>
            Determines whether the client object supports a given OPC technology or technologies (such as OPC COM or OPC XML).
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="opcTechnology">The OPC technologies to be tested.</param>
      <returns>Returns <c>true</c> iff the client object supports all technologies specified in
            <paramref name="opcTechnology" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>
            Allows to traverse through OPC DA address space nodes under the specified node, using given browse arguments.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC DA server nodes.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments,System.Func{System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement},System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement}})">
      <summary>
            Allows to traverse through OPC DA address space nodes under the specified node, using given browse arguments,
            transforming the sequence of child node elements using a specified function.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="browseArguments">Holds arguments needed to browse OPC DA server nodes.</param>
      <param name="nodeElementsTransformer">Transforms a sequence of child node elements before it is used for further
            browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Allows to traverse through OPC DA address space data nodes under the root.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the ObjectsFolder node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Allows to traverse through OPC DA address space data nodes under the specified node.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
            Allows to traverse through OPC DA address space nodes under the specified node, using given browse parameters.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Data Access node browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters,System.Func{System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement},System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement}})">
      <summary>
            Allows to traverse through OPC DA address space nodes under the specified node, using given browse parameters,
            transforming the sequence of child node elements using a specified function.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Data Access node browsing.</param>
      <param name="nodeElementsTransformer">Transforms a sequence of child node elements before it is used for further browsing.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters,System.Predicate{OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement})">
      <summary>
            Allows to traverse through OPC DA address space nodes under the specified node, using given browse parameters,
            and allowing only nodes that fulfill a specified predicate into the traversal.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Starting node descriptor. Identifies the node in OPC server's address space.
            </param>
      <param name="browseParameters">Contains filtering conditions for OPC Data Access node browsing.</param>
      <param name="nodeElementPredicate">The predicate specifying which nodes will be allowed into the traversal.</param>
      <returns>Returns an enumerator of tree positions that will traverse through all nodes specified.</returns>
      <remarks>
        <para>
            If you want to enumerate through a sequence of the tree nodes, convert the result to a sequence using the
            <see cref="M:OpcLabs.BaseLib.Graphs.Extensions.ITreeTraversableExtension.ToEnumerable``1(OpcLabs.BaseLib.Graphs.ITreeTraversable{``0},OpcLabs.BaseLib.Graphs.TreeTraversalType)" /> method.</para>
        <para>
            The method automatically prevents recursion into nodes that have already been traversed.</para>
        <para>
            The root position in a tree will correspond to the specified starting node. The <see cref="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition" />
            object for the root is special one, in that from its <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> properties, only its ItemId 
            is filled in.</para>
        <para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <overloads>
        <summary>
            Reads a typed named item from an OPC server. A typed value, quality and timestamp are returned. 
            </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
          <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
            not wait until the quality becomes "uncertain" or "good". </para>
        </remarks>
      </overloads>
      <summary>Reads a typed named item using descriptor objects for the OPC server and OPC-DA item.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object. The object contains the value, 
            timestamp and quality of the OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a typed named item from an OPC server. A typed value, quality and timestamp are returned. 
            </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
            not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <summary>Reads a typed named item using descriptor objects for the OPC server and OPC-DA item, and specifying read
            parameters such as the data source or value age.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">Read parameters, such as the data source or value age.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object. The object contains the value, 
            timestamp and quality of the OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a typed named item from an OPC server. A typed value, quality and timestamp are returned. 
            </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
            not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <summary>Reads a typed named item using individual parameters specifying its location, and a specific data type.
            </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object. The object contains the value, 
            timestamp and quality of the OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a typed named item from an OPC server. A typed value, quality and timestamp are returned. 
            </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
            not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <summary>Reads a typed named item using individual parameters specifying its location, and value age.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">The age of value you would like to obtain (in milliseconds).</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object. The object contains the value, 
            timestamp and quality of the OPC item requested.</returns>
      <remarks>
        <para>
            The data source (a device, OPC server's cache, or a value from OPC client component memory cache) is dynamically 
            determined based on the <paramref name="valueAge" /> argument.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <overloads>
        <summary>
             Reads a typed named item from an OPC server. Only the item's typed value is returned (quality and timestamp are not 
             returned).
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
          <para>Use this method if you are only interested in the actual typed value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual typed data value with just one function call. </para>
          <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
        </remarks>
      </overloads>
      <summary>
             Reads a value of typed named item using descriptor objects for the OPC server and OPC-DA item. 
             </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <returns>If successful, the function returns the actual, typed value of OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Reads a typed named item from an OPC server. Only the item's typed value is returned (quality and timestamp are not 
             returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual typed value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual typed data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <summary>
            Reads a value of typed named item using descriptor objects for the OPC server and OPC-DA item, and specifying read
            parameters such as the data source or value age. 
            </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">Read parameters, such as the data source or value age.</param>
      <returns>If successful, the function returns the actual, typed value of OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
             Reads a typed named item from an OPC server. Only the item's typed value is returned (quality and timestamp are not 
             returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual typed value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual typed data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <summary>
            Reads a value of typed named item using individual parameters specifying its location. 
            </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>If successful, the function returns the actual, typed value of OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
             Reads a typed named item from an OPC server. Only the item's typed value is returned (quality and timestamp are not 
             returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual typed value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual typed data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <summary>
            Reads a value of typed named item using individual parameters specifying its location, a specific data type, and 
            value age. 
            </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">The age of value you would like to obtain (in milliseconds).</param>
      <returns>If successful, the function returns the actual, typed value of OPC item requested.</returns>
      <remarks>
        <para>
            The data source (a device, OPC server's cache, or a value from OPC client component memory cache) is dynamically 
            determined based on the <parameref name="valueAge" /> argument.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{``0})">
      <overloads>
        <summary>
             Writes into a typed named item in an OPC server. A typed value, quality and timestamp are written. 
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        </remarks>
      </overloads>
      <summary>Writes a typed <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> into a (typed) named item using descriptor objects for the OPC 
             server and OPC-DA item.
             </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <param name="vtq">The object containing the typed value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{``0})">
      <summary>
             Writes into a typed named item in an OPC server. A typed value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a typed <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> into a named item using individual parameters specifying its 
            location.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="vtq">The object containing the typed value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItem``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,``0,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Writes into a typed named item in an OPC server. A typed value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a separately given typed value, timestamp and quality into a named item using individual parameters 
            specifying its location.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The typed value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,``0)">
      <overloads>
        <summary>
             Writes a typed value into a (typed) named item in an OPC server. Only the item's typed value is written (quality 
             and timestamp are not written).
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        </remarks>
      </overloads>
      <summary>Writes a typed value into a named item using descriptor objects for the OPC server and OPC-DA item.
             </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The typed value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,``0)">
      <summary>
             Writes a typed value into a (typed) named item in an OPC server. Only the item's typed value is written (quality 
             and timestamp are not written).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a typed value into a named item using individual parameters specifying its location.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The typed value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor. You can also pass
            a value age in place of read parameters</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to an array of <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Boolean" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Byte" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Char" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.DateTime" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Decimal" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Double" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int16" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int32" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Int64" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.IntPtr" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.Single" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.ReadItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Reads a value of named OPC item, and converts it to <see cref="T:System.String" />.
            The value is requested from the OPC server using a corresponding data type.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a value of the OPC item, converted to a type indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Boolean[])">
      <summary>
            Writes an array of <see cref="T:System.Boolean" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Boolean[])">
      <summary>
            Writes an array of <see cref="T:System.Boolean" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Byte[])">
      <summary>
            Writes an array of <see cref="T:System.Byte" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Byte[])">
      <summary>
            Writes an array of <see cref="T:System.Byte" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Char[])">
      <summary>
            Writes an array of <see cref="T:System.Char" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Char[])">
      <summary>
            Writes an array of <see cref="T:System.Char" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Decimal[])">
      <summary>
            Writes an array of <see cref="T:System.Decimal" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Decimal[])">
      <summary>
            Writes an array of <see cref="T:System.Decimal" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Double[])">
      <summary>
            Writes an array of <see cref="T:System.Double" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Double[])">
      <summary>
            Writes an array of <see cref="T:System.Double" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int16[])">
      <summary>
            Writes an array of <see cref="T:System.Int16" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int16[])">
      <summary>
            Writes an array of <see cref="T:System.Int16" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int32[])">
      <summary>
            Writes an array of <see cref="T:System.Int32" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32[])">
      <summary>
            Writes an array of <see cref="T:System.Int32" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int64[])">
      <summary>
            Writes an array of <see cref="T:System.Int64" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int64[])">
      <summary>
            Writes an array of <see cref="T:System.Int64" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Single[])">
      <summary>
            Writes an array of <see cref="T:System.Single" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Single[])">
      <summary>
            Writes an array of <see cref="T:System.Single" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.IntPtr[])">
      <summary>
            Writes an array of <see cref="T:System.IntPtr" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.IntPtr[])">
      <summary>
            Writes an array of <see cref="T:System.IntPtr" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String[])">
      <summary>
            Writes an array of <see cref="T:System.String" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String[])">
      <summary>
            Writes an array of <see cref="T:System.String" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.IntPtr)">
      <summary>
            Writes a <see cref="T:System.IntPtr" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.IntPtr)">
      <summary>
            Writes a <see cref="T:System.IntPtr" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WriteItemValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value into a named OPC item.
            A corresponding data type is passed to the OPC server.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetItemPropertyRecord(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <overloads>
        <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure filled with OPC property values for a given OPC item.
            </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Obtains a structure filled with OPC property values of all well-known OPC properties for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a structure containing the OPC property values requested.</returns>
      <remarks>
        <p>
            This method allows you to obtain a structure filled in with property values for a given OPC item. It can 
            retrieve all well-known properties at once, or you can pass in a set of property Ids that you are interested in. You
            can then simply use the properties in the resulting <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure, without further 
            looking up the values in any way.</p>
        <p>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</p>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetItemPropertyRecord(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.DAPropertyId},System.Boolean)">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a structure filled with OPC property values for a given OPC item. You can specify the property Ids.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyIds">Specifies which OPC properties should be obtained and returned.</param>
      <param name="allowFailures">If false, any failures cause the method to throw an exception.
            If true, failures are ignored, and the affected OPC properties will contain default values.</param>
      <returns>Returns a structure containing the OPC property values requested.</returns>
      <remarks>
        <p>
            This method allows you to obtain a structure filled in with property values for a given OPC item. It can 
            retrieve all well-known properties at once, or you can pass in a set of property Ids that you are interested in. You
            can then simply use the properties in the resulting <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure, without further 
            looking up the values in any way.</p>
        <p>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</p>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetItemPropertyRecord(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a structure filled with OPC property values of all well-known OPC properties for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a structure containing the OPC property values requested.</returns>
      <remarks>This method allows you to obtain a structure filled in with property values for a given OPC item. It can 
            retrieve all well-known properties at once, or you can pass in a set of property Ids that you are interested in. You
            can then simply use the properties in the resulting <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure, without further 
            looking up the values in any way.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetItemPropertyRecord(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.DAPropertyId},System.Boolean)">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetItemPropertyRecord.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetItemPropertyRecord.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a structure filled with OPC property values for a given OPC item. You can specify the property Ids.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="propertyIds">Specifies which OPC properties should be obtained and returned.</param>
      <param name="allowFailures">If false, any failures cause the method to throw an exception.
            If true, failures are ignored, and the affected OPC properties will contain default values.</param>
      <returns>Returns a structure containing the OPC property values requested.</returns>
      <remarks>This method allows you to obtain a structure filled in with property values for a given OPC item. It can 
            retrieve all well-known properties at once, or you can pass in a set of property Ids that you are interested in. You
            can then simply use the properties in the resulting <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAItemPropertyRecord" /> structure, without further 
            looking up the values in any way.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDictionary(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <overloads>
        <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary" /> filled with OPC property values for a given OPC item.
            </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Obtains a dictionary filled with all well-known OPC property values for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a dictionary of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects keyed by <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" />.</returns>
      <remarks>
        <p>
            This method allows you to obtain a dictionary of property values for a given OPC item, where a key to the dictionary
            is the property Id. You can pass in a set of property Ids that you are interested in, or have the method obtain all 
            well-known OPC properties. You can then easily extract the value of any property by looking it up in a dictionary 
            (as opposed to having to numerically index into an array, as with the base 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])" /> 
            method).</p>
        <p>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</p>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDictionary(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.DAPropertyId})">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary" /> filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a dictionary filled with known OPC property values for a given OPC item. You can specify the property Ids.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyIds">Specifies which OPC properties should be obtained and returned.</param>
      <returns>Returns a dictionary of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects keyed by <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" />.</returns>
      <remarks>
        <p>
            This method allows you to obtain a dictionary of property values for a given OPC item, where a key to the dictionary
            is the property Id. You can pass in a set of property Ids that you are interested in, or have the method obtain all 
            well-known OPC properties. You can then easily extract the value of any property by looking it up in a dictionary 
            (as opposed to having to numerically index into an array, as with the base 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])" /> 
            method).</p>
        <p>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</p>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDictionary(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary" /> filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a dictionary filled with all well-known OPC property values for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a dictionary of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects keyed by <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" />.</returns>
      <remarks>
            This method allows you to obtain a dictionary of property values for a given OPC item, where a key to the dictionary
            is the property Id. You can pass in a set of property Ids that you are interested in, or have the method obtain all 
            well-known OPC properties. You can then easily extract the value of any property by looking it up in a dictionary 
            (as opposed to having to numerically index into an array, as with the base 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])" /> 
            method).
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDictionary(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.DataAccess.DAPropertyId})">
      <summary>
            Obtains a <see cref="T:OpcLabs.EasyOpc.DataAccess.Extensions.DAPropertyValueDictionary" /> filled with OPC property values for a given OPC item.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Obtains a dictionary filled with known OPC property values for a given OPC item. You can specify the property Ids.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="propertyIds">Specifies which OPC properties should be obtained and returned.</param>
      <returns>Returns a dictionary of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects keyed by <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" />.</returns>
      <remarks>
            This method allows you to obtain a dictionary of property values for a given OPC item, where a key to the dictionary
            is the property Id. You can pass in a set of property Ids that you are interested in, or have the method obtain all 
            well-known OPC properties. You can then easily extract the value of any property by looking it up in a dictionary 
            (as opposed to having to numerically index into an array, as with the base 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])" /> 
            method).
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetPropertyValueDictionary.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetPropertyValueDictionary.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of typed OPC property, using descriptor objects for the OPC server, node, and the property.
            </summary>
      <typeparam name="TValue">The type of property value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The descriptor of the OPC property involved in the operation.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValue``1(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of typed OPC property, using individual parameters specifying the OPC server, and OPC Item ID.
            </summary>
      <typeparam name="TValue">The type of property value.</typeparam>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Boolean" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Boolean" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Byte" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Byte" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Char" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Char" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.DateTime" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.DateTime" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Decimal" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Decimal" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Double" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Double" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Int16" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Int16" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Int32" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Int32" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Int64" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Int64" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.IntPtr" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.IntPtr" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.Single" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.Single" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to <see cref="T:System.String" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to <see cref="T:System.String" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Boolean" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfBoolean(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Boolean" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Byte" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfByte(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Byte" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Char" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfChar(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Char" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.DateTime" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDateTime(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.DateTime" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Decimal" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDecimal(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Decimal" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Double" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfDouble(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Double" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Int16" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt16(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Int16" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Int32" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt32(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Int32" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Int64" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfInt64(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Int64" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.IntPtr" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfIntPtr(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.IntPtr" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.Single" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfSingle(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.Single" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and an OPC Item ID,
            and converts it to an array of <see cref="T:System.String" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The property descriptor of the OPC property being obtained.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPropertyValueArrayOfString(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID,
            and converts it to an array of <see cref="T:System.String" />.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested, converted to a type 
            indicated by the method name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAccessRightsPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Access Rights OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAccessRightsPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Access Rights OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAlarmAreaListPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Alarm Area List OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAlarmAreaListPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Alarm Area List OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAlarmQuickHelpPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Alarm Quick Help OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetAlarmQuickHelpPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Alarm Quick Help OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetCloseLabelPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Contact Close Label OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetCloseLabelPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Contact Close Label OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetChangeRateLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Rate of Change Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetChangeRateLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Rate of Change Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetConditionLogicPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Condition Logic OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetConditionLogicPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Condition Logic OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetConditionStatusPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Condition Status OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetConditionStatusPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Condition Status OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDataTypePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Canonical DataType OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetDataTypePropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDataTypePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Canonical DataType OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.GetDataTypePropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\GetDataTypePropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDeadbandPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Deadband OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDeadbandPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Deadband OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDescriptionPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Description OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDescriptionPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Description OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDeviationLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Deviation Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetDeviationLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Deviation Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUInfoPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item EUInfo OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUInfoPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item EUInfo OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUTypePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item EU Type OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUTypePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item EU Type OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUUnitsPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of EU Units OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetEUUnitsPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of EU Units OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighEUPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of High EU OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighEUPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of High EU OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighHighLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of HiHi Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighHighLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of HiHi Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighIRPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of High Instrument Range OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighIRPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of High Instrument Range OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Hi Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetHighLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Hi Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLimitExceededPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Limit Exceeded OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLimitExceededPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Limit Exceeded OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowEUPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Low EU OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowEUPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Low EU OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowIRPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Low Instrument Range OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowIRPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Low Instrument Range OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Lo Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Lo Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowLowLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of LoLo Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetLowLowLimitPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of LoLo Limit OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetOpenLabelPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Contact Open Label OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetOpenLabelPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Contact Open Label OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPrimaryAlarmAreaPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Primary Alarm Area OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetPrimaryAlarmAreaPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Primary Alarm Area OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetQualityPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Quality OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetQualityPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Quality OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetScanRatePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Server Scan Rate OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetScanRatePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Server Scan Rate OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetSoundFilePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Sound File OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetSoundFilePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Sound File OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetTimestampPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Timestamp OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetTimestampPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Timestamp OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetTimeZonePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Timezone OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetTimeZonePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Timezone OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetValuePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Obtains value of Item Value OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>
        <p>Do not confuse this method with <see><cref>EasyDAClient.GetPropertyValue(OpcLabs.EasyOpc.ServerDescriptor,string,OpcLabs.EasyOpc.DataAccess.DAPropertyId)</cref></see> .
            </p>
        <p>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</p>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.GetValuePropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
            Obtains value of Item Value OPC property for a given OPC item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a value of this OPC property for a specified OPC item, converted to a proper type.</returns>
      <remarks>
            Do not confuse this method with 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)" />.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.DefaultWaitMillisecondsTimeout">
      <summary>
            Default timeout used in Wait methods. In milliseconds. Equals to <see cref="F:System.Threading.Timeout.Infinite" /> (-1).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.DefaultWaitRequestedUpdateRate">
      <summary>
            Default requested update rate used in Wait methods. In milliseconds. Equals to 1000 milliseconds (1 second).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.DefaultWaitGroupParameters">
      <summary>
            Default group parameters used in Wait methods. Based on <see cref="F:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.DefaultWaitRequestedUpdateRate" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.DefaultWaitMinimumQuality">
      <summary>
            Default minimum quality used in Wait methods. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAQualities.GoodNonspecific" /> (192).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <overloads>
        <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      </overloads>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArguments">Holds an OPC server and item descriptor.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArguments">Holds an OPC server and item descriptor.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArguments">Holds an OPC server and item descriptor.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArguments">Holds an OPC server and item descriptor, and OPC group parameters.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to be used in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to be used in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA item, and monitors its data until it has "good" quality, an error occurs, or
            the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to be used in the operation.</param>
      <param name="itemDescriptor">The OPC-DA item involved in the operation.</param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClientExtension\WaitForItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClientExtension\Net.WaitForItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Func{OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult,System.Boolean}}})">
      <overloads>
        <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until the predicates specified for each item
            become true, or the alloted time elapses.
            </summary>
      </overloads>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndExitPredicateList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a predicate on <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> determining when the wait is complete.
            </param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndExitPredicateList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Func{OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs,System.Boolean}}})">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until the predicates specified for each item
            become true, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndExitPredicateList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a predicate on <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> determining when the wait is complete.
            </param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndExitPredicateList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Func{OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult,System.Boolean}}},System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until the predicates specified for each item
            become true, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndExitPredicateList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a predicate on <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> determining when the wait is complete.
            </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndExitPredicateList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Func{OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs,System.Boolean}}},System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until the predicates specified for each item
            become true, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndExitPredicateList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a predicate on <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> determining when the wait is complete.
            </param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndExitPredicateList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.DAQuality}})">
      <overloads>
        <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      </overloads>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndMinimumQualityList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a minimum quality determining when the wait is complete.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndMinimumQualityList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{System.ValueTuple{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.DAQuality}},System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsAndMinimumQualityList">List of tuples, where each tuple consists of OPC-DA item group
            arguments, and a minimum quality determining when the wait is complete.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="argumentsAndMinimumQualityList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments})">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsList">List of OPC-DA item group arguments (each argument holds an OPC server and
            item descriptor, and OPC group parameters).</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemGroupArgumentsList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments},OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsList">List of OPC-DA item group arguments (each argument holds an OPC server and
            item descriptor, and OPC group parameters).</param>
      <param name="minimumQuality">The minimum quality of OPC-DA data to accept.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemGroupArgumentsList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments},System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsList">List of OPC-DA item group arguments (each argument holds an OPC server and
            item descriptor, and OPC group parameters).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemGroupArgumentsList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments},OpcLabs.EasyOpc.DataAccess.DAQuality,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsList">List of OPC-DA item group arguments (each argument holds an OPC server and
            item descriptor, and OPC group parameters).</param>
      <param name="minimumQuality">The minimum quality of OPC-DA data to accept.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemGroupArgumentsList" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments})">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArgumentsList">List of OPC-DA item arguments (each argument holds server and item descriptor).
            </param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemArgumentsList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments},OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArgumentsList">List of OPC-DA item arguments (each argument holds server and item descriptor).
            </param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemArgumentsList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Collections.Generic.IReadOnlyList{OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments},OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Int32)">
      <summary>
            Subscribes to the specified OPC-DA items, and monitors their data until they have at least the quality
            specified for each item, an error occurs, or the alloted time elapses.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArgumentsList">List of OPC-DA item arguments (each argument holds server and item descriptor).
            </param>
      <param name="groupParameters">Contains subscription parameters, such as the requested update rate.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> to wait
            indefinitely.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input list, <paramref name="itemArgumentsList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientSettingsExtension">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings" /> interface.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientSettingsExtension.TryEnableAutoSubscribingOptimization(OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings)">
      <summary>
            Attempts to enable the auto-subscribing optimization.
            </summary>
      <param name="clientSettings">The client settings on which the operation will be performed.</param>
      <returns>Returns <c>true</c> if the auto-subscribing optimization has been successfully enabled; returns
            <c>false</c> otherwise.</returns>
      <remarks>
        <para>
            The auto-subscribing optimization can improve performance in scenarios with repeated Read requests, such as in
            certain Web applications or Web services.</para>
        <para>
            The method succeeds in the default configuration of the OPC DA client object. It fails if the
            OPC DA optimizer plugin had been removed.</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Extensions.NamespaceDoc">
      <summary>
            This namespace contains extension classes that facilitate easy work with OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Formatting.DAQualityFormatter">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Formatting.DAVtqFormatter">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Formatting.NamespaceDoc">
      <summary>
            This namespace provides classes and interfaces that provide formatting capabilities for OPC Data Access objects.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1">
      <summary>Holds an OPC server and item descriptor, and a typed data value, as arguments to some operation.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,`0,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, data value, 
            and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,`0)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, data value, 
            and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,`0,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, with the data value, and with a user-defined state object.
            </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="value">The value to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(System.String,System.String,System.String,`0)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, and with the data value.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments{`0})">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1" /> object.</summary>
      <param name="args">The item value arguments object to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.TypedValue">
      <summary>Gets or sets the data value that is an argument to the operation.</summary>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.CheckValue(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.CheckValue(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.ResetTypedValue">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.TypedValue" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.ShouldSerializeTypedValue">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.TypedValue" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1">
      <summary>Holds an OPC server and item descriptor, and a typed value/timestamp/quality (<see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" />), as 
            arguments to some operation.</summary>
      <typeparam name="T">The type of item value.</typeparam>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{`0},System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, 
            value/timestamp/quality, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{`0})">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, 
            and value/timestamp/quality.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,`0,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, with the data value, timestamp and quality, and with a 
            user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(System.String,System.String,System.String,`0,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, and with the data value, timestamp and quality.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments{`0})">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1" /> object.</summary>
      <param name="args">Item VTQ arguments object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.DefaultTypedVtq">
      <summary>
            Default typed Vtq (typed value-timestamp-quality).
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.TypedVtq">
      <summary>Gets or sets a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (value, timestamp and quality) that is an argument to the operation.
            </summary>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.ResetTypedVtq">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.TypedVtq" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.ShouldSerializeTypedVtq">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.TypedVtq" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1">
      <summary>Holds typed data value, timestamp and quality, abbreviated sometimes as VTQ. This is a common combination in 
            OPC, e.g. returned when an OPC item is read.</summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(`0,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class, with the specified data value, timestamp and quality.</summary>
      <param name="value">The actual data value.</param>
      <param name="timestamp">The timestamp of the data.</param>
      <param name="quality">The quality of the data.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(`0,System.DateTime)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value and timestamp.</summary>
      <param name="value">The actual data value.</param>
      <param name="timestamp">The timestamp of the data.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(`0,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value and quality.</summary>
      <param name="value">The actual data value.</param>
      <param name="quality">The quality of the data.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(`0)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified data value.</summary>
      <param name="value">The actual data value.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{`0})">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object.</summary>
      <param name="vtq">The object containing the value, timestamp and quality to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.Null">
      <summary>
            A null typed value-timestamp-quality.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.FromDAVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>Creates a typed generic <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> from non-generic <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object.
            </summary>
      <param name="vtq">A non-generic Value/Timestamp/Quality object to be converted to typed generic.</param>
      <returns>A typed <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> object made from <paramref name="vtq" />.</returns>
      <remarks>
            When <paramref name="vtq" /> is <b>null</b>, the return value is also <b>null</b>.
            An exception is thrown when the <paramref name="vtq" /> does not contain a type assignable to <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" />.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.TypedValue">
      <summary>Gets or sets the data value.</summary>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.CheckValue(System.Object)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.DAVtq.CheckValue(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.ResetTypedValue">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.TypedValue" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.ShouldSerializeTypedValue">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.TypedValue" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1">
      <summary>Holds result of an operation in form of a typed <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (value, timestamp, and quality).
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <remarks>
        <para>The result is successful if the <see cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Exception" /> is a null reference. Otherwise, this 
            property contains information about the reason of the failure.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult{`0})">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1" /> object.</summary>
      <param name="vtqResult">The OPC-DA typed VTQ result object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(System.Object,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{`0})">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with given state object and <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" />.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="vtq">The <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (value, timestamp and quality) that is a successful result of the 
            operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with given state object and exception.</summary>
      <param name="state">An arbitrary object associated with the operation.
            It is the state object specified when the operation was invoked.</param>
      <param name="exception">Information about the reason of the failure of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(System.Object,System.Exception,OpcLabs.EasyOpc.DataAccess.Generic.DAVtq{`0})">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with given state object, exception, and 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" />.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
      <param name="vtq">The typed <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (value, timestamp and quality) that is a successful result of the 
            operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.op_Explicit(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult{`0})~OpcLabs.BaseLib.OperationModel.Generic.ValueResult{`0}">
      <summary>
            Converts OPC-DA typed VTQ result object to a corresponding typed value result object,
            <see cref="T:OpcLabs.BaseLib.OperationModel.Generic.ValueResult`1" />. 
            </summary>
      <param name="vtqResult">The OPC-DA typed VTQ result to be converted.</param>
      <returns>The typed value result object that corresponds to the typed VTQ result. <b>null</b> if the typed VTQ
            result passed in was <b>null</b>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.ToValueResult(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult{`0})">
      <summary>
            Converts OPC-DA typed VTQ result object to a corresponding typed value result object,
            <see cref="T:OpcLabs.BaseLib.OperationModel.Generic.ValueResult`1" />. 
            </summary>
      <param name="vtqResult">The OPC-DA typed VTQ result to be converted.</param>
      <returns>The typed value result object that corresponds to the typed VTQ result. <b>null</b> if the typed VTQ
            result passed in was <b>null</b>.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.TypedVtq">
      <summary>Gets or sets a <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (value, timestamp and quality) that is a successful result of the 
            operation.
            </summary>
      <value>Contains a null reference, when <see cref="T:System.Exception" /> is not null. Contains a non-null object when
            <see cref="T:System.Exception" /> is null.</value>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1">
      <summary>Provides typed data for an event raised for every significant change in a subscribed OPC item.</summary>
      <typeparam name="TValue">The type of item value.</typeparam>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.#ctor">
      <inheritdoc cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Initializes a new instance of the class, with a copy of another instance.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.op_Explicit(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs{`0})~OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult{`0}">
      <summary>
            Converts typed event arguments to a corresponding typed result object, <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1" />. 
            </summary>
      <param name="eventArgs">The typed event arguments to be converted.</param>
      <returns>The typed result object that corresponds to the event arguments. <b>null</b> if the event arguments
            passed in were <b>null</b>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.ToDAVtqResult(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs{`0})">
      <summary>
            Converts typed event arguments to a corresponding typed result object, <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1" />. 
            </summary>
      <param name="eventArgs">The typed event arguments to be converted.</param>
      <returns>The typed result object that corresponds to the event arguments. <b>null</b> if the event arguments
            passed in were <b>null</b>.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.TypedVtq">
      <summary>Gets the current (new) <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1" /> (a typed value, timestamp and quality) of the OPC item.
            Null reference when <see cref="T:System.Exception" /> is not null.
            </summary>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1">
      <summary>Holds an OPC server and item descriptor, and OPC group parameters, and possibly a typed callback method,
            as arguments to subscription operation.</summary>
      <typeparam name="T">The type of item value.</typeparam>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventHandler{`0},System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, OPC group
            parameters, user-defined state object, and a typed callback method.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="callback">A typed callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, OPC group
            parameters, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventHandler{`0},System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate and 
            percent deadband, user-defined state object, and with a typed callback method.</summary>
      <param name="machineName">Name of the machine. 
              Determines the computer on which the OPC server is located. May be an empty 
              string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
              by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
              the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="callback">A typed callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate and 
            percent deadband, and with a user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.String,System.String,System.String,System.Int32,OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventHandler{`0},System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC group parameters specified by requested update rate, 
            user-defined state object, and with a typed callback method.</summary>
      <param name="machineName">Name of the machine. 
              Determines the computer on which the OPC server is located. May be an empty 
              string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
              by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="callback">A typed callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.String,System.String,System.String,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> object from 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" />, and no callback method.</summary>
      <param name="args">The item group arguments object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventHandler{`0})">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> object from 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" />, and with specified typed callback method.</summary>
      <param name="args">The item group arguments object to be copied from.</param>
      <param name="callback">A typed callback method to be invoked for each significant item change.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0})">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1" /> object.</summary>
      <param name="args">The typed item subscription arguments object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.Default">
      <summary>
            Default "easy" OPC DA item subscription parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.op_Equality(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0},OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0})">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.op_Inequality(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0},OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0})">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.TypedCallback">
      <summary>A typed callback method to be invoked for each significant monitored item change.</summary>
      <value>If this is a null reference, only the <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> 
            events are generated, but no callback method is invoked.</value>
      <remarks>The property has a different name from the base class in order to satisfy StreamInsight serialization
            limitations.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.Equals(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments{`0})">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventHandler`1">
      <summary>
            Represents the method that will handle an event raised for every significant change in a subscribed OPC item.
            </summary>
      <typeparam name="TValue">The type of item value.</typeparam>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemChangedEventArgs`1" /> that contains the event data.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.NamespaceDoc">
      <summary>
            This namespace contains classes for OPC Data Access that use generics.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Generic.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.DAItemValueArguments_CheckValue_IncompatibleType">
      <summary>
              Looks up a localized string similar to The value is of incompatible type for this DAItemValueArguments&lt;&gt; object. The value is not null and cannot be cast to the specified type..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.DAItemVtqArguments_CheckVtq_IncompatibleType">
      <summary>
              Looks up a localized string similar to The DAVtq value is of incompatible type for this DAItemVtqArguments&lt;&gt; object. The value is not null and cannot be cast to the specified type..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.DAVtq_CheckValue_IncompatibleType">
      <summary>
              Looks up a localized string similar to The value is of incompatible type for this DAVtq&lt;&gt; object. The data value is not null and cannot be cast to the specified type..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.DAVtqResult_CheckVtq_IncompatibleType">
      <summary>
              Looks up a localized string similar to The DAVtq value is of incompatible type for this DAVtqResult&lt;&gt; object. The value is not null and cannot be cast to the specified type..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Generic.Resource1.EasyDAItemChangedEventArgs_CheckVtq_IncompatibleType">
      <summary>
              Looks up a localized string similar to The DAVtq value is of incompatible type for this EasyDAItemChangedEventArgs&lt;&gt; object. The value is not null and cannot be cast to the specified type..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler">
      <summary>
            Represents the method that will handle an event raised for every significant change in a subscribed OPC item.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition">
      <summary>
            A position in a tree of OPC DA nodes.
            </summary>
      <remarks>
        <para>
            The node that corresponds to the root of the tree is special in that from the properties inherited from
            <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" />, only the Item Id is filled in.</para>
        <para>
            The tree positions can be used to obtain information about the current node, and the nodes on the path to the root,
            but you cannot access child or sibling nodes of the current node. This is because the tree is constructed 
            "on the fly", as the OPC address space is traversed, and sufficient information about child or sibling nodes
            may not be available.</para>
      </remarks>
      <seealso cref="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.BrowseTree(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement,OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="nodeElement">Contains information gathered about a node in OPC server's address space.</param>
      <param name="parentPosition">The parent object in the tree.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.#ctor(OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="nodeTreePosition">The OPC node tree position to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.op_Equality(OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition,OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.op_Inequality(OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition,OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.BrowseException">
      <summary>
            Gets the exception encountered during browsing.
            </summary>
      <returns>Returns <c>null</c> reference if there has not been an exception during browsing from this node. 
            Otherwise, returns the exception that prevented the object from browsing further.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.BrowseSucceeded">
      <summary>
            Determines whether browsing was successful.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.Level">
      <summary>
            Determines the level of this object inside a tree.
            </summary>
      <returns>Level of the object.</returns>
      <remarks>The root has a level of 0.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.IsTreeRoot">
      <summary>
            Determines whether this object represents a root of the tree.
            </summary>
      <returns>
        <c>True</c> if this objects represents a root; <c>false</c> otherwise.</returns>
      <remarks>The root object does not have the <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> information filled in, except for the
            <see cref="P:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement.NodeId" />.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.ParentPosition">
      <summary>
            Gets the parent object in the tree.
            </summary>
      <returns>Returns parent object, or <c>null</c> if this object is a root of the tree.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.Equals(OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.GetRoot">
      <summary>
            Determines root of a tree to which the current tree position belongs.
            </summary>
      <returns>Returns a root position in this tree.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Graphs.DANodeTreePosition.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Graphs.NamespaceDoc">
      <summary>
            This namespace contains classes for graph-related operations in OPC-DA.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.NamespaceDoc">
      <summary>
            This namespace contains internal classes that facilitate easy work with OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DAAccessRightConverter_ConvertTo_NotADAAccessRight">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DAAccessRight, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DAItemDescriptorConverter_ConvertTo_NotADAItemDescriptor">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DAItemDescriptor, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DANodeDescriptorConverter_ConvertTo_NotADANodeDescriptor">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DANodeDescriptor, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DAPropertyDescriptorConverter_ConvertTo_NotADAPropertyDescriptor">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DAPropertyDescriptor, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DAPropertyIdConverter_ConvertTo_NotADAPropertyId">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DAPropertyId, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.DAQualityTypeConverter_ConvertTo_NotADAQuality">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a DAQuality, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.Resource1.ResilientEasyDAClient_CreateOpcException_ProcedureCallException">
      <summary>
              Looks up a localized string similar to A procedure call error has occurred in the resilient client for OPC Data Access..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.ApiMonitoringEasyDAClient">
      <tocexclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.DequeuingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.DequeuingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.DequeuingEasyDAClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient.#ctor(OpcLabs.BaseLib.Identification.CookieManager,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <overloads>
        <summary>Initializes a new instance of the class.</summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient.MappedSubscribeMultipleItems(System.Collections.Generic.Dictionary{System.Int32,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments})">
      <summary>
            Subscribes to multiple items, with pre-allocated outer handles.
            </summary>
      <param name="itemSubscriptionArgumentsDictionary">Arguments to subscribe; the dictionary key is the
            pre-allocated outer handle.</param>
      <returns>Returns an array of outer handles from <paramref name="itemSubscriptionArgumentsDictionary" />.</returns>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient._innerHandleDictionary">
      <summary>
            The key is the outer handle, the value is the inner handle.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.ResilientEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.ResilientEasyDAClient.#ctor(OpcLabs.BaseLib.Identification.CookieManager,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <overloads>
        <summary>Initializes a new instance of the class.</summary>
      </overloads>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.TechnologyRestrictingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.TechnologyRestrictingEasyDAClient.#ctor(OpcLabs.EasyOpc.OpcTechnologies,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.TechnologyUnlicensedEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.TransmittingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.TransmittingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientCompositor">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientCompositor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientCompositor.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type serviceType, or <c>null</c> if there is no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientCompositor._cookieManager">
      <remarks>
        <para>
            All handle mapping clients in the compositor share the same cookie manager.</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientConsumptionCompositor">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientDequeuingCompositor">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientResiliencyCompositor">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientSettingsCompositor">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientSettingsCompositor.InstanceParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.InstanceParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientSettingsCompositor.IsolatedParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.IsolatedParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Implementation.EasyDAClientSettingsCompositor.Isolated">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.Isolated" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.Null">
      <summary>
            Represents the null model node.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.op_Equality(OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor,OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.op_Inequality(OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor,OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.Equals(OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ToString">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ResetNodeDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.NodeDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ShouldSerializeNodeDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.NodeDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ResetPropertyDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.PropertyDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ShouldSerializePropertyDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.PropertyDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ServerDescriptor" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor.ServerDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.InformationModel.NamespaceDoc">
      <summary>
            This namespace contains classes used for modeling of OPC Data Access (OPC-DA) information.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.EasyDAClientStaticData">
      <exclude />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.EasyDAClientStaticData.DefaultServiceProviderEndpointDescriptor">
      <summary>
            Default provider endpoint descriptor.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.EasyDAClientStaticDataBase">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.NamespaceDoc">
      <summary>
            This namespace contains internal classes that facilitate easy work with OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.Resource1.SimulatedEasyDAClient_BrowseNodes_NoParentBrowsePath">
      <summary>
              Looks up a localized string similar to The simulated OPC-DA client does not support browsing nodes without a given parent browse path..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.Resource1.SimulatedEasyDAClient_BrowseNodes_ParentNotABranch">
      <summary>
              Looks up a localized string similar to When browsing nodes in a simulated OPC-DA client, the parent node is not a branch..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.Resource1.SimulatedEasyDAClient_GetComponent_ClsidNotFound">
      <summary>
              Looks up a localized string similar to The simulated OPC-DA client cannot find a server component with given CLSID..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient">
      <exclude />
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient" /> object.</summary>
      <param name="client">The simulated OPC-DA client object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient.ValueEquals(OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.SimulatedEasyDAClient.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.BrowsePathOrItemIdResolvingEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.CompositeEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.CompositeEasyDAClient.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.BaseLib.Runtime.InteropServices.ComManagement)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
      <param name="comManagement">The COM management object to use for retrieving the parameters.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ComSecurityInitializingEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient">
      <tocexclude />
      <summary>
            Delegates all IEasyDAClient calls to the inner client. Transforms subscription arguments, events and callbacks.
            </summary>
      <remarks>
        <para>
            Use this class whenever subscription arguments, event arguments, or both, need to be modified.</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.DelegationRecord">
      <remarks>
        <para>
            Equality must be properly defined, because it propagates to the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" />
            when the delegation is used.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.DelegationRecord.ToString">
      <remarks>
            Among others, provides better result when the delegated state is output as part of XXXXEventArgs. The 
            doubling or even further nesting of "[]" is intentional in this case, to provide a minimal visual 
            distinction of the fact the a delegation is taking place.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.PullMultipleItemChanges(System.Int32,System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.PullMultipleItemChanges(System.Int32,System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.InnerClientOnItemChanged(System.Object,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Undelegates the event arguments and invokes the base <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.TransformBackItemChangedEventArgsExceptArguments(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Defines how event arguments of type <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> are transformed.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.TransformItemSubscriptionArguments(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments,System.String)">
      <summary>
            Defines how operation arguments of type <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> are transformed.
            </summary>
      <remarks>
        <para>
            This method should either return the original <paramref name="itemSubscriptionArguments" />, or its modified copy.
            The <see cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" /> and <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Callback" /> properties
            shall not be modified.
            </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.DelegateItemSubscriptionArguments(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments,System.String)">
      <summary>
            Delegates operation arguments, <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" />.
            </summary>
      <remarks>
        <para>
            This method never fails if it does not transform the item subscription arguments.
            </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.UndelegateItemChangedEventArgs(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Undelegates event arguments of type <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" />.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.EnqueuingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.EnqueuingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.ErrorTransformingEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.FailingEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient">
      <tocexclude />
      <summary>
            Forwards all IEasyDAClient calls to the inner client.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.Finalize">
      <summary>
            Finalizer.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is forwarded.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.InnerClient">
      <summary>
            Inner client to which the functionality is forwarded.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.Dispose">
      <inheridoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.SupportedTechnologies">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SupportedTechnologies" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.GetItemSubscriptionArguments(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetItemSubscriptionArguments(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.IsKnownItemSubscriptionHandle(System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.IsKnownItemSubscriptionHandle(System.Int32)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.UnsubscribeMultipleItems(System.Collections.Generic.IEnumerable{System.Int32})">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.UnsubscribeMultipleItems(System.Collections.Generic.IEnumerable{System.Int32})" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.UnsubscribeAllItems">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.UnsubscribeAllItems" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.PullMultipleItemChanges(System.Int32,System.Int32)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.PullMultipleItemChanges(System.Int32,System.Int32)" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.ItemChanged">
      <inheritdoc cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.EventingFailure">
      <inheritdoc cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.EventingFailure" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type serviceType, or <c>null</c> if there is no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.InvokeEventingFailureEventHandler(OpcLabs.BaseLib.FailureEventHandler,OpcLabs.BaseLib.FailureEventArgs)">
      <summary>
            Invokes a <see cref="T:OpcLabs.BaseLib.FailureEventHandler" /> event handler.
            </summary>
      <param name="eventingFailureEventHandler">The event handler.</param>
      <param name="failureEventArgs">The event arguments.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.ForwardingEasyDAClient.InvokeItemChangedEventHandler(OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Invokes an <see cref="T:OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler" /> event handler.
            </summary>
      <param name="itemChangedEventHandler">The event handler</param>
      <param name="itemChangedEventArgs">The event arguments.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.NotifyingEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="innerClient">Inner client to which the functionality is delegated.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.PSBoxingEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])">
      <inheritdoc cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.TechnologyLicensingEasyDAClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.TechnologyLicensingEasyDAClient.#ctor(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.TechnologyUnsupportedEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Internal.TimeoutImposingEasyDAClient">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate easy work with OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNavigable">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.op_Equality(OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode,OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.op_Inequality(OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode,OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.Equals(OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.DAAddressSpaceNode.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Navigation.Internal.NamespaceDoc">
      <summary>
            This namespace contains internal classes for navigation in OPC Data Access  (OPC-DA).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DANodeKind">
      <exclude />
      <summary>
            Provides classification of OPC Data Access (OPC-DA) nodes.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.NodeSpace.DANodeKind.None">
      <summary>
            The node kind is not set.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.NodeSpace.DANodeKind.Leaf">
      <summary>
            The node is a leaf.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.NodeSpace.DANodeKind.Branch">
      <summary>
            The node is a branch.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.NodeSpace.DANodeKind.Root">
      <summary>
            The node is a root.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.Implementation.NamespaceDoc">
      <summary>
            This namespace defines implementation classes for a node space for OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.NamespaceDoc">
      <summary>
            This namespace defines a node space for OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs">
      <exclude />
      <summary>
            Provides data for OPC Data Access (OPC-DA) leaf read events.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs.#ctor(OpcLabs.EasyOpc.DataAccess.DAVtq,System.Int32)">
      <summary>
            Initializes a new instance of the class with given value/timestamp/quality and error code.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs.ErrorCode">
      <summary>
            The error code that is the result of the OPC read.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs.Vtq">
      <summary>
            The value/timestamp/quality that is the result of the OPC read.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Infrastructure.
            </summary>
      <param name="vtq">Vtq to be checked.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs">
      <exclude />
      <summary>
            Provides data for OPC Data Access (OPC-DA) leaf write events.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.#ctor(OpcLabs.EasyOpc.DataAccess.DAVtq,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the class with given value/timestamp/quality, presence flags and error code.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.#ctor(System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the class with given value and error code.
            </summary>
      <remarks>The timestamp and quality are not present.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.ErrorCode">
      <summary>
            The error code that is the result of the OPC write.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.QualityPresent">
      <summary>
            Determines whether the quality is present in the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.Vtq" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.TimestampPresent">
      <summary>
            Determines whether the timestamp is present in the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.Vtq" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.Vtq">
      <summary>
            The value/timestamp/quality that is the input of the OPC write.
            </summary>
      <remarks>
            The timestamp is present iff the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.TimestampPresent" /> is <c>true</c>.
            The quality is present iff the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.QualityPresent" /> is <c>true</c>.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Infrastructure.
            </summary>
      <param name="vtq">Vtq to be checked.</param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd">
      <exclude />
      <summary>
            Represents a branch front-end in OPC Data Access (OPC-DA) address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd" /> object.</summary>
      <param name="branchFrontEnd">The OPC-DA branch front end object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given branch name.
            </summary>
      <param name="name">The name of the branch.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.Clone">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.NodeKind">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDANode.NodeKind" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd">
      <exclude />
      <summary>
            Represents a leaf front-end in OPC Data Access (OPC-DA) address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd" /> object.</summary>
      <param name="leafFrontEnd">The OPC-DA leaf front end object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given leaf name.
            </summary>
      <param name="name">The name of the leaf.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.Clone">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.NodeKind">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDANode.NodeKind" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafFrontEnd" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch">
      <exclude />
      <summary>
            Represents a branch in OPC Data Access (OPC-DA) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch" /> object.</summary>
      <param name="serverRoot">The OPC-DA server branch object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given branch name.
            </summary>
      <param name="name">The name of the branch.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerBranch.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent">
      <exclude />
      <summary>
            The OPC-DA server component, i.e. the executive part of the OPC-DA server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent" /> object.</summary>
      <param name="serverComponent">The OPC-DA component object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Required for Windows.Forms Class Composition Designer support
            </summary>
      <param name="container">The component container to which the new instance will be added.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.ComponentBackEnd">
      <summary>
            The OPC-DA component back-end serving this component.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.Nodes">
      <summary>
            The OPC-DA address space nodes, starting from the root level.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.Root">
      <summary>
            The root node of the OPC-DA address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.CreateRoot">
      <summary>
            Creates the root node of the address space.
            </summary>
      <returns>Returns the root node created.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.ShouldSerializeNodes">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerComponent.Nodes" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf">
      <exclude />
      <summary>
            Represents a leaf in OPC Data Access (OPC-DA) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.#ctor">
      <summary>
            Initializes a new instance of the class with default values.
            </summary>
      <remarks>This constructor is needed for the designer.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf" /> object.</summary>
      <param name="serverLeaf">The OPC-DA server leaf object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.#ctor(System.String)">
      <summary>
            Initializes a new instance of the class, with given leaf name.
            </summary>
      <param name="name">The name of the leaf.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
            Initializes a new instance of the class, with given leaf name, and canonical data type.
            </summary>
      <param name="name">The name of the leaf.</param>
      <param name="canonicalDataType">The canonical data type of the leaf.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType,OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>
            Initializes a new instance of the class, with given leaf name, canonical data type, and access rights.
            </summary>
      <param name="name">The name of the leaf.</param>
      <param name="canonicalDataType">The canonical data type of the leaf.</param>
      <param name="accessRights">The access rights of the leaf (e.g. readable, writable).</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.DefaultAccessRights">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.AccessRights" /> property. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Both" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.DefaultCanonicalDataType">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CanonicalDataType" /> property. Equals to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.AccessRights">
      <summary>
            The access rights of this leaf (e.g. readable, writable).
            </summary>
      <remarks>
        <para>
            From OPC specification:
            "Indicates if this item is read only, write only or read/write. This is NOT related to security but rather to the 
            nature of the underlying hardware."</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CanonicalDataType">
      <summary>
            The canonical data type of this leaf.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.IsClsCompliant">
      <summary>
            Determines whether the value type of the OPC leaf is CLS-compliant.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.LeafBackEnd">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.LeafFrontEnd.LeafBackEnd" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ReadValue">
      <summary>
            The leaf value seen by OPC reads.
            </summary>
      <remarks>
            This property contains the initial read value, before the <see cref="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Read" /> event is raised. If no event handler
            modifies the value, it becomes the final OPC read value.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.WriteValue">
      <summary>
            The leaf value modified by OPC writes.
            </summary>
      <remarks>
            The <see cref="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Write" /> event is raised before this write value is set.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Read">
      <summary>
            Raised to obtain the OPC read data.
            </summary>
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Write">
      <summary>
            Raised to provide the OPC write data.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CheckCanonicalDataType(OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
            Infrastructure. Checks the validity of the given canonical data type for this type of leaf.
            </summary>
      <param name="canonicalDataType">The canonical data type to be checked.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CheckValue(System.Object)">
      <summary>
            Infrastructure. Checks the validity of the value for this type of leaf.
            </summary>
      <param name="value">The value to be checked.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.NewLeafReadEventArgs(System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality,System.Int32)">
      <summary>
            Instantiates arguments for an OPC-DA leaf read event.
            </summary>
      <param name="value">The initial read value.</param>
      <param name="timestamp">The initial read timestamp.</param>
      <param name="quality">The initial read quality.</param>
      <param name="errorCode">The initial read error code.</param>
      <returns>Returns the newly instantiated leaf read event arguments.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.NewLeafWriteEventArgs(System.Object,System.Boolean,System.DateTime,System.Boolean,OpcLabs.EasyOpc.DataAccess.DAQuality,System.Int32)">
      <summary>
            Instantiates arguments for an OPC-DA leaf write event.
            </summary>
      <param name="value">The write value.</param>
      <param name="timestampPresent">Indicates whether the timestamp is present.</param>
      <param name="timestamp">The write timestamp.</param>
      <param name="qualityPresent">Indicates whether the quality is present.</param>
      <param name="quality">The write quality.</param>
      <param name="errorCode">The initial write error code.</param>
      <returns>Returns the newly instantiated leaf write event arguments.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.OnLeafBackEndChange(OpcLabs.BaseLib.NodeSpace.ILeafBackEnd)">
      <inheritdoc cref="M:OpcLabs.BaseLib.NodeSpace.LeafFrontEnd.OnLeafBackEndChange(OpcLabs.BaseLib.NodeSpace.ILeafBackEnd)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.RaiseRead(OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafReadEventArgs)">
      <summary>
            Raises the <see cref="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Read" /> event.
            </summary>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.RaiseWrite(OpcLabs.EasyOpc.DataAccess.NodeSpace.DALeafWriteEventArgs)">
      <summary>
            Raises the <see cref="E:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.Write" /> event.
            </summary>
      <param name="e">The event arguments.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ResetAccessRights">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.AccessRights" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ShouldSerializeAccessRights">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.AccessRights" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ResetCanonicalDataType">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CanonicalDataType" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.ShouldSerializeCanonicalDataType">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerLeaf.CanonicalDataType" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot">
      <exclude />
      <summary>
            Represents a root node in OPC Data Access (OPC-DA) address space of the OPC server.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.#ctor(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot" /> object.</summary>
      <param name="serverRoot">The OPC-DA server root object to be copied from.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.IsRoot">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.Node.IsRoot" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.Name">
      <inheritdoc cref="P:OpcLabs.BaseLib.NodeSpace.Node.Name" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.NodeKind">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.DABranchFrontEnd.NodeKind" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.ValueEquals(OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.NodeSpace.DAServerRoot.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDABranchBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDAComponentBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDALeafBackEnd">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDANode">
      <exclude />
      <summary>
            An OPC-DA node.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDANode.NodeKind">
      <summary>
            Determines whether the node is a leaf, branch, or a root.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.NodeSpace.IDANodeBackEnd">
      <exclude />
      <summary>
            A back-end to an OPC-DA node.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used to pass arguments to OPC Data Access operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.NodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.NodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.BrowseParameters">
      <summary>
      </summary>
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.BrowseParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.Handle">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.HandleArguments.Handle" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.GroupParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GroupParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.GroupParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GroupParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.Value">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Value" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.SetValue(System.Object)">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Value" />
      <remarks>Intended for use from Visual Basic 6.0.</remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.Vtq">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Vtq" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.NodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.NodeDescriptor" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <remarks>
        <para>
            Due to overload conflict, the actual name of this method becomes ToString_2.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ToString(System.String)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Extensions.IFormattableExtension.ToString(System.IFormattable,System.String)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_3.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Diagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Diagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.DiagnosticsCount">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.DiagnosticsSummary">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsSummary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ErrorId">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ErrorMessage">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessage" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ErrorMessageBrief">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessageBrief" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Exception">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Exception" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.NormalizedDiagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedDiagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.NormalizedException">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.State" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Succeeded">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Succeeded" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationResult.ThrowIfFailed" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ThrowIfFailed">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationResult.ThrowIfFailed" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.RegularizedValue">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.RegularizedValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.Value">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.Value" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.ValueType">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.ValueType" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.SetValue(System.Object)">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.ValueResult.Value" />
      <remarks>Intended for use from Visual Basic 6.0.</remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.NodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.NodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.PropertyDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.PropertyDescriptor" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.ReadParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_2.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ToString(System.String)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Extensions.IFormattableExtension.ToString(System.IFormattable,System.String)" />
      <remarks>
        <para>Due to overload conflict, the actual name of this method becomes ToString_3.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Diagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Diagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.DiagnosticsCount">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.DiagnosticsSummary">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.DiagnosticsSummary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ErrorId">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ErrorMessage">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessage" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ErrorMessageBrief">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.ErrorMessageBrief" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Exception">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Exception" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.NormalizedDiagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedDiagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.NormalizedException">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.NormalizedException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.State" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Succeeded">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Succeeded" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationResult.ThrowIfFailed" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.ThrowIfFailed">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationResult.ThrowIfFailed" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.StatusInfo">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.StatusInfo" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.Vtq">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Vtq" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> to COM clients.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Diagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Diagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.DiagnosticsCount">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.DiagnosticsCount" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.DiagnosticsSummary">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.DiagnosticsSummary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.ErrorId">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.ErrorMessage">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorMessage" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.ErrorMessageBrief">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ErrorMessageBrief" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Exception">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Exception" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.NormalizedDiagnostics">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.NormalizedDiagnostics" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.NormalizedException">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.NormalizedException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Succeeded">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationEventArgs.Succeeded" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.MemberwiseClone">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationEventArgs.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.ToLongString">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.OperationEventArgs.ToLongString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Arguments">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Arguments" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.StatusInfo">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.StatusInfo" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.Vtq">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Vtq" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.State">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.MemberwiseClone">
      <inheritdoc cref="M:System.Object.MemberwiseClone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.SetState(System.Object)">
      <inheritdoc cref="M:OpcLabs.BaseLib.OperationModel.ComTypes._OperationArguments.SetState(System.Object)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.ServerDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.ItemDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.GroupParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.GroupParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.Formatting.DAVtqResultFormatter">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.Formatting.NamespaceDoc">
      <summary>
            This namespace provides classes and interfaces that provide formatting capabilities for OPC Data Access operation model.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.NamespaceDoc">
      <summary>
            This namespace contains classes that are used to pass arguments to OPC Data Access operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments">
      <summary>
            Holds arguments needed to browse OPC DA server nodes.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance, with all defaults.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor(System.Object,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="state">User-defined state object.</param>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param>
      <param name="browseParameters">Specifies which nodes will be returned by browsing the OPC server's address space.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="browseArguments">Browse arguments object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param>
      <param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param>
      <param name="browseParameters">Specifies which nodes will be returned by browsing the OPC server's address space.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.DefaultBrowseParameters">
      <summary>
            Default browse parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.BrowseParameters">
      <summary>
            Specifies which nodes will be returned.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DABrowseArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.ResetBrowseParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.BrowseParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.ShouldSerializeBrowseParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.BrowseParameters" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments">
      <summary>Holds an integer handle, and OPC group parameters, as arguments to some operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(System.Int32,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified handle value, OPC group parameters, and a 
            user-defined state object.</summary>
      <param name="handle">A handle value.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(System.Int32,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified handle value and OPC group parameters.</summary>
      <param name="handle">A handle value.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(System.Int32,System.Int32,System.Single)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified handle value, requested update rate, and percent 
            deadband.</summary>
      <param name="handle">A handle value.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(System.Int32,System.Int32)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified handle value and requested update rate.</summary>
      <param name="handle">A handle value.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments" /> object.</summary>
      <param name="args">The handle group arguments object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.DefaultGroupParameters">
      <summary>
            Default group parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GroupParameters">
      <summary>Gets or sets the OPC group parameters that are an argument to the operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAHandleGroupArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.ResetGroupParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GroupParameters" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.ShouldSerializeGroupParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.GroupParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments">
      <summary>Holds an OPC server and item descriptor, as arguments to some operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, and a 
            user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, and with a user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            and the OPC item specified by its ItemId and data type.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(System.String,System.String,System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            and the OPC item specified by its ItemId.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" /> object.</summary>
      <param name="args">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.DefaultItemDescriptor">
      <summary>
            Default item descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="itemArguments1">First object to be compared.</param>
      <param name="itemArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="itemArguments1">First object to be compared.</param>
      <param name="itemArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor">
      <summary>Gets or sets the OPC server descriptor that is an argument to the operation.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor">
      <summary>Gets or sets the OPC item descriptor that is an argument to the operation.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAItemArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ResetItemDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ShouldSerializeItemDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ItemDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ServerDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments">
      <summary>
            Holds an OPC server and item descriptor, and OPC group parameters, as arguments to some operation.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Object)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, OPC group
            parameters, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,System.Object)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate and 
            percent deadband, and with a user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.PercentDeadband.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.PercentDeadband.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Object)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(System.String,System.String,System.String,System.Int32,System.Object)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />,
            and default group parameters.
            </summary>
      <param name="itemArguments">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />,
            and <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" />.
            </summary>
      <param name="itemArguments">The item arguments object to be copied from.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" /> object.</summary>
      <param name="itemGroupArguments">The item group arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.DefaultGroupParameters">
      <summary>
            Default group parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GroupParameters">
      <summary>Gets or sets the OPC group parameters that are an argument to the operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAItemGroupArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.ResetGroupParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GroupParameters" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.ShouldSerializeGroupParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.GroupParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments">
      <summary>Holds an OPC server and item descriptor, and OPC group parameters, as arguments to some operation.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main.php" lang="PHP" title="PHP" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.TimeMeasurements.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.TimeMeasurements.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,System.Object,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, data value, 
            and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, data value, 
            and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Object,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, with the data value, and with a user-defined state object.
            </summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="value">The value to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, and with the data value.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />,
            and a null value.
            </summary>
      <param name="args">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments" /> object.</summary>
      <param name="args">The item value arguments object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Value">
      <summary>Gets or sets the data value that is an argument to the operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.SetValue(System.Object)">
      <summary>
            Sets the data value that is an argument to the operation.
            </summary>
      <remarks>
        <para>
            Intended for certain COM callers. You can simply use the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Value" /> property setter in .NET instead.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAItemValueArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.CheckValue(System.Object)">
      <summary>
            Infrastructure.
            </summary>
      <param name="value">Value to be checked.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments">
      <summary>Holds an OPC server and item descriptor, and a value/timestamp/quality (<see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" />), as arguments 
            to some operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAVtq,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, 
            value/timestamp/quality, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, 
            and value/timestamp/quality.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, with the data value, timestamp and quality, and with a 
            user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(System.String,System.String,System.String,System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, and with the data value, timestamp and quality.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />,
            and a null value-timestamp-quality.
            </summary>
      <param name="args">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments" /> object.</summary>
      <param name="args">Item VTQ arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.DefaultVtq">
      <summary>
            Default Vtq (value-timestamp-quality).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="args1">First object to be compared.</param>
      <param name="args2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Vtq">
      <summary>Gets or sets a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp and quality) that is an argument to the operation.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAItemVtqArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Infrastructure.
            </summary>
      <param name="vtq">Vtq to be checked.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.ResetVtq">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Vtq" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.ShouldSerializeVtq">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.Vtq" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments">
      <summary>
            Holds all arguments needed to specify a node in an OPC-DA server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.DefaultNodeDescriptor">
      <summary>
            Default node descriptor.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor">
      <overloads>
            Initializes a new instance of the class.
            </overloads>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(System.Object,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
            Initializes a new instance of the class.
            <param name="state">User-defined state object.</param><param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para></remarks><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(OpcLabs.BaseLib.OperationModel.OperationArguments)">
            Initializes a new instance of the class.
            <param name="operationArguments">Operation arguments object to be copied from.</param><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(OpcLabs.BaseLib.OperationModel.OperationArguments,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
            Initializes a new instance of the class.
            <param name="operationArguments">Operation arguments object to be copied from.</param><param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para></remarks><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
            Initializes a new instance of the class.
            <param name="serverDescriptor">Server descriptor. Identifies the OPC-DA server.</param><param name="nodeDescriptor">Node descriptor. Identifies the node in OPC server's address space.</param><remarks><para>
            You can obtain <paramref name="nodeDescriptor" /> e.g. by calling one of the browsing methods on 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.</para></remarks><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments)">
            Initializes a new instance of the class.
            <param name="nodeArguments">An object that specifies the node in the OPC server.</param><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            Initializes a new instance of the class.
            <summary>Initializes a new instance of the class with serialized data.</summary><param name="info">The SerializationInfo that holds the serialized object data.</param><param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception><exception cref="T:System.Runtime.Serialization.SerializationException"><para>
             An error has occurred during serialization or deserialization.</para><para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para></exception></member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ServerDescriptor">
      <summary>
            Contains the server descriptor, i.e. the data defining a connection to the OPC-DA Server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.NodeDescriptor">
      <summary>
            A descriptor of a node in a server's address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DANodeArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ServerDescriptor" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ServerDescriptor" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ResetNodeDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.NodeDescriptor" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ShouldSerializeNodeDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.NodeDescriptor" /> are not at their defaults.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments">
      <summary>Holds an OPC server, OPC node and OPC property descriptors, as arguments to some operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server, node and property descriptors, 
            and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The OPC property involved in the operation.</param>
      <param name="state">The state object (can be any value supplied by your code).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server, node and property descriptors.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The OPC item and property involved in the operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC property specified by its property Id, and with a user-defined state 
            object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="propertyId">Contains Id of the OPC property.</param>
      <param name="state">The state object (can be any value supplied by your code).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, and the OPC property specified by its property Id.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="propertyId">Contains Id of the OPC property.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments" /> object.</summary>
      <param name="args">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.DefaultNodeDescriptor">
      <summary>
            Default node descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.DefaultPropertyDescriptor">
      <summary>
            Default property descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.DefaultServerDescriptor">
      <summary>
            Default server descriptor.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="propertyArguments1">First object to be compared.</param>
      <param name="propertyArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="propertyArguments1">First object to be compared.</param>
      <param name="propertyArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.NodeDescriptor">
      <summary>Gets or sets the OPC node descriptor that is an argument to the operation.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ServerDescriptor">
      <summary>Gets or sets the OPC server descriptor that is an argument to the operation.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.PropertyDescriptor">
      <summary>Gets or sets the OPC property descriptor that is an argument to the operation.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAPropertyArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ResetNodeDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.NodeDescriptor" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ShouldSerializeNodeDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.NodeDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ResetPropertyDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.PropertyDescriptor" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ShouldSerializePropertyDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.PropertyDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ResetServerDescriptor">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ServerDescriptor" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ShouldSerializeServerDescriptor">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ServerDescriptor" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments">
      <summary>
            Holds information necessary to read an OPC item, such OPC server and item descriptor, and read parameters.
            </summary>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, and 
            default read parameters.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, and read 
            parameters.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, a read 
            parameters, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, a value age, and with a user-defined state object.</summary>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, and a value age.</summary>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(System.String,System.String,System.String,System.Int32)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, and a value age.</summary>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" />,
            and default read parameters.
            </summary>
      <param name="args">The item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class, with the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments" /> and read parameters.
            </summary>
      <param name="args">The item arguments object to be copied from.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments" /> object.</summary>
      <param name="args">The read item arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.DefaultReadParameters">
      <summary>
            Default read parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="itemArguments1">First object to be compared.</param>
      <param name="itemArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="itemArguments1">First object to be compared.</param>
      <param name="itemArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters">
      <summary>
            Contains parameters for OPC read operations, such as the data source or value age.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAReadItemArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ResetReadParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ShouldSerializeReadParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments">
      <summary>Holds an OPC server and item descriptor, and OPC group parameters, and possibly a callback method,
            as arguments to subscription operation.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsInteger.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsInteger.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsObject.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsObject.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, OPC group
            parameters, user-defined state object, and a callback method.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the notification events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the specified OPC server and item descriptors, OPC group
            parameters, and a user-defined state object.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate and 
            percent deadband, user-defined state object, and with a callback method.</summary>
      <param name="machineName">Name of the machine. 
              Determines the computer on which the OPC server is located. May be an empty 
              string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
              by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
              the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the notification events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate and 
            percent deadband, and with a user-defined state object.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate, 
            user-defined state object, and with a callback method.</summary>
      <param name="machineName">Name of the machine. 
              Determines the computer on which the OPC server is located. May be an empty 
              string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
              by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
              the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the notification events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId and data type, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,System.Int32,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC group parameters specified by requested update rate, 
            user-defined state object, and with a callback method.</summary>
      <param name="machineName">Name of the machine. 
              Determines the computer on which the OPC server is located. May be an empty 
              string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
              by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any value supplied by your code); available in event 
              notifications.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the notification events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.String,System.String,System.String,System.Int32,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with the OPC server specified by machine name and server class,
            the OPC item specified by its ItemId, the OPC group parameters specified by requested update rate, 
            and with a user-defined state object.</summary>
      <param name="state">The state object (can be any value supplied by your code); available in event 
            notifications.</param>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> object from 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" />, and no callback method.</summary>
      <param name="args">The item group arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> object from 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments" />, and with specified callback method.</summary>
      <param name="args">The item group arguments object to be copied from.</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <remarks>If <paramref name="callback" /> is a null reference, only the notification events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> object.</summary>
      <param name="args">The item subscription arguments object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Default">
      <summary>
            Default item subscription arguments for EasyOPC.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="itemSubscriptionArguments1">First object to be compared.</param>
      <param name="itemSubscriptionArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="itemSubscriptionArguments1">First object to be compared.</param>
      <param name="itemSubscriptionArguments2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Callback">
      <summary>A callback method to be invoked for each significant monitored item change.</summary>
      <value>If this is a null reference, only the notification events are generated, but no callback method is invoked.
            </value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_EasyDAItemSubscriptionArguments#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs">
      <summary>Provides data for the EasyDAClient.ItemChanged event.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAItemChangedEventArgs\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
            Creates a new, empty instance.
            </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Initializes a new instance of the class, with a copy of another instance.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <summary>Initializes a new instance of the class with given <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" />.</summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="eventArgs1">First object to be compared.</param>
      <param name="eventArgs2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="eventArgs1">First object to be compared.</param>
      <param name="eventArgs2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.op_Explicit(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)~OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult">
      <summary>
            Converts event arguments to a corresponding result object, <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" />. 
            </summary>
      <param name="eventArgs">The event arguments to be converted.</param>
      <returns>The result object that corresponds to the event arguments. <b>null</b> if the event arguments
            passed in were <b>null</b>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ToDAVtqResult(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Converts event arguments to a corresponding result object, <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" />. 
            </summary>
      <param name="eventArgs">The event arguments to be converted.</param>
      <returns>The result object that corresponds to the event arguments. <b>null</b> if the event arguments
            passed in were <b>null</b>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.DefaultArguments">
      <summary>
            Default (item subscription) arguments.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Arguments">
      <summary>
            Holds arguments that were used to subscribe to an item in an OPC-DA server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.StatusInfo">
      <summary>
            Status information corresponding to the contents of the event arguments.
            </summary>
      <value>Contains <see cref="F:OpcLabs.BaseLib.Data.StatusInfo.Unknown" /> when the event arguments represent 
            a failure (non-null <see cref="T:System.Exception" />). When the event arguments represent a success, the status
            information is determined from the <c>Quality</c> of the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Vtq" />.
            </value>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Vtq">
      <summary>Gets the current (new) <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp and quality) of the OPC item.
            Null reference when <see cref="T:System.Exception" /> is not null.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_EasyDAItemChangedEventArgs#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Infrastructure.
            </summary>
      <param name="vtq">Vtq to be checked.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ResetArguments">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Arguments" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ShouldSerializeArguments">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Arguments" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult">
      <summary>
            Holds result of a Browse operation, i.e. the node elements obtained by browsing a node in OPC-DA Server's
            address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor(System.Object,OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElementCollection)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and value.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="value">The value that is a successful result of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor(System.Object,System.Exception)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and exception.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor(System.Object,System.Exception,System.Object)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object, exception, and value.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
      <param name="value">The value that is a successful result of the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class as a copy of another node element collection result.</summary>
      <param name="nodeElementCollectionResult">The node element collection result to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult,OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult,OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.Value">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.Generic.ValueResult`1.Value" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DANodeElementCollectionResult#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeElementCollectionResult.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeElementCollectionResult)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult">
      <summary>Holds result of an operation in form of a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp, and quality).</summary>
      <remarks>
        <para>The result is successful if the <see cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Exception" /> is a null reference. Otherwise, this 
            property contains information about the reason of the failure.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class, with a copy of another instance.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor(System.Object,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" />.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="vtq">The <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp and quality) that is a successful result of the 
            operation.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor(System.Object,System.Exception)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object and exception.</summary>
      <param name="state">An arbitrary object associated with the operation.
            It is the state object specified when the operation was invoked.</param>
      <param name="exception">Information about the reason of the failure of the operation.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor(System.Object,System.Exception,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class, with given state object, exception, and 
            <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" />.</summary>
      <param name="state">The state object specified when the operation was invoked.</param>
      <param name="exception">The reason of the failure of the operation.</param>
      <param name="vtq">The <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp and quality) that is a successful result of the 
            operation.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.op_Equality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult,OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="vtqResult1">First object to be compared.</param>
      <param name="vtqResult2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.op_Inequality(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult,OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="vtqResult1">First object to be compared.</param>
      <param name="vtqResult2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.FromFailed(OpcLabs.BaseLib.OperationModel.OperationResult)">
      <summary>
            Creates a new instance of the OPC-DA VTQ result from a given failed operation result.
            </summary>
      <param name="failedOperationResult">The failed operation result.</param>
      <returns>An OPC-DA VTQ result with the same state and exception as the operation result passed in.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.op_Explicit(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)~OpcLabs.BaseLib.OperationModel.ValueResult">
      <summary>
            Converts OPC-DA VTQ result object to a corresponding value result object, <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" />. 
            </summary>
      <param name="vtqResult">The OPC-DA VTQ result to be converted.</param>
      <returns>The value result object that corresponds to the VTQ result. <b>null</b> if the VTQ result
            passed in was <b>null</b>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.ToValueResult(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>
            Converts OPC-DA VTQ result object to a corresponding value result object, <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" />. 
            </summary>
      <param name="vtqResult">The OPC-DA VTQ result to be converted.</param>
      <returns>The value result object that corresponds to the VTQ result. <b>null</b> if the VTQ result
            passed in was <b>null</b>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.StatusInfo">
      <summary>
            Status information.
            </summary>
      <remarks>When the result represents a failure, the status information is 
            <see cref="F:OpcLabs.BaseLib.Data.StatusInfo.Unknown" />. When the result represents a success, the status information
            depends on the quality of the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Vtq" />.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Vtq">
      <summary>Gets or sets a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> (value, timestamp and quality) that is a successful result of the 
            operation.
            </summary>
      <value>Contains a null reference, when <see cref="T:System.Exception" /> is not null. Contains a non-null object when
            <see cref="T:System.Exception" /> is null.</value>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.OpcLabs#EasyOpc#DataAccess#OperationModel#ComTypes#_DAVtqResult#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Formatter">
      <inheritdoc cref="P:OpcLabs.BaseLib.OperationModel.OperationResult.Formatter" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.CheckVtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Infrastructure.
            </summary>
      <param name="vtq">Vtq to be checked.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for OPC-DA optimization.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.AbandonIntervalMinimum">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonIntervalMinimum" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.AbandonRateMultiplier">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonRateMultiplier" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.AutoAdjustmentPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AutoAdjustmentPeriod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.FastestAutomaticUpdateRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.FastestAutomaticUpdateRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.MaximumEffectiveValueAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MaximumEffectiveValueAge" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.MinimumEffectiveValueAge">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MinimumEffectiveValueAge" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.ReadIntervalAggregateMinimumValues">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateMinimumValues" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.ReadIntervalAggregateWindowSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateWindowSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.RequestedUpdateRateFactor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.RequestedUpdateRateFactor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.SlowestAutomaticUpdateRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.SlowestAutomaticUpdateRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.UpdateRateNegativeHysteresis">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRateNegativeHysteresis" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.UpdateRatePositiveHysteresis">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRatePositiveHysteresis" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.ValueAgeAggregateMinimumValues">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateMinimumValues" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.ValueAgeAggregateWindowSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateWindowSize" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.PercentDeadbandBucketsPerDecade">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.PercentDeadbandBucketsPerDecade" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.UpdateRateBucketsPerDecade">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.UpdateRateBucketsPerDecade" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.FastestUpdateRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.FastestUpdateRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.HighestPercentDeadband">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.HighestPercentDeadband" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.LowestPercentDeadband">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.LowestPercentDeadband" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.SlowestUpdateRate">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.SlowestUpdateRate" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.ChangeItemSubscriptionsChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ChangeItemSubscriptionsChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.GroupByServer">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GroupByServer" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.GetPropertyValuesChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GetPropertyValuesChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.ReadItemsChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ReadItemsChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.SubscribeItemsChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.SubscribeItemsChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.UnsubscribeItemsChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.UnsubscribeItemsChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.WriteItemsChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemsChunkSize" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.WriteItemValuesChunkSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemValuesChunkSize" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters">
      <summary>
            Contains parameters for OPC-DA auto-subscribing client.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultAbandonIntervalMinimum">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonIntervalMinimum" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultAbandonRateMultiplier">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonRateMultiplier" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultAutoAdjustmentPeriod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AutoAdjustmentPeriod" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultFastestAutomaticUpdateRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.FastestAutomaticUpdateRate" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultMaximumEffectiveValueAge">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MaximumEffectiveValueAge" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultMinimumEffectiveValueAge">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MinimumEffectiveValueAge" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultReadIntervalAggregateMinimumValues">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateMinimumValues" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultReadIntervalAggregateWindowSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateWindowSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultRequestedUpdateRateFactor">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.RequestedUpdateRateFactor" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultSlowestAutomaticUpdateRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.SlowestAutomaticUpdateRate" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultUpdateRateNegativeHysteresis">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRateNegativeHysteresis" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultUpdateRatePositiveHysteresis">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRatePositiveHysteresis" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultValueAgeAggregateMinimumValues">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateMinimumValues" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DefaultValueAgeAggregateWindowSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateWindowSize" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="autoSubscribingParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.Default">
      <summary>
            Default OPC-DA auto-subscribing parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonIntervalMinimum">
      <summary>
            Abandon interval minimum. Number of milliseconds.
            The OPC item is considered "abandoned" if no read requests to it have been made for abandon interval. In such
            case it is unsubscribed. The abandon interval is computed using the aggregated read rate and
            <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonRateMultiplier" />, but it is never shorter than value of this property.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonRateMultiplier">
      <summary>
            Abandon rate multiplier. Must be greater than or equal to 1.0.
            The OPC item is considered "abandoned" if no read requests to it have been made for abandon interval. In such case
            it is unsubscribed. The abandon interval is computed by multiplying the aggregated read rate and the value of
            this property, but it is never shorter than <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AbandonIntervalMinimum" />.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.AutoAdjustmentPeriod">
      <summary>
            Auto adjustment period. Number of milliseconds. Specifies how often the engine automatically adjusts the parameters 
            (such as update rate) of OPC items to match the observed usage pattern (e.g. the frequency of reading the item).
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.FastestAutomaticUpdateRate">
      <summary>
            Fastest automatic update rate. Number of milliseconds.
            When the system automatically modifies the update rate of an OPC item, it never chooses a rate that is faster (has 
            lower value) than the value of this property.
            </summary>
      <remarks>
        <para>The value must be greater than zero.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MaximumEffectiveValueAge">
      <summary>
            The maximum effective value age in the Read request for it to be considered in auto-subscribing.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.MinimumEffectiveValueAge">
      <summary>
            The minimum effective value age in the Read request for it to be considered in auto-subscribing.
            </summary>
      <remarks>
        <para>
            Zero or low value ages have very little chances of cache hit with any subscription update rate.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateMinimumValues">
      <summary>
            The minimum count of data values in the read interval aggregate.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadIntervalAggregateWindowSize">
      <summary>
            The size of the window use by the read interval aggregate.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.RequestedUpdateRateFactor">
      <summary>
            The factor used to calculate the requested update rate from the value age aggregate.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.SlowestAutomaticUpdateRate">
      <summary>
            Slowest automatic update rate. Number of milliseconds.
            When the system automatically modifies the update rate of an OPC item, it never chooses a rate that is slower (has 
            higher value) than the value of this property.
            </summary>
      <remarks>
        <para>The value must be greater than zero.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRateNegativeHysteresis">
      <summary>
            Hysteresis for negative update rate changes. In percent, between 0.0 and 100.0.
            Requests to make the update rate of OPC item faster (i.e. lower value) will be ignored if the percentual change
            in update rate value is lower than the value of this property.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.UpdateRatePositiveHysteresis">
      <summary>
            Hysteresis for positive update rate changes. In percent, between 0.0 and 100.0.
            Requests to make the update rate of OPC item slower (i.e. higher value) will be ignored if the percentual change
            in update rate value is lower than the value of this property.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateMinimumValues">
      <summary>
            The minimum count of data values in the value age aggregate.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ValueAgeAggregateWindowSize">
      <summary>
            The size of the window use by the value age aggregate.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.Equals(OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.OpcLabs#EasyOpc#DataAccess#Optimization#ComTypes#_DAAutoSubscribingParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAAutoSubscribingParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters">
      <summary>
            Contains parameters for OPC-DA parameter bucketing client.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.DefaultPercentDeadbandBucketsPerDecade">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.PercentDeadbandBucketsPerDecade" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.DefaultUpdateRateBucketsPerDecade">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.UpdateRateBucketsPerDecade" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="parameterBucketingParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.Default">
      <summary>
            Default OPC-DA parameter bucketing parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.PercentDeadbandBucketsPerDecade">
      <summary>
            Number of buckets per decade of percent deadband.
            </summary>
      <value>
            The percent deadband values (from 0.0 to 100.0) are divided into "buckets", using a logarithmic scale. This number
            specifies how many buckets will exist between values 10.0 - 100.0, and also 1.0 - 10.0, 0.1 - 1.0, and so forth.
            Percent deadbands requested will be adjusted so that the nearest bucket that fully satisfies the percent deadband 
            requirement is used (i.e. the system may choose a percent deadband lower than requested, but not higher).
            </value>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.UpdateRateBucketsPerDecade">
      <summary>
            Number of buckets per decade of update rate.
            </summary>
      <value>
            The update rate values are divided into "buckets", using a logarithmic scale. This number specifies how many buckets 
            will exist between values 100.0 - 1000.0, 10.0 - 100.0, 1.0 - 10.0, 0.1 - 1.0, and so forth, in both directions.
            Update rates requested will be adjusted so that the nearest bucket that fully satisfies the update rate 
            requirement is used (i.e. the system may choose an update rate that is faster than requested, but not slower).
            </value>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.Equals(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.OpcLabs#EasyOpc#DataAccess#Optimization#ComTypes#_DAParameterBucketingParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterBucketingParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters">
      <summary>
            Contains parameters for OPC-DA parameter restricting client.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.DefaultFastestUpdateRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.FastestUpdateRate" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.DefaultHighestPercentDeadband">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.HighestPercentDeadband" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.DefaultLowestPercentDeadband">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.LowestPercentDeadband" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.DefaultSlowestUpdateRate">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.SlowestUpdateRate" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="parameterRestrictingParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.Default">
      <summary>
            Default OPC-DA parameter Restricting parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.FastestUpdateRate">
      <summary>
            Fastest update rate. Number of milliseconds.
            If your application specifies an update rate that is faster (has lower value) than the value of this property,
            the value of this property will be used instead.
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.SlowestUpdateRate">
      <summary>
            Slowest update rate. Number of milliseconds.
            If your application specifies an update rate that is slower (has higher value) than the value of this property,
            the value of this property will be used instead.
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.LowestPercentDeadband">
      <summary>
            If your application specifies a percent deadband that is lower than the value of this property,
            the value of this property will be used instead.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, and less than or equal to 100.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.HighestPercentDeadband">
      <summary>
            If your application specifies a percent deadband that is higher than the value of this property,
            the value of this property will be used instead.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero, and less than or equal to 100.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.Equals(OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.OpcLabs#EasyOpc#DataAccess#Optimization#ComTypes#_DAParameterRestrictingParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DAParameterRestrictingParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters">
      <summary>
            Contains parameters for OPC-DA request chunking client.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultChangeItemSubscriptionsChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ChangeItemSubscriptionsChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultGetPropertyValuesChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GetPropertyValuesChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultGroupByServer">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GroupByServer" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultReadItemsChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ReadItemsChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultSubscribeItemsChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.SubscribeItemsChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultUnsubscribeItemsChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.UnsubscribeItemsChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultWriteItemsChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemsChunkSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DefaultWriteItemValuesChunkSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemValuesChunkSize" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="requestChunkingParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.Default">
      <summary>
            Default OPC-DA request chunking parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.NoChunking">
      <summary>
            OPC-DA request chunking parameters for no chunking.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters,OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ChangeItemSubscriptionsChunkSize">
      <summary>
            Size of ChangeMultipleItemSubscriptions request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GroupByServer">
      <summary>
            Determines whether the chunking will be performed for individual servers separately.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GetPropertyValuesChunkSize">
      <summary>
            Size of GetMultiplePropertyValues request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ReadItemsChunkSize">
      <summary>
            Size of ReadMultipleItems request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.SubscribeItemsChunkSize">
      <summary>
            Size of SubscribeMultipleItems request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.UnsubscribeItemsChunkSize">
      <summary>
            Size of UnsubscribeMultipleItems request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemsChunkSize">
      <summary>
            Size of WriteMultipleItems request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteItemValuesChunkSize">
      <summary>
            Size of WriteMultipleItemValues request chunks. 0 for no chunking.
            </summary>
      <remarks>
        <para>
            The chunking is made regardless of the target server (endpoint). This means that when multiple servers
            (endpoints) are involved in the operation, the effective chunk size per server (endpoint) may be smaller than
            the value of this parameter.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.Equals(OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.OpcLabs#EasyOpc#DataAccess#Optimization#ComTypes#_DARequestChunkingParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.DARequestChunkingParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.Implementation.AutoSubscribingEasyDAClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. </param>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.Implementation.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA implementation types for optimization.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Optimization.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA types for optimization.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for OPC-DA Optimizer.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.AutoSubscribingParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.AutoSubscribingParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableAutoSubscribing">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableAutoSubscribing" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableItemCaching">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableItemCaching" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableParameterBucketing">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableParameterBucketing" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableParameterRestricting">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableParameterRestricting" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableServerDatabase">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableServerDatabase" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableRequestChunking">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableRequestChunking" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableRequestMerging">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableRequestMerging" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.EnableSubscriptionBlending">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableSubscriptionBlending" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.ParameterBucketingParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterBucketingParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.ParameterRestrictingParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterRestrictingParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.RequestChunkingParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.RequestChunkingParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters">
      <summary>
            Contains parameters for OPC-DA Optimizer plug-in.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.#ctor(OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="optimizerPluginParameters">Parameters to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.Default">
      <summary>
            Default OPC-DA Optimizer plug-in parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.DefaultAutoSubscribingParameters">
      <summary>
            Default auto-subscribing parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.DefaultParameterBucketingParameters">
      <summary>
            Default parameter bucketing parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.DefaultParameterRestrictingParameters">
      <summary>
            Default parameter restricting parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.DefaultRequestChunkingParameters">
      <summary>
            Default request chunking parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters,OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters,OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="first">First object to be compared.</param>
      <param name="second">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.AutoSubscribingParameters">
      <summary>
            Contains parameters for OPC-DA auto-subscribing client.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableAutoSubscribing">
      <summary>
            Determines whether auto-subscribing is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableItemCaching">
      <summary>
            Determines whether item caching is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableParameterBucketing">
      <summary>
            Determines whether parameter bucketing is enabled.
            </summary>
      <remarks>
        <para>
            When this setting is off, explicit item subscriptions honor the requested update rate precisely (without
            attempting to merge the neighboring rates into "buckets").</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableParameterRestricting">
      <summary>
            Determines whether parameter restricting is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableServerDatabase">
      <summary>
            Determines whether ProgID database is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableRequestChunking">
      <summary>
            Determines whether request chunking is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableRequestMerging">
      <summary>
            Determines whether request merging is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.EnableSubscriptionBlending">
      <summary>
            Determines whether subscription blending is enabled.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterBucketingParameters">
      <summary>
            Contains parameters for OPC-DA parameter bucketing client.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterRestrictingParameters">
      <summary>
            Contains parameters for OPC-DA parameter restricting client.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.RequestChunkingParameters">
      <summary>
            Contains parameters for OPC-DA request chunking client.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.Equals(OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.OpcLabs#EasyOpc#DataAccess#Plugins#Optimizer#ComTypes#_DAOptimizerPluginParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ResetAutoSubscribingParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.AutoSubscribingParameters" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ShouldSerializeAutoSubscribingParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.AutoSubscribingParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ResetParameterBucketingParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterBucketingParameters" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ShouldSerializeParameterBucketingParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterBucketingParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ResetParameterRestrictingParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterRestrictingParameters" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ShouldSerializeParameterRestrictingParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ParameterRestrictingParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ResetRequestChunkingParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.RequestChunkingParameters" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.ShouldSerializeRequestChunkingParameters">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.DAOptimizerPluginParameters.RequestChunkingParameters" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.Internal.DAOptimizerPlugin">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.Internal.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA Optimizer plugin internal types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA Optimizer plugin types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Telemetry.DATelemetryPlugin">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Plugins.Telemetry.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA Telemetry plugin types.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Telemetry.NamespaceDoc">
      <summary>
            This namespace contains OPC-DA types for telemetry.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Utilities.DAVtqUtilities">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Utilities.DAVtqUtilities.IsValid``1(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
            Determines whether the non-generic <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> is valid with value type <typeparamref name="TValue" />.
            </summary>
      <param name="vtq">The non-generic <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> to be tested for validity.</param>
      <returns>Returns <c>true</c> if valid. Returns <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Utilities.EasyDAItemChangedEventArgsUtilities.IsValid``1(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs)">
      <summary>
            Determines whether the non-generic <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> is valid with value type 
            <typeparamref name="TValue" />.
            </summary>
      <param name="eventArgs">The non-generic <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs" /> to be tested for validity.</param>
      <returns>Returns <c>true</c> if valid. Returns <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.Utilities.NamespaceDoc">
      <summary>
            This namespace contains utility types for OPC Data Access.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight">
      <summary>Indicates if the item is read only, write only or read/write.</summary>
      <remarks>
        <para>This is NOT related to security but rather to the nature of the underlying hardware.</para>
      </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRight.DefaultAsString">
      <summary>
            Default value of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" />, i.e. corresponding to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Both" />, expressed as
            string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRight.DefaultInternalValue">
      <summary>
            Default internal value. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Both" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRight.DefaultNumericalValue">
      <summary>
            Numerical value of default <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" />, which corresponds to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Both" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor(OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      <summary>
            Initializes a new instance of the class to the value indicated by another <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" />.
            </summary>
      <param name="accessRight">Access rights object to copy from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor(OpcLabs.EasyOpc.DataAccess.DAAccessRights)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      <summary>Initializes a new instance of the class to the value indicated by a combination of enumerated values.</summary>
      <param name="internalValue">Value of access rights bits.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor(System.Int64)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      <summary>Initializes a new instance of the class to the value indicated by long integer value.</summary>
      <param name="numericalValue">Value of access rights bits.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor(System.Boolean,System.Boolean)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      <summary>Initializes a new instance of the class to the value indicated by individual access rights flags.</summary>
      <param name="allowRead">The Readable indicator.</param>
      <param name="allowWrite">The Writable indicator.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.Default">
      <summary>
            Default access rights.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Equality(OpcLabs.EasyOpc.DataAccess.DAAccessRight,OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAAccessRight,OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAAccessRight)~System.Int64">
      <summary>Converts the access rights object to a long integer value of access rights bits.</summary>
      <param name="accessRight">The value to be converted.</param>
      <returns>Returns the value of access rights bits.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Implicit(System.Int64)~OpcLabs.EasyOpc.DataAccess.DAAccessRight">
      <summary>Converts the long integer value of access rights bits to an access rights object.</summary>
      <param name="numericalValue">The value to be converted.</param>
      <returns>Returns the access rights object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAAccessRights)~OpcLabs.EasyOpc.DataAccess.DAAccessRight">
      <summary>Converts a combination of enumerated values to a DAAccessRight object.</summary>
      <param name="internalValue">Combination of enumerated values to be converted.</param>
      <returns>Returns a DAAccessRight converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAAccessRight)~OpcLabs.EasyOpc.DataAccess.DAAccessRights">
      <summary>Converts DAAccessRight object to a combination of enumerated values.</summary>
      <param name="accessRight">DAAccessRight object to be converted.</param>
      <returns>Returns a combination of enumerated values converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.FromDAAccessRights(OpcLabs.EasyOpc.DataAccess.DAAccessRights)">
      <summary>Converts a combination of enumerated values to a DAAccessRight object.</summary>
      <param name="internalValue">Combination of enumerated values to be converted.</param>
      <returns>Returns a DAAccessRight converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.FromInt64(System.Int64)">
      <summary>Converts the long integer value of access rights bits to an access rights object.</summary>
      <param name="value">The value to be converted.</param>
      <returns>Returns the access rights object.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.ToDAAccessRights(OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>Converts DAAccessRight object to a combination of enumerated values.</summary>
      <param name="accessRight">DAAccessRight object to be converted.</param>
      <returns>Returns a combination of enumerated values converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.ToInt64(OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>Converts the access rights object to a long integer value of access rights bits.</summary>
      <param name="accessRights">The value to be converted.</param>
      <returns>Returns the value of access rights bits.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.AllowRead">
      <summary>Gets or sets the Readable indicator.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.AllowWrite">
      <summary>Gets or sets the Writable indicator.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.InternalValue">
      <summary>
            An internal value of the access rights - a combination of enumerated values.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.NumericalValue">
      <summary>
            The numerical (integer) value of the access rights.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.ToString">
      <summary>Returns a string describing the access rights combination.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAAccessRight.PropertyChanged">
      <summary>
            Handler for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.StandardName">
      <summary>
            A symbolic name of the current DAAccessRight if it has a standard name. Empty otherwise. 
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAAccessRight.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAAccessRight#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAAccessRight.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAAccessRight.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAAccessRights">
      <summary>Contains pre-defined constants of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAAccessRight" /> internal values.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.None">
      <summary>The client cannot read or change the data item's value.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Readable">
      <summary>The client can read the data item's value.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Writable">
      <summary>The client can change the data item's value.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAAccessRights.Both">
      <summary>The client can read and change the data item's value.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DABrowseFilter">
      <summary>An enumeration specifying which subset of browse elements to return.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseFilter.None">
      <summary>Do not return anything.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseFilter.All">
      <summary>Return branches and leaves.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseFilter.Branches">
      <summary>Return branches only.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseFilter.Leaves">
      <summary>Return leaves only.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseFilter.Flat">
      <summary>Return leaves only, flattening the address space into a non-hierarchical list.</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DADataSource">
      <summary>Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters" />
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DADataSource.ByValueAge">
      <summary>
            The data source (memory, OPC cache or OPC device) selection will be based on the desired value age and 
            current status of data received from the server.
            <para><b>Remarks:</b></para><para>
            Value is 0. </para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DADataSource.Cache">
      <summary>
            OPC reads will be fulfilled from the cache in the OPC server.
            <para><b>Remarks:</b></para><para>
            Value is 1. Corresponds to OPC_DS_CACHE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DADataSource.Device">
      <summary>
            OPC reads will be fulfilled from the device by the OPC server.
            <para><b>Remarks:</b></para><para>
            Value is 2. Corresponds to OPC_DS_DEVICE in the OPC specification.</para></summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DALimitChoice">
      <summary>The Limit bit field of OPC quality.</summary>
      <remarks>
        <para>The Limit Field is valid regardless of the QualityChoice and Substatus. In some cases such as Sensor Failure it 
            can provide useful diagnostic information.</para>
        <para>Server which do not support Limit return 0 (LimitOk).</para>
      </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DALimitChoice.LimitOk">
      <summary>
            Not Limited.
            The value is free to move up or down.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DALimitChoice.LimitLow">
      <summary>
            Low Limited.
            The value has ‘pegged’ at some lower limit.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DALimitChoice.LimitHigh">
      <summary>
            High Limited.
            The value has ‘pegged’ at some high limit.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DALimitChoice.LimitConst">
      <summary>
            Constant.
            The value is a constant and cannot move.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId">
      <summary>The identifying number assigned by the OPC server to the property.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyId.DefaultAsString">
      <summary>
            Default property Id, represented as string ("").
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyId.DefaultInternalValue">
      <summary>
            Default internal value. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyId.DefaultIsNull">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.IsNull" /> property. Equals to <c>true</c>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyId.DefaultNumericalValue">
      <summary>
            Numerical value of default <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" />, which corresponds to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#ctor">
      <summary>Initializes a new instance of the class to the <see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null" /> value.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <param name="propertyId">The property Id to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <summary>Initializes a new instance of the class to the value indicated by an enumerated value.</summary>
      <param name="internalValue">Value of property Id.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#ctor(System.Int64)">
      <param name="numericalValue">Numerical property Id to be converted to a new instance of this class.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.Default">
      <summary>
            Default property Id.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Equality(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="propertyId1">First object to be compared.</param>
      <param name="propertyId2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="propertyId1">First object to be compared.</param>
      <param name="propertyId2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAPropertyId)~System.Int64">
      <summary>Converts a DAPropertyId object to a numerical property Id value.</summary>
      <param name="propertyId">A DAPropertyId object to be converted.</param>
      <returns>Returns a numerical Id converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Implicit(System.Int64)~OpcLabs.EasyOpc.DataAccess.DAPropertyId">
      <summary>Converts a numerical property Id value to a DAPropertyId object.</summary>
      <param name="numericalValue">Numerical property Id to be converted.</param>
      <returns>Returns a DAPropertyId converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)~OpcLabs.EasyOpc.DataAccess.DAPropertyId">
      <summary>Converts an enumerated value to a DAPropertyId object.</summary>
      <param name="internalValue">Enumerated value to be converted.</param>
      <returns>Returns a DAPropertyId converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAPropertyId)~OpcLabs.EasyOpc.DataAccess.DAPropertyIds">
      <summary>Converts DAPropertyId object to an enumerated value.</summary>
      <param name="propertyId">DAPropertyId object to be converted.</param>
      <returns>Returns an enumerate values converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.FromDAPropertyIds(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <summary>Converts an enumerated value to a DAPropertyId object.</summary>
      <param name="internalValue">Enumerated value to be converted.</param>
      <returns>Returns a DAPropertyId converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.FromInt64(System.Int64)">
      <summary>Converts a numerical property Id value to a DAPropertyId object.</summary>
      <param name="value">Numerical property Id to be converted.</param>
      <returns>Returns a DAPropertyId converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetPropertyType(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <summary>
            Determines a type of an OPC property given by its property Id.
            </summary>
      <param name="propertyId">A numerical Id of the property whose type should be determined.</param>
      <returns>A type of the OPC property. If the property type cannot be determined, the property is assumed to be of 
            <see cref="T:System.Object" /> type.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetPropertyType(OpcLabs.EasyOpc.DataAccess.DAPropertyIds,System.Guid)">
      <summary>
            Determines a type of an OPC property given by its property Id.
            </summary>
      <param name="propertyId">A numerical Id of the property whose type should be determined.</param>
      <param name="serverClsid">The CLSID of the OPC server on which the property resides.</param>
      <returns>A type of the OPC property. If the property type cannot be determined, the property is assumed to be of 
            <see cref="T:System.Object" /> type.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetName(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <summary>Determines the property name for an OPC property given by its numerical property Id.</summary>
      <param name="propertyId">A numerical Id of the property whose name should be determined.</param>
      <returns>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetName(OpcLabs.EasyOpc.DataAccess.DAPropertyIds,System.Guid)">
      <summary>Determines the property name for an OPC property given by its numerical property Id.</summary>
      <param name="propertyId">A numerical Id of the property whose name should be determined.</param>
      <param name="serverClsid">A CLSID of the OPC server for which the property name should be obtained. This is used
            for properties that are server-specific. For standard properties, the method does not use this parameter and
            it can be passed in as Guid.Empty.</param>
      <returns>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ToDAPropertyIds(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Converts DAPropertyId object to an enumerated value.</summary>
      <param name="propertyId">DAPropertyId object to be converted.</param>
      <returns>Returns an enumerated value converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ToInt64(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Converts a DAPropertyId object to a numerical property Id value.</summary>
      <param name="propertyId">A DAPropertyId object to be converted.</param>
      <returns>Returns a numerical Id converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.InternalValue">
      <summary>
            The internal (enumerated) value of the property Id.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.IsNull">
      <summary>
            Determines whether the property Id is null.
            </summary>
      <remarks>
            An OPC "Classic" property Id is considered null when its internal value is <see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null" />, 
            i.e. equal to -1.
            </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.NumericalValue">
      <summary>
            The numerical (integer) value of the property Id.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetName">
      <summary>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</summary>
      <returns>Returns the property name.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetName(System.Guid)">
      <summary>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</summary>
      <param name="serverClsid">A CLSID of the OPC server for which the property name should be obtained. This is used
            for properties that are server-specific. For standard properties, the method does not use this parameter and
            it can be passed in as Guid.Empty.</param>
      <returns>Returns the property name.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetPropertyType">
      <summary>
            Determines a type of this OPC property.
            </summary>
      <returns>A type of the OPC property. If the property type cannot be determined, the property is assumed to be of 
            <see cref="T:System.Object" /> type.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetPropertyType(System.Guid)">
      <summary>
            Determines a type of this OPC property.
            </summary>
      <param name="serverClsid">The CLSID of the OPC server on which the property resides.</param>
      <returns>A type of the OPC property. If the property type cannot be determined, the property is assumed to be of 
            <see cref="T:System.Object" /> type.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ToString">
      <summary>Returns a string identifier of the property, for pre-defined properties. An empty string is returned if 
            the property is not known.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAPropertyId.PropertyChanged">
      <summary>
            Handler for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.StandardName">
      <summary>
            A symbolic name of the current DAPropertyId if it has a standard name. Empty otherwise. 
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ReadStringList(System.Collections.Generic.IList{System.String})">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAPropertyId#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAPropertyIds">
      <summary>Contains pre-defined constants of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyId" /> internal values.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null">
      <summary>
            Null property Id. Used when the property Id is not specified.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.None">
      <summary>Reserved. No property.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DataType">
      <summary>
            Item Canonical DataType.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_DATATYPE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Value">
      <summary>
            Item Value.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_VALUE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Quality">
      <summary>
            Item Quality.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_QUALITY)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Timestamp">
      <summary>
            Item Timestamp.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_TIMESTAMP)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AccessRights">
      <summary>
            Item Access Rights.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_ACCESS_RIGHTS)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ScanRate">
      <summary>
            Server Scan Rate.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_SCAN_RATE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUType">
      <summary>
            Item EU Type.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_EU_TYPE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUInfo">
      <summary>
            Item EUInfo.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_EU_INFO)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUUnits">
      <summary>
            EU Units.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_EU_UNITS)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Description">
      <summary>
            Item Description.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_DESCRIPTION)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighEU">
      <summary>
            High EU.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_HIGH_EU)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowEU">
      <summary>
            Low EU.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_LOW_EU)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighIR">
      <summary>
            High Instrument Range.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_HIGH_IR)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowIR">
      <summary>
            Low Instrument Range.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_LOW_IR)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.CloseLabel">
      <summary>
            Contact Close Label.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_CLOSE_LABEL)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.OpenLabel">
      <summary>
            Contact Open Label.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_OPEN_LABEL)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TimeZone">
      <summary>
            Item Timezone.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_TIMEZONE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.MinimumValue">
      <summary>
            Minimum Value.
            <para><b>Remarks:</b></para><para>
            OPC XML-DA Specification Version 1.01.
            </para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.MaximumValue">
      <summary>
            Maximum Value.
            <para><b>Remarks:</b></para><para>
            OPC XML-DA Specification Version 1.01.
            </para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ValuePrecision">
      <summary>
            Value Precision.
            <para><b>Remarks:</b></para><para>
            OPC XML-DA Specification Version 1.01.
            </para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionStatus">
      <summary>
            Condition Status.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_CONDITION_STATUS)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmQuickHelp">
      <summary>
            Alarm Quick Help.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_ALARM_QUICK_HELP)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmAreaList">
      <summary>
            Alarm Area List.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_ALARM_AREA_LIST)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.PrimaryAlarmArea">
      <summary>
            Primary Alarm Area.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_PRIMARY_ALARM_AREA)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionLogic">
      <summary>
            Condition Logic.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_CONDITION_LOGIC)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LimitExceeded">
      <summary>
            Limit Exceeded.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_LIMIT_EXCEEDED)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Deadband">
      <summary>
            Deadband.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_DEADBAND)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighHighLimit">
      <summary>
            HiHi Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_HIHI_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighLimit">
      <summary>
            Hi Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_HI_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLimit">
      <summary>
            Lo Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_LO_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLowLimit">
      <summary>
            LoLo Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_LOLO_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ChangeRateLimit">
      <summary>
            Rate of Change Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_CHANGE_RATE_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DeviationLimit">
      <summary>
            Deviation Limit.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_DEVIATION_LIMIT)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.SoundFile">
      <summary>
            Sound File.
            <para><b>Remarks:</b></para><para>(OPC_PROPERTY_SOUND_FILE)</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeSystemId">
      <summary>(OPC_PROPERTY_TYPE_SYSTEM_ID).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DictionaryId">
      <summary>(OPC_PROPERTY_DICTIONARY_ID).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeId">
      <summary>(OPC_PROPERTY_TYPE_ID).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Dictionary">
      <summary>(OPC_PROPERTY_DICTIONARY).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeDescription">
      <summary>(OPC_PROPERTY_TYPE_DESCRIPTION).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConsistencyWindow">
      <summary>(OPC_PROPERTY_TYPE_DESCRIPTION).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.WriteBehavior">
      <summary>(OPC_PROPERTY_WRITE_BEHAVIOR).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.UnconvertedItemId">
      <summary>(OPC_PROPERTY_UNCONVERTED_ITEM_ID).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.UnfilteredItemId">
      <summary>(OPC_PROPERTY_UNFILTERED_ITEM_ID).</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DataFilterValue">
      <summary>(OPC_PROPERTY_DATA_FILTER_VALUE).</summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAQualities">
      <summary>Contains pre-defined constants of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> internal values.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.BadNonspecific">
      <summary>
            Non-specific. The value is bad but no specific reason is known.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.UncertainNonspecific">
      <summary>
            Non-specific. There is no specific reason why the value is uncertain.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.GoodNonspecific">
      <summary>
            Non-specific. The value is good. There are no special conditions.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.ConfigError">
      <summary>
            Configuration Error. There is some server specific problem with the configuration. For example the item in 
            question has been deleted from the configuration.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.NotConnected">
      <summary>
            Not Connected. The input is required to be logically connected to something but is not. This quality may 
            reflect that no value is available at this time, for reasons like the value may have not been provided by the data 
            source.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.DeviceFailure">
      <summary>
            Device Failure. A device failure has been detected.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.SensorFailure">
      <summary>
            Sensor Failure. A sensor failure had been detected (the ’Limits’ field can provide additional diagnostic 
            information in some situations).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.LastKnown">
      <summary>
            Last Known Value. Communications have failed. However, the last known value is available. 
            Remark: The ‘age’ of the value may be determined from the TIMESTAMP in the OPCITEMSTATE.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.CommFailure">
      <summary>
            Comm Failure. Communications have failed. There is no last known value is available.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.OutOfService">
      <summary>
            Out of Service. The block is off scan or otherwise locked. This quality is also used when the active state 
            of the item or the group containing the item is InActive.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.WaitingForInitialData">
      <summary>
            Waiting for Initial Data. After Items are added to a group, it may take some time for the server to actually obtain 
            values for these items. In such cases the client might perform a read (from cache), or establish a ConnectionPoint 
            based subscription and/or execute a Refresh on such a subscription before the values are available. This substatus 
            is only available from OPC DA 3.0 or newer servers.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.LastUsable">
      <summary>
            Last Usable Value. Whatever was writing this value has stopped doing so. The returned value should be 
            regarded as ‘stale’. Remark: This differs from a BAD value with Substatus 5 (Last Known Value). That status is 
            associated specifically with a detectable communications error on a ‘fetched’ value. This error is associated with 
            the failure of some external source to ‘put’ something into the value within an acceptable period of time. 
            Remark: The ‘age’ of the value can be determined from the TIMESTAMP in OPCITEMSTATE.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.SensorCal">
      <summary>
            Sensor Not Accurate. Either the value has ‘pegged’ at one of the sensor limits (in which case the limit 
            field should be set to 1 or 2) or the sensor is otherwise known to be out of calibration via some form of internal 
            diagnostics (in which case the limit field should be 0).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.EguExceeded">
      <summary>
            Engineering Units Exceeded. The returned value is outside the limits defined for this parameter. Remark: In 
            this case (per the Fieldbus Specification) the ‘Limits’ field indicates which limit has been exceeded but does NOT 
            necessarily imply that the value cannot move farther out of range.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.Subnormal">
      <summary>
            Sub-Normal. The value is derived from multiple sources and has less than the required number of 
            Good sources.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualities.LocalOverride">
      <summary>
            Local Override. The value has been Overridden. Typically this is means the input has been disconnected and 
            a manually entered value has been ‘forced’.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAQualitiesUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAQuality">
      <summary>Represents the quality state for an item's data value.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQuality.DefaultInternalValue">
      <summary>
            Default (enumerated) internal value. Equals to zero.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQuality.DefaultNumericalValue">
      <summary>
            Default numerical internal value. Equals to zero.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from other <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" />.</summary>
      <param name="quality">Quality state to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(OpcLabs.EasyOpc.DataAccess.DAQualities)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with value specified as enumerated.</summary>
      <param name="internalValue">Enumerated quality value to be copied from.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(OpcLabs.EasyOpc.DataAccess.DAQualityChoice)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified quality choice.</summary>
      <param name="qualityChoice">One of the basic quality choices (Good/Uncertain/Bad).</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(OpcLabs.EasyOpc.DataAccess.DAStatusChoice,OpcLabs.EasyOpc.DataAccess.DALimitChoice)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified status choice and limit choice.</summary>
      <param name="statusChoice">A combination of a basic quality choice (Good/Uncertain/Bad), and a sub-status.</param>
      <param name="limitChoice">The Limit bit field of OPC quality.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(OpcLabs.EasyOpc.DataAccess.DAStatusChoice)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified status choice.</summary>
      <param name="statusChoice">A combination of a basic quality choice (Good/Uncertain/Bad), and a sub-status.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with value specified as bit fields in an integer.</summary>
      <param name="numericalValue">Numerical quality value to be copied from.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAQuality" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.Default">
      <summary>
            Default quality.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Equality(OpcLabs.EasyOpc.DataAccess.DAQuality,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAQuality,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAQuality)~System.Int32">
      <summary>Converts the quality to an integer.</summary>
      <param name="quality">A quality to be converted."</param>
      <returns>Returns a bit-coded integer that corresponds to the quality.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Implicit(System.Int32)~OpcLabs.EasyOpc.DataAccess.DAQuality">
      <summary>Converts an integer to a quality.</summary>
      <param name="quality">An integer that represent the bit-coded quality."</param>
      <returns>Returns the quality that corresponds to the integer.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAQualities)~OpcLabs.EasyOpc.DataAccess.DAQuality">
      <summary>Converts an enumerated value to a DAQuality object.</summary>
      <param name="internalValue">Enumerated value to be converted.</param>
      <returns>Returns a DAQuality converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAQuality)~OpcLabs.EasyOpc.DataAccess.DAQualities">
      <summary>Converts DAQuality object to an enumerated value.</summary>
      <param name="quality">DAQuality object to be converted.</param>
      <returns>Returns an enumerated value converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.FromDAQualities(OpcLabs.EasyOpc.DataAccess.DAQualities)">
      <summary>Converts an enumerated value to a DAQuality object.</summary>
      <param name="internalValue">Enumerated value to be converted.</param>
      <returns>Returns a DAQuality converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.FromInt32(System.Int32)">
      <summary>Converts an integer to a quality.</summary>
      <param name="value">An integer that represent the bit-coded quality."</param>
      <returns>Returns the quality that corresponds to the integer.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ToDAQualities(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>Converts DAQuality object to an enumerated value.</summary>
      <param name="quality">DAQuality object to be converted.</param>
      <returns>Returns an enumerated value converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ToInt32(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>Converts the quality to an integer.</summary>
      <param name="quality">A quality to be converted."</param>
      <returns>Returns a bit-coded integer that corresponds to the quality.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.CarriesValue">
      <summary>
            Determines whether a valid data value is carried with this quality.
            </summary>
      <value>
        <c>True</c>
              if a data value is valid with this quality; <c>false</c>
              otherwise.</value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.InternalValue">
      <summary>
            The numerical (integer) value of the quality.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsBad">
      <summary>Determines whether the Quality (QualityChoice) is Bad.</summary>
      <value>Returns True when the Quality (QualityChoice) is Bad.</value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsGood">
      <summary>Determines whether the Quality (QualityChoice) is Good.</summary>
      <value>Returns True when the Quality (QualityChoice) is Good.</value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.IsUncertain">
      <summary>Determines whether the Quality (QualityChoice) is Uncertain.</summary>
      <value>Returns True when the Quality (QualityChoice) is Uncertain.</value>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.LimitBitField">
      <summary>Gets the Limit bit field.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.NumericalValue">
      <summary>
            The numerical (integer) value of the quality.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.QualityChoiceBitField">
      <summary>Gets the QualityChoice bit field.</summary>
      <remarks>
        <para>You cannot set the QualityChoice using a property; use SetQualityAndSubstatus method instead. This approach is 
            needed as the semantics of the Status depends on the QualityChoice, and therefore setting just QualityChoice could 
            lead to inconsistent or undesired contents of the DAQuality.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.StatusBitField">
      <summary>Gets the Status bit field (Quality and Substatus).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.SetQualityAndSubStatus(OpcLabs.EasyOpc.DataAccess.DAQualityChoice,System.Int16)">
      <summary>Modifies the QualityChoice and Substatus bit fields.</summary>
      <param name="qualityChoice">One of the basic quality choices (Good/Uncertain/Bad).</param>
      <param name="subStatus">Sub-status bit field of the OPC quality.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.SetQualityAndSubStatus(OpcLabs.EasyOpc.DataAccess.DAQualityChoice)">
      <summary>Modifies the QualityChoice bit field.</summary>
      <param name="qualityChoice">One of the basic quality choices (Good/Uncertain/Bad).</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ToString">
      <summary>Returns a string describing the individual fields of the quality.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ToString(System.String)">
      <summary>
            Converts the value of the current object to its equivalent string representation using the specified format.
            </summary>
      <param name="format">A standard or custom format string (see Remarks).</param>
      <returns>A string representation of value of the current object as specified by <paramref name="format" />.</returns>
      <remarks>
        <para>
            The <paramref name="format" /> parameter should contain either a standard format specifier or a custom format 
            pattern that defines the format of the returned string. If <paramref name="format" /> is <c>null</c> or an empty 
            string, the general format specifier, 'G', is used.</para>
        <para>
            This method uses formatting information derived from the current culture.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ToString(System.String,System.IFormatProvider)">
      <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAQuality.PropertyChanged">
      <summary>
            Handler for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.StandardName">
      <summary>
            A symbolic name of the current DAQuality if it has a standard name. Empty otherwise. 
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAQuality#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAQualityChoice">
      <summary>The QualityChoice bit field, i.e. the most significant part of the OPC quality flags.</summary>
      <remarks>
        <para>The OPC specification uses the name "Quality" for this bit field, which makes it possible to confuse with the full
            OPC quality value. We have made up the name "QualityChoice" in order to reduce the chances for confusion.</para>
      </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualityChoice.Bad">
      <summary>
            Bad. 
            Value is not useful for reasons indicated by the Substatus.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_BAD in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualityChoice.Uncertain">
      <summary>
            Uncertain. 
            The quality of the value is uncertain for reasons indicated by the Substatus.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_UNCERTAIN in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAQualityChoice.Good">
      <summary>
            Good. 
            The Quality of the value is Good.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_GOOD in the OPC specification.</para></summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAQualityChoiceUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAStatusChoice">
      <summary>Status is a combination of QualityChoice and Substatus. Which Substatus values can be used depend on 
            QualityChoice.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.BadNonspecific">
      <summary>
            Non-specific. 
            Substatus for BAD Quality: The value is bad but no specific reason is known.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_BAD in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.UncertainNonspecific">
      <summary>
            Non-specific. 
            Substatus for UNCERTAIN Quality: There is no specific reason why the value is uncertain.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_UNCERTAIN in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.GoodNonspecific">
      <summary>
            Non-specific. 
            Substatus for GOOD Quality: The value is good. There are no special conditions.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_GOOD in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.ConfigError">
      <summary>
            Configuration Error. 
            Substatus for BAD Quality: There is some server specific problem with the configuration. For example the item in 
            question has been deleted from the configuration.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_CONFIG_ERROR in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.NotConnected">
      <summary>
            Not Connected. 
            Substatus for BAD Quality: The input is required to be logically connected to something but is not. This quality may 
            reflect that no value is available at this time, for reasons like the value may have not been provided by the data 
            source.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_NOT_CONNECTED in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.DeviceFailure">
      <summary>
            Device Failure. 
            Substatus for BAD Quality: A device failure has been detected.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_DEVICE_FAILURE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.SensorFailure">
      <summary>
            Sensor Failure. 
            Substatus for BAD Quality: A sensor failure had been detected (the ’Limits’ field can provide additional diagnostic 
            information in some situations).
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_SENSOR_FAILURE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.LastKnown">
      <summary>
            Last Known Value.
            Substatus for BAD Quality: Communications have failed. However, the last known value is available. 
            Remark: The ‘age’ of the value may be determined from the TIMESTAMP in the OPCITEMSTATE.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_LAST_KNOWN in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.CommFailure">
      <summary>
            Comm Failure.
            Substatus for BAD Quality: Communications have failed. There is no last known value is available.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_COMM_FAILURE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.OutOfService">
      <summary>
            Out of Service.
            Substatus for BAD Quality: The block is off scan or otherwise locked. This quality is also used when the active 
            state of the item or the group containing the item is InActive.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_OUT_OF_SERVICE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.WaitingForInitialData">
      <summary>
            Waiting for Initial Data.
            Substatus for BAD Quality: After Items are added to a group, it may take some time for the server to actually obtain 
            values for these items. In such cases the client might perform a read (from cache), or establish a ConnectionPoint 
            based subscription and/or execute a Refresh on such a subscription before the values are available. This substatus 
            is only available from OPC DA 3.0 or newer servers.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_WAITING_FOR_INITIAL_DATA in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.LastUsable">
      <summary>
            Last Usable Value.
            Substatus for UNCERTAIN Quality: Whatever was writing this value has stopped doing so. The returned value should be 
            regarded as ‘stale’. 
            Remark: This differs from a BAD value with Substatus 5 (Last Known Value). That status is 
            associated specifically with a detectable communications error on a ‘fetched’ value. This error is associated with 
            the failure of some external source to ‘put’ something into the value within an acceptable period of time. 
            Remark: The ‘age’ of the value can be determined from the TIMESTAMP in OPCITEMSTATE.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_LAST_USABLE in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.SensorCal">
      <summary>
            Sensor Not Accurate.
            Substatus for UNCERTAIN Quality: Either the value has ‘pegged’ at one of the sensor limits (in which case the limit 
            field should be set to 1 or 2) or the sensor is otherwise known to be out of calibration via some form of internal 
            diagnostics (in which case the limit field should be 0).
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_SENSOR_CAL in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.EguExceeded">
      <summary>
            Engineering Units Exceeded.
            Substatus for UNCERTAIN Quality: The returned value is outside the limits defined for this parameter. 
            Remark: In this case (per the Fieldbus Specification) the ‘Limits’ field indicates which limit has been exceeded but 
            does NOT necessarily imply that the value cannot move farther out of range.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_EGU_EXCEEDED in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.Subnormal">
      <summary>
            Sub-Normal.
            Substatus for UNCERTAIN Quality: The value is derived from multiple sources and has less than the required number of 
            Good sources.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_SUB_NORMAL in the OPC specification.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAStatusChoice.LocalOverride">
      <summary>
            Local Override.
            Substatus for GOOD Quality: The value has been Overridden. Typically this is means the input has been disconnected 
            and a manually entered value has been ‘forced’.
            <para><b>Remarks:</b></para><para>
            Corresponds to OPC_QUALITY_LOCAL_OVERRIDE in the OPC specification.</para></summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAStatusChoiceUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor">
      <summary>Contains information necessary to identify an OPC item, such as its Item Id.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <remarks>
            It is possible to construct this object from <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> returned by the browsing methods.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.DefaultAccessPath">
      <summary>
            Default access path. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.DefaultRequestedDataType">
      <summary>
            Default requested data type. Equals to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class, with specified item identifier, data type and access path.
             </summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
             the server's canonical data type should be used.</param>
      <param name="accessPath">An optional data path suggestion to the server.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier (may be null), browse path (may be 
            empty), data type and access path.
            </summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="accessPath">An optional data path suggestion to the server.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,System.String,OpcLabs.BaseLib.Navigation.BrowsePath,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified node path (may be null), item identifier (may be null), 
            browse path (may be empty), data type and access path.
            </summary>
      <param name="nodePath">Contains node path (empty string for the root, null reference if unknown). Only used with OPC XML.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="accessPath">An optional data path suggestion to the server.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier and data type.</summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier (may be null), browse path (may be 
            empty), and data type.
            </summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier.</summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier (may be null) and browse path (may 
            be empty).
            </summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node element, data type and access path.</summary>
      <param name="nodeElement">The node element object - contains information gathered about a node in OPC server's 
            address space.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="accessPath">An optional data path suggestion to the server.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node element, and data type.</summary>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="nodeElement">The node element object - contains information gathered about a node in OPC server's 
            address space.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node element.</summary>
      <param name="nodeElement">The node element object - contains information gathered about a node in OPC server's 
            address space.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> object.</summary>
      <param name="itemDescriptor">An item descriptor object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor.</summary>
      <param name="nodeDescriptor">An node descriptor object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor and data type.</summary>
      <param name="nodeDescriptor">An node descriptor object to be copied from.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.BaseLib.ComInterop.VarType,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor, data type and access path.
            </summary>
      <param name="nodeDescriptor">An node descriptor object to be copied from.</param>
      <param name="requestedDataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that 
            the server's canonical data type should be used.</param>
      <param name="accessPath">An optional data path suggestion to the server.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.Null">
      <summary>
            A null item descriptor (contains a null node ID and a null browse path).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.op_Equality(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.op_Implicit(System.String)~OpcLabs.EasyOpc.DataAccess.DAItemDescriptor">
      <summary>Converts a string containing an item Id to a DAItemDescriptor object.</summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a DAItemDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.op_Implicit(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)~OpcLabs.EasyOpc.DataAccess.DAItemDescriptor">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> to a DANodeDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns a DANodeDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.FromDANodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>Converts a node descriptor a DAItemDescriptor object.</summary>
      <param name="nodeDescriptor">Contains node descriptor.</param>
      <returns>Returns a DAItemDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.FromDANodeElement(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> to a DAItemDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns a DAItemDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.FromString(System.String)">
      <summary>Converts a string containing an item Id to a DAItemDescriptor object.</summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>Returns a DAItemDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.AccessPath">
      <summary>
            Specifies the access path for the OPC item. The default is "" (an empty string). 
            </summary>
      <remarks>Access paths are rarely used by OPC servers.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.RequestedDataType">
      <summary>Specifies the data type requested. Setting this property to <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that the 
            server's canonical data type should be used.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.Equals(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAItemDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.MakeArgumentString(System.Boolean)">
      <inheritdoc cref="M:OpcLabs.EasyOpc.NodeDescriptor.MakeArgumentString(System.Boolean)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.ResetRequestedDataType">
      <summary>
            Resets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.RequestedDataType" /> to its default value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.ShouldSerializeRequestedDataType">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.RequestedDataType" /> differs from its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor">
      <summary>Contains information necessary to identify an OPC Data Access node, such as its Item Id.</summary>
      <remarks>
            It is possible to construct this object from <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> returned by the browsing methods.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.DefaultItemId">
      <summary>
            Default Item Id (none, i.e. <b>null</b>).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.RootItemId">
      <summary>
            An Item Id that represents a root of the address space. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.RootNodePath">
      <summary>
            A node path that represents a root of the address space. Equals to <c>null</c>. Only used with OPC XML.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor.</summary>
      <param name="nodeDescriptor">The node descriptor object.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node element.</summary>
      <param name="nodeElement">The node element object - contains information gathered about a node in OPC server's 
            address space.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier.</summary>
      <param name="itemId">Contains OPC item identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier, and browse path.</summary>
      <param name="itemId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(System.String,System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified node path, item identifier, and browse path.</summary>
      <param name="nodePath">Contains node path (empty string for the root, null reference if unknown). Only used with OPC XML.</param>
      <param name="itemId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Null">
      <summary>
            A null node descriptor (contains a null node ID and a null browse path).
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Root">
      <summary>
            The node descriptor for the root of the address space.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.op_Equality(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.op_Inequality(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.op_Implicit(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)~OpcLabs.EasyOpc.DataAccess.DANodeDescriptor">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> to a DANodeDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns a DANodeDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.op_Implicit(System.String)~OpcLabs.EasyOpc.DataAccess.DANodeDescriptor">
      <summary>Converts a string containing an item Id to a DANodeDescriptor object.</summary>
      <param name="itemId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <returns>Returns a DANodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.FromDANodeElement(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> to a DANodeDescriptor object.</summary>
      <param name="nodeElement">Contains a node element.</param>
      <returns>Returns a DANodeDescriptor converted from the input argument.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.FromString(System.String)">
      <summary>Converts a string containing an item Id to a DANodeDescriptor object.</summary>
      <param name="itemId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <returns>Returns a DANodeDescriptor converted from the input argument.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.BrowsePathStartingNodeDescriptor">
      <inheritdoc cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePathStartingNodeDescriptor" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.ItemId">
      <summary>
            Contains OPC item identifier (empty string for the root, null reference if unknown).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Flatten">
      <summary>
            Computes an equivalent node descriptor that is flattened.
            </summary>
      <returns>Returns an equivalent node descriptor browse path is flattened.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.OpcLabs#EasyOpc#DataAccess#ComTypes#_DANodeDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.DeserializeNodeDescriptorIfPresent(System.Xml.XmlReader,System.String,System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.Equals(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.GetNodeIdArgumentName">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.SerializeNodeDescriptorIfNotNull(System.Xml.XmlWriter,System.String,System.String,OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Contains information necessary to identify an OPC property, such as its Property Id.</summary>
      <remarks>
            It is possible to construct this object from <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" /> returned by the browsing methods.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DefaultAsString">
      <summary>
            Default <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor" />, expressed as string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DefaultNamespace">
      <summary>
            Default namespace, used when the qualified name is given as a string but does not specify a namespace.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DefaultPropertyId">
      <summary>
            Default property Id. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Null" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DefaultQualifiedNameString">
      <summary>
            Default string form of the qualified name. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Initializes a new instance of the class, with specified OPC property Id.</summary>
      <param name="propertyId">Contains Id of the OPC property.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,System.String)">
      <summary>Initializes a new instance of the class, with specified OPC property Id and qualified name.</summary>
      <param name="propertyId">Contains Id of the OPC property.</param>
      <param name="qualifiedNameString">The qualified name for this property (used with OPC XML-DA).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyId,OpcLabs.BaseLib.Xml.XmlQualifiedName2)">
      <summary>Initializes a new instance of the class, with specified OPC property Id and qualified name.</summary>
      <param name="propertyId">Contains Id of the OPC property.</param>
      <param name="qualifiedName">The qualified name for this property (used with OPC XML-DA).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor" /> object.</summary>
      <param name="propertyDescriptor">A property descriptor object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <summary>Initializes a new instance of the class, from specified property element.</summary>
      <param name="propertyElement">The property element object - contains information gathered about an OPC property.
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(System.String)">
      <summary>Initializes a new instance of the class, with specified qualified name or property Id as a string.</summary>
      <param name="propertyString">The qualified name for this property (used with OPC XML-DA), or property Id as a string.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(OpcLabs.BaseLib.Xml.XmlQualifiedName2)">
      <summary>Initializes a new instance of the class, with specified qualified name.</summary>
      <param name="qualifiedName">The qualified name for this property (used with OPC XML-DA).</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DefaultQualifiedName">
      <summary>
            Default qualified name (used with OPC XML-DA). Empty.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Null">
      <summary>
            A null property descriptor.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DataType">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DataType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Value">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Value" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Quality">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Quality" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Timestamp">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Timestamp" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.AccessRights">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AccessRights" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ScanRate">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ScanRate" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.EUType">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.EUInfo">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUInfo" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.EUUnits">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.EUUnits" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Description">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Description" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.HighEU">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighEU" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.LowEU">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowEU" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.HighIR">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighIR" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.LowIR">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowIR" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.CloseLabel">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.CloseLabel" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.OpenLabel">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.OpenLabel" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.TimeZone">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TimeZone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.MinimumValue">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.MinimumValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.MaximumValue">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.MaximumValue" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ValuePrecision">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ValuePrecision" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ConditionStatus">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionStatus" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.AlarmQuickHelp">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmQuickHelp" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.AlarmAreaList">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.AlarmAreaList" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PrimaryAlarmArea">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.PrimaryAlarmArea" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ConditionLogic">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConditionLogic" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.LimitExceeded">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LimitExceeded" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Deadband">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Deadband" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.HighHighLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighHighLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.HighLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.HighLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.LowLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.LowLowLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.LowLowLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ChangeRateLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ChangeRateLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DeviationLimit">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DeviationLimit" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.SoundFile">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.SoundFile" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.TypeSystemId">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeSystemId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DictionaryId">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DictionaryId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.TypeId">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Dictionary">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.Dictionary" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.TypeDescription">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.TypeDescription" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ConsistencyWindow">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.ConsistencyWindow" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.WriteBehavior">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.WriteBehavior" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.UnconvertedItemId">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.UnconvertedItemId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.UnfilteredItemId">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.UnfilteredItemId" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DataFilterValue">
      <inheritdoc cref="F:OpcLabs.EasyOpc.DataAccess.DAPropertyIds.DataFilterValue" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Equality(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="id1">First object to be compared.</param>
      <param name="id2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="id1">First object to be compared.</param>
      <param name="id2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts a property element to a DAPropertyDescriptor object.</summary>
      <param name="propertyElement">Contains OPC property element.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAPropertyId)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts a property Id to a DAPropertyDescriptor object.</summary>
      <param name="propertyId">Contains OPC property identifier.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts an enumerated property Id to a DAPropertyDescriptor object.</summary>
      <param name="propertyIds">Contains an enumerated OPC property identifier.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(System.Int64)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts a numerical property Id value to a DAPropertyDescriptor object.</summary>
      <param name="value">Numerical property Id to be converted.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(System.String)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts a qualified name or property Id as a string to a DAPropertyDescriptor object.</summary>
      <param name="propertyString">Contains the qualified name or property Id as a string of the OPC property.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.op_Implicit(System.Xml.XmlQualifiedName)~OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor">
      <summary>Converts a qualified name to a DAPropertyDescriptor object.</summary>
      <param name="qualifiedName">Contains the qualified name of the OPC property.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromDAPropertyElement(OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement)">
      <summary>Converts a property element to a DAPropertyDescriptor object.</summary>
      <param name="propertyElement">Contains OPC property element.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromDAPropertyId(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>Converts a property Id to a DAPropertyDescriptor object.</summary>
      <param name="propertyId">Contains OPC property identifier.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromDAPropertyIds(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <summary>Converts an enumerated property Id to a DAPropertyDescriptor object.</summary>
      <param name="propertyIds">Contains an enumerated OPC property identifier.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromInt64(System.Int64)">
      <summary>Converts a numerical property Id value to a DAPropertyDescriptor object.</summary>
      <param name="value">Numerical property Id to be converted.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromString(System.String)">
      <summary>Converts a qualified name or a property Id as a string to a DAPropertyDescriptor object.</summary>
      <param name="propertyString">Contains the qualified name or the property Id as a string of the OPC property.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>Converts a qualified name to a DAPropertyDescriptor object.</summary>
      <param name="qualifiedName">Contains the qualified name of the OPC property.</param>
      <returns>Returns a DAPropertyDescriptor converted from the input argument.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ParseQualifiedName(System.String)">
      <summary>
            Parses a string representing a XML qualified name of OPC-DA property (used with OPC XML).
            </summary>
      <param name="s">The qualified name string for an OPC-DA property, with or without a namespace.</param>
      <returns>The XML qualified name parsed from the string.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.IsNull">
      <summary>
            Determines whether the property descriptor is null, i.e. specifies neither property ID.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PropertyId">
      <summary>
            The Property ID of the OPC property.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedName">
      <summary>The qualified name for this property (used with OPC XML-DA).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedNameString">
      <summary>The string form of the qualified name for this property (used with OPC XML-DA).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Equals(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor" /> is equal to the current object.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.MakeArgumentString(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
      <param name="informativeOnly">Indicates whether an incomplete argument string with just the most important 
            information may be returned.</param>
      <returns>An argument string that represents the property descriptor.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ToString">
      <summary>Returns a string describing the contents of the property descriptor.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PropertyChanged">
      <summary>
            This event is raised when a property is changed on a component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ReadStringList(System.Collections.Generic.IList{System.String})">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAPropertyDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyDescriptor.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ResetPropertyId">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PropertyId" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ShouldSerializePropertyId">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.PropertyId" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ResetQualifiedName">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedName" /> property to its default value.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.ShouldSerializeQualifiedName">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor.QualifiedName" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> interface.
            </summary>
      <remarks>
        <para>
            NOTE: This class is intentionally *not* placed in the <c>Extensions</c> namespace, but rather alongside the 
            extendee. The extension methods in this class are commonly used, and from the point of view of the developer,
            can be considered as part of the interface. In addition, this placement allows less namespaces references in typical
            projects, and better consistency with the COM interfaces (as only methods from this extension class may appear
            in the COM interfaces).</para>
        <para>
            Other extension classes may exist as well.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <overloads>
        <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
          <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
            Reads a named item using an item arguments objects, and read parameters.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArguments">Holds an OPC server and item descriptor.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a named item using an object that holds all necessary arguments.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="readItemArguments">Arguments specifying what to read from an OPC-DA server.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Reads a named item using descriptor objects for the OPC server and OPC-DA item.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
             and quality of the OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Reads a named item using descriptor objects for the OPC server and OPC-DA item, and specifying read
            parameters such as the data source or value age.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">Read parameters, such as the data source or value age.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Reads a named item using individual parameters specifying its location, and a specific data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be returned in server's canonical data type.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.BrowsePath.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.BrowsePath.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.BrowsePath.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Reads a named item using individual parameters specifying its location, a specific data type,
            and value age.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be returned in server's canonical data type.</param>
      <param name="valueAge">The age of value you would like to obtain (in milliseconds).</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <remarks>
        <para>
            The data source (a device, OPC server's cache, or a value from OPC client component memory cache) is dynamically 
            determined based on the valueAge argument.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
             Reads a named item from an OPC server. Value, quality and timestamp are returned. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>The ReadItem method only waits for the first update from the server (or until the timeout elapses); it does 
             not wait until the quality becomes "uncertain" or "good". </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a named item using individual parameters specifying its location, and using server's canonical data type. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>If successful, the function returns a <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> object. The object contains the value, timestamp 
            and quality of the OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.GetTypeCode.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.GetTypeCode.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <overloads>
        <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
          <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
          <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>
             Reads a value of a named item using an item arguments objects, and read parameters.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArguments">Holds an OPC server and item descriptor.</param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of a named item using an object that holds all necessary arguments.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="readItemArguments">Arguments specifying what to read from an OPC-DA server.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of named item using descriptor objects for the OPC server and OPC-DA item. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of named item using descriptor objects for the OPC server and OPC-DA item, and specifying read
            parameters such as the data source or value age.. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="readParameters">Read parameters, such as the data source or value age.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <remarks>
        <para>
            The data source (a device, OPC server's cache, or a value from OPC client component memory cache) is determined 
            based on the <paramref name="readParameters" /> argument.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of named item using individual parameters specifying its location, and a specific data type. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be returned in server's canonical data type.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of named item using individual parameters specifying its location, a specific data type, and value 
            age. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be returned in server's canonical data type.</param>
      <param name="valueAge">The age of value you would like to obtain (in milliseconds).</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <remarks>
        <para>
            The data source (a device, OPC server's cache, or a value from OPC client component memory cache) is dynamically 
            determined based on the <paramref name="valueAge" /> argument.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
             Reads a named item from an OPC server. Only the item value is returned (quality and timestamp are not returned).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        <para>Use this method if you are only interested in the actual value of the OPC item. Use ReadItem
             method if you also need the quality or timestamp. The ReadItemValue method makes it very easy 
             to obtain the actual data value with just one function call. </para>
        <para>The ReadItemValue method waits until the quality becomes "good", or the timeout elapses. </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>
            Reads a value of named item using individual parameters specifying its location, using server's canonical data type. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <returns>If successful, the function returns the actual value of OPC item requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Array.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.Array.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.Array.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments[],OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <overloads>
            Reads named items from an OPC server or OPC servers. Values, qualities and timestamps are returned. 
            </overloads>
      <remarks>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or
            a specific data type can be requested.</para>
        <para>The ReadMultipleItems method only waits for the first update from the server (or until the timeout elapses)
            for each item; it does not wait until the quality becomes "uncertain" or "good". The function performs all 
            individual operations in parallel, but only returns after all individual operations are completed (or their timeouts 
            elapse).
            </para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
            related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
            </para>
      </remarks>
      <summary>
            Reads multiple named items from a single OPC server, using item arguments objects, and common read parameters. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArgumentsArray">Array of item arguments objects (determine the OPC server and an OPC-DA item).
            </param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="itemArgumentsArray" />.</returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor[])">
            Reads named items from an OPC server or OPC servers. Values, qualities and timestamps are returned. 
            <summary>
            Reads multiple named items from a single OPC server, using descriptor objects for the OPC server and OPC-DA items. 
            </summary><param name="client">The client object that will perform the operation.</param><param name="serverDescriptor">The OPC server involved in the operation.</param><param name="itemDescriptorArray">Array of OPC items involved in the operation.</param><returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="itemDescriptorArray" />.</returns><remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.TimeMeasurements.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.TimeMeasurements.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor[],OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
            Reads named items from an OPC server or OPC servers. Values, qualities and timestamps are returned. 
            <summary>
            Reads multiple named items from a single OPC server, using descriptor objects for the OPC server and OPC-DA items,
            and specifying read operation parameters. 
            </summary><param name="client">The client object that will perform the operation.</param><param name="serverDescriptor">The OPC server involved in the operation.</param><param name="itemDescriptorArray">Array of OPC items involved in the operation.</param><param name="readParameters">Contains parameters for OPC read operations, such as the data source or value age.
            </param><returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="itemDescriptorArray" />.</returns><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments[],OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <overloads>
        <summary>
             Reads named items from an OPC server or OPC servers. Only the item values are returned (qualities and timestamps are 
             not returned).
             </summary>
        <remarks>
          <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or 
             a specific data type can be requested.</para>
          <para>The ReadMultipleItemValues method requires that the quality is "good" for each item. The function performs
             all individual operations in parallel, but only returns after all individual operations are completed (or their
             timeouts elapse).  
             </para>
          <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
             </para>
        </remarks>
      </overloads>
      <summary>
             Reads multiple named item values, using item arguments objects, and common read parameters. 
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemArgumentsArray">Array of item arguments objects (determine the OPC server and an OPC-DA item).
             </param>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
             in the output array are the same as those in the input array, <paramref name="itemArgumentsArray" />.</returns>
      <remarks>
             The size of the input array will become the size of the output array. The element positions (indices) in the output 
             array are the same as in the input array. 
             </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])">
      <summary>
             Reads named items from an OPC server or OPC servers. Only the item values are returned (qualities and timestamps are 
             not returned).
             </summary>
      <remarks>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or 
             a specific data type can be requested.</para>
        <para>The ReadMultipleItemValues method requires that the quality is "good" for each item. The function performs
             all individual operations in parallel, but only returns after all individual operations are completed (or their
             timeouts elapse).  
             </para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
             </para>
      </remarks>
      <summary>
            Reads multiple named item values from a single OPC server, using array of argument objects as an input. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="argumentsArray">Array of arguments, one element per each OPC item involved in the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="argumentsArray" />.</returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItemValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor[])">
      <summary>
             Reads named items from an OPC server or OPC servers. Only the item values are returned (qualities and timestamps are 
             not returned).
             </summary>
      <remarks>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or 
             a specific data type can be requested.</para>
        <para>The ReadMultipleItemValues method requires that the quality is "good" for each item. The function performs
             all individual operations in parallel, but only returns after all individual operations are completed (or their
             timeouts elapse).  
             </para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
             </para>
      </remarks>
      <summary>
            Reads multiple named item values from a single OPC server, using descriptor objects for the OPC server and OPC-DA 
            items. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptorArray">Array of OPC items involved in the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="itemDescriptorArray" />.</returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItemValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ReadMultipleItemValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor[],OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Reads named items from an OPC server or OPC servers. Only the item values are returned (qualities and timestamps are 
             not returned).
             </summary>
      <remarks>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or 
             a specific data type can be requested.</para>
        <para>The ReadMultipleItemValues method requires that the quality is "good" for each item. The function performs
             all individual operations in parallel, but only returns after all individual operations are completed (or their
             timeouts elapse).  
             </para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
             </para>
      </remarks>
      <summary>
            Reads multiple named item values from a single OPC server, using descriptor objects for the OPC server and OPC-DA 
            items, and specifying read operation parameters. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptorArray">Array of OPC items involved in the operation.</param>
      <param name="readParameters">Contains parameters for OPC read operations, such as the data source or value age.
            </param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="itemDescriptorArray" />.</returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItemValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItemValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments)">
      <overloads>
        <summary>
             Gets a value of OPC property of a specified OPC item. 
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>Gets a value of OPC property using an object that holds all necessary arguments. </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="propertyArguments">Arguments specifying the property to get from the OPC DA server.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>
             Gets a value of OPC property of a specified OPC item. 
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Gets a value of OPC property, using descriptor object for the OPC server, and a node descriptor. </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptor">The descriptor of the OPC property involved in the operation.</param>
      <returns>If successful, the function returns the actual value of the OPC property requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetPropertyValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <summary>
             Gets a value of OPC property of a specified OPC item. 
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Gets a value of OPC property, using individual parameters specifying the OPC server, and OPC Item ID.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyId">The Property ID of the OPC property being obtained</param>
      <returns>If successful, the function returns the actual value of the OPC property requested.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetPropertyValue.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetPropertyValue.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor[])">
      <overloads>
        <summary>
             Gets values of multiple OPC properties of a specified OPC item. 
             </summary>
        <remarks>
          <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each property is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> element.
             </para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.ps1" lang="PowerShell" region="Example" />
        </example>
      </overloads>
      <summary>
             Gets values of multiple OPC properties, using descriptor objects for the OPC server and node, and specifying 
             an array of property descriptors. 
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyDescriptorArray">Array of OPC properties involved in the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
             in the output array are the same as those in the input array.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\GetMultiplePropertyValues.DataTypeXml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.GetMultiplePropertyValues.DataTypeXml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\GetMultiplePropertyValues.DataTypeXml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor[],OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <summary>
             Gets values of multiple OPC properties of a specified OPC item. 
             </summary>
      <remarks>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each property is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> element.
             </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <summary>
            Gets values of multiple OPC properties, using descriptor objects for the OPC server and property, and specifying 
            an array of node descriptors. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptorArray">Array of the OPC nodes involved in the operation.</param>
      <param name="propertyDescriptor">The OPC property involved in the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array.</returns>
      <remarks>
            Gets the same property from all the nodes.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.DataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.DataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.DataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\GetMultiplePropertyValues.DataTypeXml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.GetMultiplePropertyValues.DataTypeXml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\GetMultiplePropertyValues.DataTypeXml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])">
      <summary>
             Gets values of multiple OPC properties of a specified OPC item. 
             </summary>
      <remarks>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each property is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> element.
             </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <summary>
            Gets values of multiple OPC properties, using descriptor object for the OPC server, and a node descriptor. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">The descriptor of the OPC node involved in the operation.</param>
      <param name="propertyIdArray">Array of Property IDs being obtained</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array.</returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyId[])">
      <summary>
             Gets values of multiple OPC properties of a specified OPC item. 
             </summary>
      <remarks>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
             related to each property is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> element.
             </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.GetMultiplePropertyValues.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\GetMultiplePropertyValues.Main1.ps1" lang="PowerShell" region="Example" />
      </example>
      <summary>
            Gets values of multiple OPC properties, using individual parameters specifying the OPC server, and OPC Item ID. 
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to read from.</param>
      <param name="itemId">The Item ID of the OPC item involved in the operation.</param>
      <param name="propertyIdArray">Array of Property IDs being obtained</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <overloads>
        <summary>
             Writes into a named item in an OPC server. Value, quality and timestamp are written. 
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        </example>
        <example>
          <h3>COM</h3>
          <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
          <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
        </example>
      </overloads>
      <summary>Writes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> into a named item using descriptor objects for the OPC server and OPC-DA item.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAVtq,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Writes into a named item in an OPC server. Value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Writes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> into a named item using individual parameters specifying its location, and 
            a specific data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
      <param name="dataType">Specifies the data type. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be written using server's canonical data type.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Writes into a named item in an OPC server. Value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Writes <see cref="T:OpcLabs.EasyOpc.DataAccess.DAVtq" /> into a named item using individual parameters specifying its location, and using
            server's canonical data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="vtq">The object containing the value, timestamp and quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Writes into a named item in an OPC server. Value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Writes separately given value, timestamp and quality into a named item using individual parameters 
            specifying its location, and a specific data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <param name="dataType">Specifies the data type. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be written using server's canonical data type.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Object,System.DateTime,OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <summary>
             Writes into a named item in an OPC server. Value, quality and timestamp are written. 
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\WriteItem.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Writes separately given value, timestamp and quality into a named item using individual parameters 
            specifying its location, and using server's canonical data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <param name="timestamp">The timestamp to be written.</param>
      <param name="quality">The quality to be written.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments)">
      <overloads>
        <summary>
             Writes a value into a named item in an OPC server. Only the item value is written (quality and timestamp are not 
             written).
             </summary>
        <remarks>
          <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
        </remarks>
      </overloads>
      <summary>Writes a value into a named item using an object that holds all necessary arguments.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemValueArguments">Arguments specifying what and how to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,System.Object)">
      <summary>
             Writes a value into a named item in an OPC server. Only the item value is written (quality and timestamp are not 
             written).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a value into a named item using descriptor objects for the OPC server and OPC-DA item.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item involved in the operation.</param>
      <param name="value">The value to be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Object,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Writes a value into a named item in an OPC server. Only the item value is written (quality and timestamp are not 
             written).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a value into a named item using individual parameters specifying its location, and 
            a specific data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an 
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <param name="dataType">Specifies the data type. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause the value 
            be written using server's canonical data type.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItemValue.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.WriteItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Object)">
      <summary>
             Writes a value into a named item in an OPC server. Only the item value is written (quality and timestamp are not 
             written).
             </summary>
      <remarks>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
             specific data type can be requested.</para>
      </remarks>
      <summary>Writes a value into a named item using individual parameters specifying its location, and using
            server's canonical data type.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine. Determines the computer on which the OPC server is located. May be an
            empty string, in which case the OPC server is assumed to exist on the local computer or at the computer specified 
            for it by DCOM configuration.</param>
      <param name="serverClass">Contains ProgID of the OPC server to write into.</param>
      <param name="itemId">Contains OPC item identifier.</param>
      <param name="value">The value to be written.</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItemValue.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.Array.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteItemValue.Array.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteItemValue.Array.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\WriteItemValue.Main1Xml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.WriteItemValue.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\WriteItemValue.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseServers(OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <overloads>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        </example>
        <example>
          <h3>COM</h3>
          <code source="..\..\Native\Examples\JScript\WSH\DocExamples\_EasyDAClient\BrowseServers.Main.js" lang="JScript" region="Example" />
          <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main.php" lang="PHP" title="PHP" region="Example" />
          <code source="..\..\Native\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Com.BrowseServers.Main.py" lang="Python" title="Python (COM)" region="Example" />
          <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
        </example>
      </overloads>
      <summary>
             Browses the local computer and returns information about OPC (Data Access) servers found.  
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
             about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
             CLSIDs.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseServers(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String)">
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseServers.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\JScript\WSH\DocExamples\_EasyDAClient\BrowseServers.Main.js" lang="JScript" region="Example" />
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Com.BrowseServers.Main.py" lang="Python" title="Python (COM)" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseServers.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>
            Browses the specified computer and returns information about OPC (Data Access) servers found.  
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="location">Name of the machine. Determines the computer to browse for OPC servers. May be an empty 
            string, in which case the local computer will be browsed.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
            about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
            CLSIDs.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String,System.String)">
      <overloads>
        <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        </example>
        <example>
          <h3>COM</h3>
          <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
        </example>
      </overloads>
      <summary>Browse for child branches. Specify server descriptor, element name filter and vendor filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
             filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
             about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches. Specify server descriptor, and element name filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches. Specify server descriptor.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches at the root. Specify server descriptor.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches. Specify machine name, server class, element name filter and vendor filter.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a dictionary of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information about
            a particular branch found. The keys of the dictionary are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches. Specify machine name, server class, and element name filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches. Specify machine name, and server class.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseBranches(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child branches 
             found.
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseBranches.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseBranches.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child branches at the root. Specify machine name, and server class.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular branch found. The keys of the keyed collection are the names of the branches.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String,System.String)">
      <overloads>
        <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        </example>
        <example>
          <h3>COM</h3>
          <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
        </example>
      </overloads>
      <summary>Browse for child leaves. Specify server descriptor, element name filter and vendor filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
             filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
             about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves. Specify server descriptor, and element name filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves. Specify server descriptor.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves at the root. Specify server descriptor.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves. Specify machine name, server class, element name filter and vendor filter.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves. Specify machine name, server class, and element name filter.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves. Specify machine name, and server class.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseLeaves(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String)">
      <summary>
             Browses the specified branch (or root) in OPC server's address space, and returns information about child leaves 
             found.  
             </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseLeaves.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseLeaves.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <summary>Browse for child leaves at the root. Specify machine name, and server class.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular leaf found. The keys of the keyed collection are the names of the leaves.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseNodes(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
        <para>
            Browses the specified branch (or root) in OPC server's address space, and returns information about child nodes 
            (both branches and leaves) found.</para>
        <para>
            Browse for child nodes. Specify machine name, server class, parent item ID, and node filter.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="parentItemId">ID of the parent branch to be browsed (empty string for root)</param>
      <param name="browseParameters">Contains filtering conditions.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular node found. The keys of the keyed collection are the names of the nodes.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Recursive.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.Recursive.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Recursive.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.RecursiveWithRead.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.RecursiveWithRead.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.RecursiveWithRead.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\BrowseNodes.RecursiveXml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.BrowseNodes.RecursiveXml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\BrowseNodes.RecursiveXml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseAccessPaths(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
        <para>
            Browses the possible access paths of a specified OPC item.</para>
        <para>
            Browse for access paths. Specify machine name, server class, and item ID.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="itemId">ID of the item for which the access paths will be browsed.</param>
      <returns>The method returns an array of possible access paths to the item. You can use the returned access path e.g.
            as the AccessPath property of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> object.</returns>
      <remarks>Most OPC servers do not use access paths.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.BrowseProperties(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String)">
      <summary>
        <para>
            Browses the available properties of a specified OPC item.  </para>
        <para>
            Browse for available item properties. Specify machine name, server class, and item ID.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server to browse.</param>
      <param name="itemId">ID of the item for which the properties will be browsed.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" /> values, each containing 
            information about a particular property found. The keys of the keyed collection are the IDs of the properties.
            </returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseProperties.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\BrowseProperties.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseProperties.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\OP\DocExamples\DataAccess\_EasyDAClient\BrowseProperties.Main.inc" language="ObjectPascal" lang="Object Pascal" title="Object Pascal" region="Example" />
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\BrowseProperties.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\DataAccess_EasyDAClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example BrowseProperties.Main" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseProperties.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <overloads>
        <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
        <remarks>
          <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
        </remarks>
        <example>
          <h3>.NET</h3>
          <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
          <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
          <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
          <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
        </example>
      </overloads>
      <summary>Subscribe to OPC item using an object that holds all necessary arguments, including an optional
             callback.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="easyItemSubscriptionArguments">Arguments specifying how to subscribe to an OPC DA item.</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item using an object that holds all necessary arguments.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArguments">Arguments specifying how to subscribe to an OPC DA item.</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item using an object that holds all necessary arguments, and an optional
            callback.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArguments">Arguments specifying how to subscribe to an OPC DA item.</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify server and item descriptors, group parameters object,
            callback method, and a user-defined state object.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item to be subscribed to.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DAItemDescriptor,OpcLabs.EasyOpc.DataAccess.DAGroupParameters,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify server and item descriptors, and group parameters object.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="itemDescriptor">The OPC item to be subscribed to.</param>
      <param name="groupParameters">An object containing subscription parameters, such as the requested update rate.
            </param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, data type, requested update rate,
            percent deadband, callback method, and a user-defined state object.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that the 
            server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.PercentDeadband.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.PercentDeadband.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Single,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, data type, requested update rate,
            and percent deadband.</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that the 
            server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.PercentDeadband.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.PercentDeadband.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, data type, requested update rate,
            callback method, and a user-supplied state object.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that the 
            server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,System.Int32,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, data type, and requested update rate.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="dataType">Specifies the data type requested. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> means that the 
            server's canonical data type should be used.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, requested update rate, callback
            method, and and a state object.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32,OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, requested update rate, and a callback
            method.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <remarks>If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.CallbackLambda.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.CallbackMethod.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.CallbackLambda.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\SubscribeItem.CallbackLambdaXml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.SubscribeItem.CallbackMethodXml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\SubscribeItem.CallbackLambdaXml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32,System.Object)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, requested update rate, and a state
            object.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <param name="state">The state object (can be any object supplied by your code); available in event notifications.
            </param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.String,System.String,System.String,System.Int32)">
      <summary>
             Subscribe to changes of a particular OPC item. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event is generated 
             for each significant item change.
             </summary>
      <remarks>
        <para>It is more efficient to subscribe to multiple items using the <c>SubscribeMultipleItems</c> method.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <summary>Subscribe to OPC item. Specify machine name, server class, item ID, and requested update rate.
            No state object is specified (this overload is suitable for simple scenarios only).</summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="machineName">Name of the machine (empty string for local computer).</param>
      <param name="serverClass">Contains ProgID of the OPC server.</param>
      <param name="itemId">ID of the item that will be subscribed to.</param>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds)</param>
      <returns>The method returns an integer handle that uniquely identifies the item subscription.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\Xml\SubscribeItem.Main1Xml.ps1" lang="PowerShell" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments[])">
      <overloads>
        <summary>Subscribe to changes of multiple OPC items. </summary>
      </overloads>
      <summary>
             Subscribe to changes of multiple OPC items. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event will be generated 
             for each significant item change. No callback methods will be invoked.
             </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsArray">Array of arguments, one element per each OPC item involved in the operation.
             </param>
      <returns>The function returns an array of integer handles. Each such uniquely identifies the item subscription. 
             The indices of elements in the output array are the same as those in the input array, 
             <paramref name="itemGroupArgumentsArray" />.</returns>
      <remarks>
             The size of the input array will become the size of the output array. The element positions (indices) in the output 
             array are the same as in the input array. 
             </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.ManyItems.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.ManyItems.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.ManyItems.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.UnsubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments[],OpcLabs.EasyOpc.DataAccess.EasyDAItemChangedEventHandler)">
      <summary>Subscribe to changes of multiple OPC items. </summary>
      <summary>
            Subscribe to changes of multiple OPC items with a callback method. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> 
            event will be generated for each significant item change, and a specified callback method will be invoked.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="itemGroupArgumentsArray">Array of arguments, one element per each OPC item involved in the operation.
            </param>
      <param name="callback">A callback method to be invoked for each significant item change.</param>
      <returns>The function returns an array of integer handles. Each such uniquely identifies the item subscription. The 
            indices of elements in the output array are the same as those in the input array, 
            <paramref name="itemGroupArgumentsArray" />.</returns>
      <remarks>
        <para>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. </para>
        <para>
            If <paramref name="callback" /> is a null reference, only the 
            <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> events are generated, 
            but no callback method is invoked.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ChangeItemSubscription(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments)">
      <overloads>
            Changes parameters of a subscription to a particular OPC item.
            <remarks><para>It is more efficient to change multiple subscriptions using 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])" /> method.</para></remarks><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ChangeItemSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.ChangeItemSubscription.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example></overloads>
      <summary>Changes parameters of a subscription. Specify an object holding the handle and group parameters.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="handleGroupArguments">Holds an integer handle, and OPC group parameters</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.ChangeItemSubscription(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Int32,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
            Changes parameters of a subscription to a particular OPC item.
            <remarks><para>It is more efficient to change multiple subscriptions using 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])" /> method.</para></remarks><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ChangeItemSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.ChangeItemSubscription.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><summary>Changes parameters of a subscription. Specify handle and group parameters.
            </summary><param name="client">The client object that will perform the operation.</param><param name="handle">Item subscription handle as returned by the SubscribeItem method</param><param name="groupParameters">An object containing new parameters of the subscription</param><remarks><para>It is more efficient to change multiple subscriptions using 
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])" /> method.</para></remarks><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ChangeItemSubscription.Main1.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.PercentDeadband.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ChangeItemSubscription.PercentDeadband.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeItemSubscription.PercentDeadband.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><example><h3>.NET</h3><code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.cs" lang="CSharp" title="C#" region="Example" /><code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.ChangeItemSubscription.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" /><code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\ChangeItemSubscription.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" /></example><exception cref="T:System.ArgumentException"><para>
             One of the arguments provided to a method is not valid.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception><exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.UnsubscribeItem(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Int32)">
      <summary>
        <para>
            Unsubscribe from changes of a particular OPC item.  </para>
        <para>
            Unsubscribe from OPC item, specifying its handle.</para>
      </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="handle">Item subscription handle as returned by the SubscribeItem method</param>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeItem.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.UnsubscribeItem.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeItem.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <remarks>
        <para>It is more efficient to unsubscribe from multiple items using UnsubscribeMultipleItems method.
            </para>
        <para>The item subscription handle becomes invalid after this method is called.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.PullItemChanged(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,System.Int32)">
      <summary>
            Attempts to pull an OPC item change subscribed to by the <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" /> or
            SubscribeItem method.
            </summary>
      <param name="client">The client object that will perform the operation.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The event arguments, or <c>null</c> if no event is available within the specified time.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.PullItemChanged.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.MultipleItems.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.MultipleItems.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.PullItemChanged.MultipleItems.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\PullItemChanged.Main1Xml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\PullItemChanged.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient">
      <summary>
            Allows simple access to OPC Data Access servers.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.PullItemChangedQueueCapacity">
      <summary>
            Capacity of the event pull queue for item changes.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.PullItemChanged.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VB\VB60\DocExamples\DataAccess_EasyDAClientForm.frm" language="VB" lang="Visual Basic (VB 6.0)" title="Visual Basic (VB 6.0)" region="Example GetMultiplePropertyValues.Main" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.MultipleItems.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\PullItemChanged.MultipleItems.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.PullItemChanged.MultipleItems.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\PullItemChanged.Main1Xml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.PullItemChanged.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\PullItemChanged.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SupportedTechnologies">
      <summary>
            Gets the OPC technologies supported.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetItemSubscriptionArguments(System.Int32)">
      <summary>
            Obtains parameters of specified item subscription.
            </summary>
      <param name="handle">Item subscription handle as returned by the subscription method.</param>
      <returns>Returns an object that holds all information pertaining to the item subscription: 
            server descriptor, item descriptor, and group parameters.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.IsKnownItemSubscriptionHandle(System.Int32)">
      <summary>
            Determines whether the given item subscription handle is known to this client.
            </summary>
      <param name="handle">The item subscription handle to be tested.</param>
      <returns>Returns <c>true</c> if the given handle is known to the client (i.e. represents a currently subscribed item).
            Otherwise, returns <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ReadMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments[])">
      <summary>
            Reads multiple named items from an OPC server or OPC servers, using array of argument objects as an input.
            Values, qualities and timestamps are returned. 
            </summary>
      <param name="argumentsArray">Array of arguments, one element per each OPC item involved in the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> objects. The indices of elements
            in the output array are the same as those in the input array, <paramref name="argumentsArray" />.</returns>
      <remarks>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or
            a specific data type can be requested.</para>
        <para>The ReadMultipleItems method only waits for the first update from the server (or until the timeout elapses)
            for each item; it does not wait until the quality becomes "uncertain" or "good". The function performs all 
            individual operations in parallel, but only returns after all individual operations are completed (or their timeouts 
            elapse).
            </para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
            related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult" /> element.
            </para>
        <para>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.Main.php" lang="PHP" title="PHP" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\ReadMultipleItems.Main1Xml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\Xml\ReadMultipleItems.Main1Xml.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.ReadMultipleItems.Main1Xml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\ReadMultipleItems.Main1Xml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.WithRead.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.WithRead.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.GetMultiplePropertyValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments[])">
      <summary>
            Gets values of multiple OPC properties, specifying an array of property arguments objects. 
            </summary>
      <param name="argumentsArray">Array of arguments, one element per each OPC property involved in the operation.
            </param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.ValueResult" /> objects. The indices of elements
            in the output array are the same as those in the input array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments[])">
      <summary>
            Writes named items into an OPC server or OPC servers. Values, qualities and timestamps are written. 
            </summary>
      <param name="argumentsArray">Array of argument objects for the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.OperationResult" /> objects. The indices of elements
            in the output array are the same as those in the input arrays.</returns>
      <remarks>
        <para>The size of the input array will become the size of the output array. The element positions (indices) in the 
            output array are the same as in the input array. </para>
        <para>The servers can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or 
            a specific data type can be requested.</para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
            related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.OperationResult" /> element.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItems.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.WriteMultipleItemValues(OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments[])">
      <summary>
            Writes values into named items in an OPC server or OPC servers. Only the item values are written (qualities and 
            timestamp are not written).
            </summary>
      <param name="argumentsArray">Array of argument objects for the operation.</param>
      <returns>The function returns an array of <see cref="T:OpcLabs.BaseLib.OperationModel.OperationResult" /> objects. The indices of elements
            in the output array are the same as those in the input arrays.</returns>
      <remarks>
        <para>The size of the input array will become the size of the output array. The element positions (indices) in the 
            output array are the same as in the input array. </para>
        <para>The server can be local or can be remotely accessed via DCOM. Optionally, an access path can be specified or a 
            specific data type can be requested.</para>
        <para>This method does not throw an exception in case of OPC operation failures. Instead, the eventual exception
            related to each item is returned in Exception property of each returned <see cref="T:OpcLabs.BaseLib.OperationModel.OperationResult" /> element.
            </para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.Main.php" lang="PHP" title="PHP" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.WriteMultipleItemValues.RequestedDataType.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.RequestedDataType.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.TimeMeasurements.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\WriteMultipleItemValues.TimeMeasurements.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseServers(System.String,OpcLabs.EasyOpc.OpcTechnologies)">
      <summary>
            Browses the specified computer and returns information about OPC (Data Access) servers found.
            </summary>
      <param name="location">Name of the machine. Determines the computer to browse for OPC servers. May be an empty 
            string, in which case the local computer will be browsed.</param>
      <param name="technologies">The OPC technologies to be used for server browsing.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.ServerElement" /> values, each containing information 
            about a particular OPC server found on the specified machine. The keys of the keyed collection are the server's 
            CLSIDs.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseNodes(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
            Browses the specified branch (or root) in OPC server's address space, and returns information about child nodes 
            (both branches and leaves) found. Specify server descriptor, parent item ID, and node filter.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="parentNodeDescriptor">Descriptor for the parent branch to be browsed (can be the root).</param>
      <param name="browseParameters">Contains filtering conditions.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement" /> values, each containing information 
            about a particular node found. The keys of the keyed collection are the names of the nodes.</returns>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.DataTypes.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.DataTypes.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.DataTypes.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Recursive.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.Recursive.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.Recursive.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.RecursiveWithRead.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseNodes.RecursiveWithRead.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseNodes.RecursiveWithRead.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\Xml\BrowseNodes.RecursiveXml.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\Xml\Net.BrowseNodes.RecursiveXml.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\Xml\BrowseNodes.RecursiveXml.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseAccessPaths(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>
            Browses the possible access paths of a specified OPC item. Specify server descriptor, and node descriptor.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">Descriptor of the node for which the access paths will be browsed.</param>
      <returns>The method returns an array of possible access paths to the item. You can use the returned access path e.g.
            as the AccessPath property of <see cref="T:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor" /> object.</returns>
      <remarks>
        <para>
            Most OPC servers do not use access paths.</para>
        <para>
            Using implicit conversions, you can pass an item ID in place of node descriptor.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\BrowseAccessPaths.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.BrowseAccessPaths.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\BrowseAccessPaths.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.BrowseProperties(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <summary>Browse for available item properties of a specified OPC item. Specify server descriptor, and node descriptor.</summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
      <param name="nodeDescriptor">Descriptor of the node for which the properties will be browsed.</param>
      <returns>The method returns a keyed collection of <see cref="T:OpcLabs.EasyOpc.DataAccess.AddressSpace.DAPropertyElement" /> values, each containing 
            information about a particular property found. The keys of the keyed collection are the IDs of the properties.
            </returns>
      <remarks>Using implicit conversions, you can pass an item ID in place of node descriptor.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])">
      <summary>
            Subscribe to changes of multiple OPC items. The <see cref="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged" /> event will be generated for each 
            significant item change. Callback methods will be invoked if they are specified in the argument objects.
            </summary>
      <param name="itemSubscriptionArgumentsArray">Array of arguments, one element per each OPC item involved in the 
            operation.</param>
      <returns>The function returns an array of integer handles. Each such handle uniquely identifies the item 
            subscription. The indices of elements in the output array are the same as those in the input array, 
            <paramref name="itemSubscriptionArgumentsArray" />.
            </returns>
      <remarks>
            The size of the input array will become the size of the output array. The element positions (indices) in the output 
            array are the same as in the input array. 
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsInteger.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsInteger.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsObject.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsObject.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StoreInDictionary.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StoreInDictionary.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StoreInDictionary.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])">
      <summary>
            Changes parameters of subscriptions to multiple OPC items.
            </summary>
      <param name="argumentsArray">Array of arguments, one element per each OPC item involved in the operation.</param>
      <remarks>
        <para>
            The user-defined state, as given in <see cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" /> property of
            <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments" /> when subscribing to the item, cannot be changed.
            The <see cref="P:OpcLabs.BaseLib.OperationModel.OperationArguments.State" /> property of <see cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments" /> in the
            <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ChangeMultipleItemSubscriptions(OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments[])" /> method call is not used.</para>
        <para>When you use this method, the <see cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.Arguments" /> in the event notifications
            and callbacks may, during the transition period, correspond to an improper (older or newer) value.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ChangeMultipleItemSubscriptions.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ChangeMultipleItemSubscriptions.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.UnsubscribeMultipleItems(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Unsubscribe from changes of multiple OPC items, specifying an enumerable of integer handles.
            </summary>
      <param name="handlesToUnsubscribe">Subscription handles. Can be an array.</param>
      <remarks>
        <para>The item subscription handles become invalid after this method is called.</para>
      </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeMultipleItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.UnsubscribeMultipleItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\PHP\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeMultipleItems.Main.php" lang="PHP" title="PHP" region="Example" />
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\UnsubscribeMultipleItems.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.UnsubscribeAllItems">
      <summary>
            Unsubscribe from changes of all OPC items.
            </summary>
      <remarks>
            All item subscriptions on this <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> object are unsubscribed. Their corresponding handles
            become invalid after this method is called.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\UnsubscribeAllItems.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.UnsubscribeAllItems.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\UnsubscribeAllItems.Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.PullMultipleItemChanges(System.Int32,System.Int32)">
      <summary>
            Attempts to pull multiple OPC item changes subscribed to by the <see cref="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.SubscribeMultipleItems(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments[])" /> or SubscribeItem method.
            </summary>
      <param name="maximumCount">Maximum number of event notifications returned.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>An array of event arguments, or <c>null</c> if no event is available within the specified time.</returns>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.EventingFailure">
      <summary>
            Raised when a failure in the eventing infrastructure occurs.
            </summary>
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.ItemChanged">
      <summary>
            Raised for every significant change in an OPC item subscribed to by the SubscribeItem method.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsInteger.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsInteger.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StateAsObject.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StateAsObject.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StoreInDictionary.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.SubscribeMultipleItems.StoreInDictionary.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\SubscribeMultipleItems.StoreInDictionary.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption">
      <exclude />
      <summary>
            Provides access to consumption for <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> objects.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption.ClientBinding">
      <summary>
            The client binding used for communication with the provider.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption.ConnectionRetrialPeriod">
      <summary>
            Connection retrial period (in milliseconds).
            </summary>
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption.ConnectionFaulted">
      <summary>
            Raised when the connection has faulted.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing">
      <summary>
            Provides access to dequeuing for <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> objects.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.ItemChangedQueueCapacityRequest">
      <summary>
            Requested capacity of the queue for item changes.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.ItemChangedQueuePollingTimeout">
      <summary>
            How long the dequeuer will wait for a new item change. In milliseconds.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientProvider">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientResiliency">
      <exclude />
      <summary>
            Provides access to resiliency for <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> objects.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientResiliency.PullErrorSpinDelay">
      <summary>
            Pull error spin delay (in milliseconds).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientResiliency.TargetStateLost">
      <summary>
            Indicates that the target client has lost its state.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings">
      <summary>
            Provides access to settings for <see cref="T:OpcLabs.EasyOpc.DataAccess.IEasyDAClient" /> objects.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.InstanceParameters">
      <summary>
            Contains parameters that influence the behavior of just this instance of the component.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.IsolatedParameters">
      <summary>
            Contains parameters that influence the behavior of the component when it is isolated.
            </summary>
      <remarks>Parameters in this property only apply to instances that have their <see cref="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.Isolated" /> property 
            equal to <c>true</c>.</remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.Isolated">
      <summary>Specifies that you wish that the object instance works with an "isolated" 
            connection to the OPC server, i.e. one that is not shared with other instances.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\Isolated.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.Isolated.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters">
      <summary>Contains filtering conditions for OPC Data Access node browsing.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DefaultBrowseFilter">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.BrowseFilter" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DefaultElementNameFilter">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ElementNameFilter" />. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DefaultVendorFilter">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.VendorFilter" />. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseFilter,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType,OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter, element name filter, vendor filter,
            data type filter, and access rights filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <param name="dataTypeFilter">Specifies the data type filter. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause 
            nodes of all data types be returned.</param>
      <param name="accessRightsFilter">Specifies the access rights filter.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseFilter,System.String,System.String,OpcLabs.BaseLib.ComInterop.VarType)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter, element name filter, vendor filter,
            and data type filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <param name="dataTypeFilter">Specifies the data type filter. Passing <see cref="F:OpcLabs.BaseLib.ComInterop.VarTypes.Empty" /> will cause 
            nodes of all data types be returned.</param>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseFilter,System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter, element name filter, 
            and vendor filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <param name="vendorFilter">A server specific filter string (empty string for no filtering)</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseFilter,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter and element name filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <param name="elementNameFilter">A wildcard string to filter the returned element names (empty string for no 
            filtering)</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseFilter)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified browse filter.</summary>
      <param name="browseFilter">Specifies which subset of browse elements to return.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> object.</summary>
      <param name="browseParameters">Contains filtering conditions to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DABrowseParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.Default">
      <summary>
            Default OPC DA browse parameters.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DefaultAccessRightsFilter">
      <summary>
            Default access rights filter.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DefaultDataTypeFilter">
      <summary>
            Default data type filter.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.Empty">
      <summary>
            An empty node filter.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.DABrowseParameters,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="nodeFilter1">First object to be compared.</param>
      <param name="nodeFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.DABrowseParameters,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="nodeFilter1">First object to be compared.</param>
      <param name="nodeFilter2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.BrowseFilter">
      <summary>Specifies which subset of browse elements to return (branches, leaves, or both).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ElementNameFilter">
      <summary>A wildcard string to filter the returned element names (empty string for no filtering).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.VendorFilter">
      <summary>A server specific filter string (empty string for no filtering).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DataTypeFilter">
      <summary>Specifies to only return nodes of certain data type. Use Empty for no filtering.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.AccessRightsFilter">
      <summary>Specifies to only return nodes with certain access rights. Use None for no filtering.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs#EasyOpc#DataAccess#ComTypes#_DABrowseParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ResetAccessRightsFilter">
      <summary>
            Resets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.AccessRightsFilter" /> to its default value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ShouldSerializeAccessRightsFilter">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.AccessRightsFilter" /> differs from its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ResetDataTypeFilter">
      <summary>
            Resets the <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DataTypeFilter" /> to its default value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ShouldSerializeDataTypeFilter">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.DataTypeFilter" /> differs from its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters">
      <summary>Contains subscription parameters, such as the requested update rate.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.DefaultLocale">
      <summary>
            Default locale. Equals to zero.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.DefaultPercentDeadband">
      <summary>
            Default percent deadband. Equals to zero (0.0).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.DefaultRequestedUpdateRate">
      <summary>
            Default requested update rate. Equals to <see cref="F:System.Threading.Timeout.Infinite" />, i.e. no implicit updates.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class with data from other group parameters object.</summary>
      <param name="groupParameters">The group parameters to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor(System.Int32,System.Single,System.Int64)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified update rate, percent deadband, and locale.
            </summary>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <param name="locale">The language to be used by the server when returning values.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor(System.Int32,System.Single)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified update rate and percent deadband.</summary>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <param name="percentDeadband">The percent change in an item value that will cause an update.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified update rate.</summary>
      <param name="requestedUpdateRate">How often should the updates be received (number of milliseconds).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Default">
      <summary>
            Default group parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Fast">
      <summary>
            Fast group parameters.
            </summary>
      <remarks>
            The requested update rate is 200 milliseconds.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Normal">
      <summary>
            Group parameters with normal rate.
            </summary>
      <remarks>
            The requested update rate is 1 second.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Slow">
      <summary>
            Slow group parameters.
            </summary>
      <remarks>
            The requested update rate is 5 seconds.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.VeryFast">
      <summary>
            Very fast group parameters.
            </summary>
      <remarks>
            The requested update rate is 50 milliseconds.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.VerySlow">
      <summary>
            Very slow group parameters.
            </summary>
      <remarks>
            The requested update rate is 20 seconds.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.DAGroupParameters,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAGroupParameters,OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.op_Implicit(System.Int32)~OpcLabs.EasyOpc.DataAccess.DAGroupParameters">
      <summary>
            Converts an integer value denoting the requested update rate (in milliseconds) to the group parameters object.
            </summary>
      <param name="requestedUpdateRate">The requested update rate - how often should the updates be received (number of 
            milliseconds).</param>
      <returns>The group parameters with the requested update rate.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.FromInt32(System.Int32)">
      <summary>
            Converts an integer value denoting the requested update rate (in milliseconds) to the group parameters object.
            </summary>
      <param name="requestedUpdateRate">The requested update rate - how often should the updates be received (number of 
            milliseconds).</param>
      <returns>The group parameters with the requested update rate.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Locale">
      <summary>Gets or sets the language to be used by the server when returning values.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.RequestedUpdateRate">
      <summary>Gets or sets the requested update rate.</summary>
      <remarks>
        <para>How often should the updates be received (number of milliseconds).</para>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.PercentDeadband">
      <summary>Gets or sets the percent change in an item value that will cause an update.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Equals(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.DAGroupParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.PropertyChanged">
      <summary>
            Raised when a property is changed on a component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.ReadStringList(System.Collections.Generic.IList{System.String})">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAGroupParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAGroupParameters#Locale">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.Locale" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.GetRequestedUpdateRateDefault">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <param name="propertyName">The name of the property that has changed.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters">
      <summary>
            Contains parameters for OPC read operations, such as the data source or value age.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DADataSource" />
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ReadParameters" />
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DefaultDataSource">
      <summary>
            The default data source. Equals to <see cref="F:OpcLabs.EasyOpc.DataAccess.DADataSource.ByValueAge" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DefaultValueAge">
      <summary>
            The default value age (in milliseconds). Equals to 1000, i.e. 1 second.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> object.</summary>
      <param name="readParameters">The read parameters (such as data source or value age).</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DADataSource,System.Int32)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> object from a given DADataSource
            and a value age.</summary>
      <param name="dataSource">Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</param>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor(OpcLabs.EasyOpc.DataAccess.DADataSource)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> object from a given DADataSource.</summary>
      <param name="dataSource">Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor(System.Int32)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> object from a given value age.</summary>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.CacheSource">
      <summary>
            Read parameters that specify the cache data source.
            </summary>
      <remarks>
            OPC reads will be fulfilled from the cache in the OPC server.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.Default">
      <summary>
            Default read parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DeviceSource">
      <summary>
            Read parameters that specify the device data source.
            </summary>
      <remarks>
            OPC reads will be fulfilled from the device by the OPC server.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.op_Equality(OpcLabs.EasyOpc.DataAccess.DAReadParameters,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.op_Inequality(OpcLabs.EasyOpc.DataAccess.DAReadParameters,OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.op_Implicit(OpcLabs.EasyOpc.DataAccess.DADataSource)~OpcLabs.EasyOpc.DataAccess.DAReadParameters">
      <summary>Converts a DADataSource to a DAReadParameters object.</summary>
      <param name="dataSource">Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</param>
      <returns>Returns a DAReadParameters object converted from the input argument.</returns>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DADataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.op_Implicit(System.Int32)~OpcLabs.EasyOpc.DataAccess.DAReadParameters">
      <summary>Converts a value age (integer, in milliseconds) to a DAReadParameters object.</summary>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a DAReadParameters object converted from the input argument.</returns>
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ValueAge" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.FromDADataSource(OpcLabs.EasyOpc.DataAccess.DADataSource)">
      <summary>Converts a DADataSource to a DAReadParameters object.</summary>
      <param name="dataSource">Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</param>
      <returns>Returns a DAReadParameters object converted from the input argument.</returns>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DADataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.FromInt32(System.Int32)">
      <summary>Converts a value age (integer, in milliseconds) to a DAReadParameters object.</summary>
      <param name="valueAge">Determines the age of value you would like to obtain (in milliseconds).</param>
      <returns>Returns a DAReadParameters object converted from the input argument.</returns>
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ValueAge" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource">
      <summary>Selects the data source for OPC reads (from device, from OPC cache, or dynamically determined).</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadMultipleItems.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\DataAccess\_EasyDAClient\ReadMultipleItems.DeviceSource.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItem.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItem.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\DataAccess\_EasyDAClient\ReadItemValue.DeviceSource.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\DataAccess\_EasyDAClient\Net.ReadItemValue.DeviceSource.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DADataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ValueAge" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ValueAge">
      <summary>Determines the age of value you would like to obtain (in milliseconds).</summary>
      <remarks>
        <para>This value is significant only when the <see cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" /> property is set to 
            ByValueAge. </para>
        <para>The value must be greater than or equal to zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>When the value is <see cref="F:System.Threading.Timeout.Infinite" />, the value will always be provided from 
            the memory, i.e. without actually accessing the OPC server.</para>
      </remarks>
      <seealso cref="T:OpcLabs.EasyOpc.DataAccess.DADataSource" />
      <seealso cref="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DataSource" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.Equals(OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.DataAccess.DAReadParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.DataAccess.DAReadParameters.PropertyChanged">
      <summary>
            Handler for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.OpcLabs#EasyOpc#DataAccess#ComTypes#_DAReadParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <param name="propertyName">The name of the property that has changed.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.EasyOpcUriStrings">
      <summary>
            Contains URI strings used by OPC "Classic" client objects.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.EasyOpcUriStrings.ConsoleInteractionPlugin">
      <summary>
            OPC "Classic" console interaction plug-in.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.EasyOpcUriStrings.WindowsFormsInteractionPlugin">
      <summary>
            OPC "Classic" Windows Forms interaction plug-in.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used by the engine for OPC "Classic" specifications (COM/DCOM, and XML based). 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.Engine.EasyClientParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ClientReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ClientReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ComInstantiationParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ServerFailedReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerFailedReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ServerShutdownReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerShutdownReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.ServerStatusCheckPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerStatusCheckPeriod" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.GetEffectiveComInstantiationParameters">
      <inheritdoc cref="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetEffectiveComInstantiationParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.Engine.EasyEngineParameters" /> to COM Engines.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.GarbageCollectionPeriod">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GarbageCollectionPeriod" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.WorkerSleepDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WorkerSleepDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.DefaultEventQueueSize">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultEventQueueSize" />
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.Engine.EasyInstanceParameters" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.PluginConfigurations">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginConfigurations" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.PluginSetups">
      <inheritdoc cref="P:OpcLabs.BaseLib.ComponentParameters.PluginSetups" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.Reset">
      <inheritdoc cref="M:OpcLabs.BaseLib.ComponentParameters.Reset" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.EnableCachePersistence">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableCachePersistence" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.EnableNativeClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNativeClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.EnableNetApiClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNetApiClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.EnableServiceClient">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableServiceClient" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.PersistenceKey">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.PersistenceKey" />
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.Engine.EasyMachineParameters" /> to COM Machines.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.StandardName">
      <inheritdoc cref="P:OpcLabs.BaseLib.Parameters.StandardName" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.ComInstantiationParameters">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.MachineReconnectDelay">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.MachineReconnectDelay" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.BrowseViaCategories">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseViaCategories" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.BrowseFromRegistry">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseFromRegistry" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.GetEffectiveComInstantiationParameters">
      <inheritdoc cref="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetEffectiveComInstantiationParameters" />
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.EasyClientParameters">
      <summary>
            Contains parameters that influence operations that target a specific OPC server a whole.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyClientParameters.DefaultClientReconnectDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ClientReconnectDelay" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyClientParameters.DefaultServerFailedReconnectDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerFailedReconnectDelay" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyClientParameters.DefaultServerShutdownReconnectDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerShutdownReconnectDelay" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyClientParameters.DefaultServerStatusCheckPeriod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerStatusCheckPeriod" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <param name="clientParameters">Client parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.Default">
      <summary>
            Default "easy" OPC client parameters.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.DefaultComInstantiationParameters">
      <summary>
            Default COM instantiation parameters.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.op_Equality(OpcLabs.EasyOpc.Engine.EasyClientParameters,OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.op_Inequality(OpcLabs.EasyOpc.Engine.EasyClientParameters,OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="clientParameters1">First object to be compared.</param>
      <param name="clientParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ClientReconnectDelay">
      <summary>
            Client reconnect delay. Number of milliseconds. 
            If operations on specific OPC server are found to be failing, the server is disconnected, and further connection is
            retried only after the client reconnect delay elapses.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters">
      <summary>
            Contains parameters that influence instantiation of OPC servers.
            </summary>
      <remarks>
        <para>
            There are separate parameters for instantiation of OPCEnum, in
            <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerFailedReconnectDelay">
      <summary>
            Server failed reconnect delay. Number of milliseconds. 
            If the OPC server indicates that vendor specific fatal error has occurred within the server, the server is 
            disconnected, and further connection is retried only after this delay elapses.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerShutdownReconnectDelay">
      <summary>
            Server shutdown reconnect delay. Number of milliseconds. 
            If the OPC server indicates that it needs to shutdown, the server is disconnected, and further connection is retried
            only after this delay elapses.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ServerStatusCheckPeriod">
      <summary>
            Server status check period. Number of milliseconds. 
            Determines how often the system periodically checks the status of the OPC server (by calling IOPCServer::GetStatus
            method).
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>
            This parameters has effect in both OPC Classic and OPC XML-DA.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: yes</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetEffectiveComInstantiationParameters">
      <summary>
            Determines the effective COM instantiation parameters.
            </summary>
      <returns>Returns the effective COM instantiation parameters, as specified by this object.</returns>
      <remarks>
        <para>
            The effective parameters are calculated by taking <see cref="P:OpcLabs.BaseLib.Runtime.InteropServices.ComConfiguration.InstantiationParameters" /> of the
            <see cref="P:OpcLabs.BaseLib.Runtime.InteropServices.ComManagement.Configuration" /> in <see cref="F:OpcLabs.BaseLib.Runtime.InteropServices.ComManagement.Instance" />, and overriding them with
            <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" /> from
            this object.</para>
        <para>
            This is not a property, because the result depends on factors that reside outside of the object.</para>
      </remarks>
      <seealso cref="M:OpcLabs.BaseLib.Runtime.InteropServices.Extensions.ComInstantiationParametersExtension.OverrideBy(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters,OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)" />
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.Engine.EasyClientParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.OpcLabs#EasyOpc#Engine#ComTypes#_EasyClientParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.Equals(OpcLabs.EasyOpc.Engine.EasyClientParameters)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.ResetComInstantiationParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.ShouldSerializeComInstantiationParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.EasyEngineParameters">
      <summary>
            Contains parameters that are perpetually shared among all instances of engine objects.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultDefaultEventQueueSize">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultEventQueueSize" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultGarbageCollectionPeriod">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GarbageCollectionPeriod" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultWorkerSleepDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WorkerSleepDelay" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="engineParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.Default">
      <summary>
            Default "easy" OPC engine parameters.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.op_Equality(OpcLabs.EasyOpc.Engine.EasyEngineParameters,OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.op_Inequality(OpcLabs.EasyOpc.Engine.EasyEngineParameters,OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="engineParameters1">First object to be compared.</param>
      <param name="engineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GarbageCollectionPeriod">
      <summary>
            Garbage collection period. Number of milliseconds. Specifies how often the engine reviews the connected OPC servers 
            and items and disconnects from those that are no longer needed.
            </summary>
      <remarks>
        <para>The value must be greater than zero, or it must be equal to 
            <see cref="F:System.Threading.Timeout.Infinite" />.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WorkerSleepDelay">
      <summary>
            Worker sleep delay. Number of milliseconds. Specifies how often the engine checks the need to perform tasks such 
            garbage collection, rate adjustment, and final cleanup.
            </summary>
      <remarks>
        <para>The value must be greater than zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DefaultEventQueueSize">
      <summary>
            Default event queue size.
            The maximum size of the queue each client object uses to temporarily hold generated events before 
            they are consumed by the application. Events that do not fit into the queue will be lost. You should set the size to 
            a number that is sufficient to cope with the difference between the rate events are generated and the rate your 
            application is able to consume them.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.Engine.EasyEngineParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyEngineParameters.OpcLabs#EasyOpc#Engine#ComTypes#_EasyEngineParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.Equals(OpcLabs.EasyOpc.Engine.EasyEngineParameters)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.EasyInstanceParameters">
      <summary>
            Contains parameters that influence the behavior of just this instance of the component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyInstanceParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="instanceParameters">Parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.Default">
      <summary>
            Default host parameters.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.op_Equality(OpcLabs.EasyOpc.Engine.EasyInstanceParameters,OpcLabs.EasyOpc.Engine.EasyInstanceParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.op_Inequality(OpcLabs.EasyOpc.Engine.EasyInstanceParameters,OpcLabs.EasyOpc.Engine.EasyInstanceParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.ComPumpMessages">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableCachePersistence">
      <summary>
            Determines whether information cached by the client will be persisted.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNativeClient">
      <summary>
            Determines whether the OPC client implemented in native code is enabled.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableNetApiClient">
      <summary>
            Determines whether the client implemented using OPC NET API is enabled.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.EnableServiceClient">
      <summary>
            Determines whether the OPC client implemented through service provider is enabled.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.PersistenceKey">
      <summary>
            Allows to separate persistent data for different instances of the object.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.Equals(OpcLabs.EasyOpc.Engine.EasyInstanceParameters)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.Engine.EasyInstanceParameters" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.Engine.EasyInstanceParameters" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs#EasyOpc#Engine#ComTypes#_EasyInstanceParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.Reset(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.EasyMachineParameters">
      <summary>
            Contains parameters related to operations that target a specific computer but not a specific OPC server, such as 
            browsing for OPC servers using various methods.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyMachineParameters.DefaultBrowseFromRegistry">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseFromRegistry" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyMachineParameters.DefaultBrowseViaCategories">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseViaCategories" /> property.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.Engine.EasyMachineParameters.DefaultMachineReconnectDelay">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.MachineReconnectDelay" /> property.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class with default data.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.#ctor(OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <param name="machineParameters">Machine parameters to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.Default">
      <summary>
            Default machine parameters.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.DefaultComInstantiationParameters">
      <summary>
            Default COM instantiation parameters.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.op_Equality(OpcLabs.EasyOpc.Engine.EasyMachineParameters,OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="machineParameters1">First object to be compared.</param>
      <param name="machineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.op_Inequality(OpcLabs.EasyOpc.Engine.EasyMachineParameters,OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="machineParameters1">First object to be compared.</param>
      <param name="machineParameters2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters">
      <summary>
            Contains parameters that influence instantiation of OPCEnum.
            </summary>
      <remarks>
        <para>
            There are separate parameters for instantiation of OPC servers, in
            <see cref="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.ComInstantiationParameters" />.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.MachineReconnectDelay">
      <summary>
            Machine reconnect delay. Number of milliseconds. 
            If operations on specific computer are found to be failing, they will not be re-tried until the machine reconnect 
            delay elapses.
            </summary>
      <remarks>
        <para>The value must be greater than or equal to zero.</para>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseViaCategories">
      <summary>
            Allows use of OPCEnum object (local or remote) when browsing for OPC servers.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.BrowseFromRegistry">
      <summary>
            Allows direct registry access (local or remote) when browsing for OPC servers.
            </summary>
      <remarks>
        <para>
            This property is used by following client implementations:
            <ul><li>Native client: yes</li><li>NET API client: no</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.GetEffectiveComInstantiationParameters">
      <summary>
            Determines the effective COM instantiation parameters.
            </summary>
      <returns>Returns the effective COM instantiation parameters, as specified by this object.</returns>
      <remarks>
        <para>
            The effective parameters are calculated by taking <see cref="P:OpcLabs.BaseLib.Runtime.InteropServices.ComConfiguration.InstantiationParameters" /> of the
            <see cref="P:OpcLabs.BaseLib.Runtime.InteropServices.ComManagement.Configuration" /> in <see cref="F:OpcLabs.BaseLib.Runtime.InteropServices.ComManagement.Instance" />, and overriding them with
            <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters" /> from
            this object.</para>
        <para>
            This is not a property, because the result depends on factors that reside outside of the object.</para>
      </remarks>
      <seealso cref="M:OpcLabs.BaseLib.Runtime.InteropServices.Extensions.ComInstantiationParametersExtension.OverrideBy(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters,OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)" />
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.OpcLabs#EasyOpc#Engine#ComTypes#_EasyMachineParameters#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="E:OpcLabs.EasyOpc.Engine.EasyMachineParameters.PropertyChanged">
      <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.Equals(OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ReadXmlElement(System.Xml.XmlReader)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">An error has occurred in XML processing.</exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.WriteXmlElement(System.Xml.XmlWriter)">
      <summary>
            Infrastructure.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <para>
             A method call was invalid for the object's current state.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ResetComInstantiationParameters">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters" /> to a default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ShouldSerializeComInstantiationParameters">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ComInstantiationParameters" /> is not empty.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Engine.NamespaceDoc">
      <summary>
            This namespace contains classes that are used by the engine for OPC "Classic" specifications (COM/DCOM, and XML based). 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Generic.NamespaceDoc">
      <summary>
            This namespace contains OPC-related classes that use generics.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Generic.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Generic.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Generic.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Implementation.NamespaceDoc">
      <summary>
            This namespace contains classes that implement OPC "Classic".
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Implementation.ServerDatabase.FindClsid(System.String)">
      <remarks>
        <para>
            This method does not search in version-independent ProgIds.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Implementation.ServerDatabase.FindServerElement(System.String)">
      <remarks>
        <para>
            This method does not search in version-independent ProgIds.</para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.DocumentationSnippets">
      <exclude />
      <snippet class="exception" trigger="throws" cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
          <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
          <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
        </exception>
      </snippet>
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.NamespaceDoc">
      <summary>
            This namespace contains internal classes that facilitate easy work with OPC Classic.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.ServerDescriptorConverter_ConvertTo_NotAServerDescriptor">
      <summary>
              Looks up a localized string similar to The value passed to a type converter is not a ServerDescriptor, but a '{0}'..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_CheckException_Message">
      <summary>
              Looks up a localized string similar to An OPC operation failure occurred in a simulated OPC "Classic" client. The inner exception contains details about the problem..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_GetClsid_CannotFindServer">
      <summary>
              Looks up a localized string similar to The simulated OPC "Classic" client did not find a server with given ProgId or VersionIndependentProgId..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_GetClsid_CannotParseGuid">
      <summary>
              Looks up a localized string similar to The simulated OPC "Classic" client cannot parse a server class given as a GUID..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_GetComputer_LocationNotFound">
      <summary>
              Looks up a localized string similar to The simulated OPC "Classic" client cannot find a computer with a given location "{0}" (machine name or host)..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_GetNode_CannotProceedDeeper">
      <summary>
              Looks up a localized string similar to The simulated OPC "Classic" client cannot proceed further deep when looking up a node..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Internal.Resource1.SimulatedCommonClient_GetNode_NameNotFound">
      <summary>
              Looks up a localized string similar to The simulated OPC "Classic" client cannot find a node with a given name..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.SimulatedCommonClient">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.#ctor(OpcLabs.EasyOpc.Internal.SimulatedCommonClient)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.Internal.SimulatedCommonClient" /> object.</summary>
      <param name="client">The simulated common client object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ValueEquals(OpcLabs.EasyOpc.Internal.SimulatedCommonClient)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ResetComputerDictionary">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ComputerDictionary" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ShouldSerializeComputerDictionary">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.Internal.SimulatedCommonClient.ComputerDictionary" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.ServerDescriptorConverter">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.Internal.AssemblyNames">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMappedNode">
      <summary>
            A utility base class objects mapped to OPC "Classic". Contains commonly used meta-members.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMappedNode.ServerDescriptor">
      <summary>
            The OPC server involved in the operation.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMapper">
      <summary>
            A mapper for OPC "Classic" specifications. Provides a functionality to map an object to entities in OPC "Classic" 
            domain.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMapper.#ctor(OpcLabs.EasyOpc.LiveMapping.CommonMapper)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.LiveMapping.CommonMapper" /> object.</summary>
      <param name="mapper">The common mapper object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMapper.#ctor(OpcLabs.EasyOpc.LiveMapping.CommonMappingProvider,OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>
            Initializes a new instance of the class, with given mapping provider, and mapping context template.
            </summary>
      <param name="mappingProvider">The mapping provider to be used by this mapper.</param>
      <param name="mappingContextTemplate">The mapping context template.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMapper.#ctor(System.ComponentModel.IContainer,OpcLabs.EasyOpc.LiveMapping.CommonMappingProvider,OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>
            Initializes an instance of the <see cref="T:OpcLabs.EasyOpc.LiveMapping.CommonMapper" /> class with Designer support. 
            </summary>
      <param name="container">The component container to which the new instance will be added.</param>
      <param name="mappingProvider">The mapping provider to be used by this mapper.</param>
      <param name="mappingContextTemplate">The mapping context template.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMapper.MappingContextTemplate">
      <summary>
            The mapping context template to be used by the mapping provider.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMapper.MappingProvider">
      <summary>
            The mapping provider to be used by this mapper.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMapper.ValueEquals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMapper.ValueEquals(OpcLabs.EasyOpc.LiveMapping.CommonMapper)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.BaseLib.LiveMapping.AbstractMapper" /> is value equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.BaseLib.LiveMapping.AbstractMapper" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is value equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext">
      <summary>
            A mapping context for OPC "Classic" specifications.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.#ctor">
      <inheritdoc cref="T:OpcLabs.BaseLib.LiveMapping.AbstractMappingContext" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.#ctor(OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>
            Initializes a new instance of the class, based on a given mapping context template.
            </summary>
      <param name="template">The mapping context that is used as a template for creating a new instance.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.#ctor(OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Initializes a new instance of the class, with a given OPC server descriptor.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.op_Equality(OpcLabs.EasyOpc.LiveMapping.CommonMappingContext,OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.op_Inequality(OpcLabs.EasyOpc.LiveMapping.CommonMappingContext,OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.ServerDescriptor">
      <summary>
            The OPC server involved in the operation.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.ApplyMemberMappingDefinition(OpcLabs.BaseLib.LiveMapping.AbstractMemberMappingDefinition)">
      <inheritdoc cref="M:OpcLabs.BaseLib.LiveMapping.AbstractMappingContext.ApplyMemberMappingDefinition(OpcLabs.BaseLib.LiveMapping.AbstractMemberMappingDefinition)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingContext.Equals(OpcLabs.EasyOpc.LiveMapping.CommonMappingContext)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMappingProvider">
      <summary>
            A mapping provider for OPC "Classic" specifications. 
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingProvider.GetMetaValue(System.String,System.Object,OpcLabs.BaseLib.LiveMapping.AbstractMappingContext,OpcLabs.BaseLib.LiveMapping.AbstractMapper)">
      <inheritdoc cref="M:OpcLabs.BaseLib.LiveMapping.AbstractMappingProvider.GetMetaValue(System.String,System.Object,OpcLabs.BaseLib.LiveMapping.AbstractMappingContext,OpcLabs.BaseLib.LiveMapping.AbstractMapper)" />
      <remarks>
        <para>
          <see cref="T:OpcLabs.EasyOpc.LiveMapping.CommonMappingProvider" /> supports following meta-members:
            <ul><li><c>ServerDescriptor</c>:    <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" />, an OPC server involved in the operation.</li></ul></para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource">
      <summary>
            A mapping source for OPC "Classic" specifications.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.#ctor(OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Initializes a new instance of the class, with given OPC server descriptor.
            </summary>
      <param name="serverDescriptor">The OPC server involved in the operation.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.op_Equality(OpcLabs.EasyOpc.LiveMapping.CommonMappingSource,OpcLabs.EasyOpc.LiveMapping.CommonMappingSource)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.op_Inequality(OpcLabs.EasyOpc.LiveMapping.CommonMappingSource,OpcLabs.EasyOpc.LiveMapping.CommonMappingSource)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.ServerDescriptor">
      <summary>
            The OPC server involved in the operation.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMappingSource.Equals(OpcLabs.EasyOpc.LiveMapping.CommonMappingSource)">
      <summary>
            Determines whether the current object is the same as other object.
            </summary>
      <param name="other">Object to be compared.</param>
      <returns>True if the objects are the same, otherwise false.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.CommonMemberMappingDefinition">
      <summary>
            Member mapping definition for members involved in mapping for OPC "Classic" specifications.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMemberMappingDefinition.#ctor(System.String)">
      <inheritdoc cref="T:OpcLabs.BaseLib.LiveMapping.AbstractMemberMappingDefinition" />
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.CommonMemberMappingDefinition.ServerAttribute">
      <summary>
            Contains the <c>Server</c> attribute, if present for this member.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMemberMappingDefinition.LoadFromMemberInfo(System.Reflection.MemberInfo,OpcLabs.BaseLib.LiveMapping.AbstractMappingProvider)">
      <inheritdoc cref="M:OpcLabs.BaseLib.LiveMapping.AbstractMemberMappingDefinition.LoadFromMemberInfo(System.Reflection.MemberInfo,OpcLabs.BaseLib.LiveMapping.AbstractMappingProvider)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.CommonMemberMappingDefinition.ShouldLoadFromMemberInfo(System.Reflection.MemberInfo)">
      <inheritdoc cref="M:OpcLabs.BaseLib.LiveMapping.AbstractMemberMappingDefinition.ShouldLoadFromMemberInfo(System.Reflection.MemberInfo)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.NamespaceDoc">
      <summary>
            This namespace contains classes used for live mapping of OPC "Classic" sources to targets.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.Resource1.CommonMappingContext_ApplyMemberMappingDefinition_CannotCombineMachineNameOrServerClassWithUrlStringInServerAttribute">
      <summary>
              Looks up a localized string similar to Cannot combine MachineName or ServerClass with a UrlString in a ServerAttribute..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.Resource1.MappingContext_ApplyMemberMappingDefinition_ServerAttributeMissingServerClass">
      <summary>
              Looks up a localized string similar to ServerClass not specified in ServerAttribute..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.LiveMapping.ServerAttribute">
      <summary>Gives information about an OPC server, such as the server's ProgID.</summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.DefaultMachineName">
      <summary>
            Default machine name. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.DefaultServerClass">
      <summary>
            Default server class. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.DefaultUrlString">
      <summary>
            Default URL string of the resource. Equals to "opcda:".
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.MachineName">
      <summary>
            Name of the machine. Determines the computer on which the OPC server is located. May be an empty string, in which 
            case the OPC server is assumed to exist on the local computer or at the computer specified for it by DCOM 
            configuration.
            </summary>
      <remarks>
            Machine resources are named using the naming scheme of the network transport. By default, all UNC ("\\server" or 
            "server") and DNS names ("domain.com", "example.microsoft.com", or "135.5.33.19") names are allowed. 
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.ServerClass">
      <summary>
            Contains ProgID or {CLSID} of the OPC server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.LiveMapping.ServerAttribute.UrlString">
      <summary>
            A URL string of the resource.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.NamespaceDoc">
      <summary>
            This namespace contains classes that facilitate easy work with various OPC specifications (regardless of technology used).
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.NodeSpace.Computer">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.#ctor(OpcLabs.EasyOpc.NodeSpace.Computer)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.NodeSpace.Computer" /> object.</summary>
      <param name="computer">The computer object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.Clone">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ResetServerElements">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.ServerElements" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ShouldSerializeServerElements">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.ServerElements" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ResetAEServerComponentDictionary">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.AEServerComponentDictionary" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ShouldSerializeAEServerComponentDictionary">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.AEServerComponentDictionary" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ResetDAServerComponentDictionary">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.DAServerComponentDictionary" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeSpace.Computer.ShouldSerializeDAServerComponentDictionary">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.NodeSpace.Computer.DAServerComponentDictionary" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.NodeSpace.NamespaceDoc">
      <summary>
            This namespace defines a node space for OPC Classic (COM-based) specifications.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.OpcSchemes">
      <summary>
            Contains URI schemes used in OPC "Classic".
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcAE">
      <summary>
            A URI scheme for the OPC-A&amp;E.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcBatch">
      <summary>
            A URI scheme for the OPC Batch.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcDA">
      <summary>
            A URI scheme for the OPC-DA.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcDX">
      <summary>
            A URI scheme for the OPC-DX.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcHda">
      <summary>
            A URI scheme for the OPC-HDA.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcSchemes.OpcXmlDA">
      <summary>
            A URI scheme for the OPC XML-DA.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.OperationModel.ComTypes.NamespaceDoc">
      <summary>
            This namespace contains COM types for classes that are used to pass arguments to OPC "Classic" (COM/DCOM and XML based) operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException">
      <summary>
            Exposes <see cref="T:OpcLabs.EasyOpc.OperationModel.OpcException" /> to COM clients.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.ToString">
      <inheritdoc cref="M:System.Object.ToString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.GetType">
      <inheritdoc cref="M:System.Object.GetType" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.DisplayString">
      <summary>
            The display string for the current object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.Message">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.Message" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.StackTrace">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.StackTrace" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.HelpLink">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.HelpLink" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.Source">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.Source" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.InnerException">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.InnerException" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.TargetSite">
      <inheritdoc cref="P:System.Runtime.InteropServices._Exception.TargetSite" />
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.GetBaseException">
      <inheritdoc cref="M:System.Runtime.InteropServices._Exception.GetBaseException" />
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.Data">
      <inheritdoc cref="P:System.Exception.Data" />
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.HResult">
      <inheritdoc cref="P:System.Exception.HResult" />
    </member>
    <member name="T:OpcLabs.EasyOpc.OperationModel.NamespaceDoc">
      <summary>
            This namespace contains classes that are used to pass arguments to OPC "Classic" (COM/DCOM and XML based) operations and obtain the operation results. 
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.OperationModel.OpcException">
      <summary>Exceptions arising from OPC operations.</summary>
      <remarks>
            In general, you cannot safely prevent these exceptions from happening. Various conditions external to your code
            can cause OPC failures, e.g. network problems, improper OPC server configuration, etc. For this reason, you should 
            always expect that an OPC operation can fail.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.OpcException.Create(System.Exception)">
      <exclude />  // IMPROVE: document
        <exception cref="T:System.ArgumentNullException"><para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para><para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para></exception></member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.OpcException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.OperationModel.OpcException" /> class with a specified error message, 
            and a reference to the inner exception that is the cause this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference 
            (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.OpcException.OpcLabs#EasyOpc#OperationModel#ComTypes#_OpcException#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.DisplayString" />
    </member>
    <member name="T:OpcLabs.EasyOpc.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Resource1.Utilities_ConvertTo_CannotConvert">
      <summary>
              Looks up a localized string similar to The OPC "Classic" server has returned a '{0}' result, but this operation requires a '{1}' value, and the conversion is not possible..
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.Resource1.Utilities_ConvertToNonNull_NullResult">
      <summary>
              Looks up a localized string similar to The OPC "Classic" server has returned a null result, but this operation requires a non-null value..
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.ValueDomains.NamespaceDoc">
      <summary>
            This namespace contains value domains used in OPC "Classic".
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.ValueDomains.ServerDescriptorStringValueDomain">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.ValueDomains.ServerSchemeValueDomain">
      <exclude />
    </member>
    <member name="T:OpcLabs.EasyOpc.OpcTechnologies">
      <summary>
            Types of technologies used by OPC specifications.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcTechnologies.None">
      <summary>
            No technology.
            <para><b>Remarks:</b></para><para>
            This value is also used to mark a technology fallback client.</para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcTechnologies.Unknown">
      <summary>
            Unknown technology.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcTechnologies.Com">
      <summary>
            OPC specifications based on COM/DCOM.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcTechnologies.Xml">
      <summary>
            OPC specifications based on XML (Web Services/SOAP).
            <para><b>Remarks:</b></para><para>
            Only used by the OPC XML-DA specification. Does not cover OPC Unified Architecture (OPC-UA).
            </para></summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.OpcTechnologies.All">
      <summary>
            All technologies.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.OpcTechnologiesExtension">
      <summary>
            Contains extension methods to the <see cref="T:OpcLabs.EasyOpc.OpcTechnologies" /> enumeration.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcTechnologiesExtension.GetDisplayText(OpcLabs.EasyOpc.OpcTechnologies)">
      <summary>
            Obtains the display text for a given OPC technology or technologies.
            </summary>
      <param name="technologies">The technology or technologies for which the display text will be determined.</param>
      <returns>The display text for the given technology or technologies.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.ServerCategories">
      <summary>Contains information about which specifications the OPC server claims to support.</summary>
      <remarks>
            There are individual flags (properties) indicating the supported specifications.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\_ServerCategories\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\_ServerCategories\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\_ServerCategories\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerCategories" /> class with a specified set of category 
            Guids.</summary>
      <param name="categories">Collection of Guids to copy the categories from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.#ctor(OpcLabs.EasyOpc.ServerCategories)">
      <summary>Initializes a new instance of the class, copying values from a given object.</summary>
      <param name="serverCategories">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.All">
      <summary>
            All server categories.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.None">
      <summary>
            No server categories.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcAlarmsAndEvents">
      <summary>
            All OPC Alarms&amp;Events Categories.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess">
      <summary>
            All OPC Data Access Categories.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccessAndXmlDataAccess">
      <summary>
            All OPC Data Access and XML Data Access Categories.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcXmlDataAccess">
      <summary>
            All OPC XML Data Access Categories.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.op_Equality(OpcLabs.EasyOpc.ServerCategories,OpcLabs.EasyOpc.ServerCategories)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.op_Inequality(OpcLabs.EasyOpc.ServerCategories,OpcLabs.EasyOpc.ServerCategories)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.Families">
      <summary>
            The server families that correspond to server categories represented by this object.
            </summary>
      <remarks>A server family is a functionality area, usually represented as set of interfaces supported by the server.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcAlarmsAndEvents10">
      <summary>Gets or sets information about OPC server's support of OPC Alarms and Events 1.0 specification.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess10">
      <summary>Gets information about OPC server's support of OPC Data Access 1.0 specification.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess20">
      <summary>Gets information about OPC server's support of OPC Data Access 2.0 specification.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcDataAccess30">
      <summary>Gets information about OPC server's support of OPC Data Access 2.0 specification.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcXmlDataAccess10">
      <summary>Gets information about OPC server's support of OPC XML Data Access 1.0 specification.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.ToString">
      <summary>Returns a string containing identifiers of the categories supported.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerCategories.OpcLabs#EasyOpc#ComTypes#_ServerCategories#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ComTypes._ServerCategories.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerCategories.Equals(OpcLabs.EasyOpc.ServerCategories)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.ServerCategories" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.ServerCategories" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:OpcLabs.EasyOpc.ServerFamilies">
      <summary>
            The server family or families. A server family is a functionality area, usually represented as set of interfaces 
            supported by the server.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerFamilies.None">
      <summary>
            No servers.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerFamilies.OpcDataAccess">
      <summary>
            OPC Data Access (OPC-DA) servers. Also covers OPC XML-DA servers.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerFamilies.OpcAlarmsAndEvents">
      <summary>
            OPC Alarms&amp;Events (OPC-A&amp;E) servers.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerFamilies.All">
      <summary>
            OPC Data Access (OPC-DA) and OPC Alarms&amp;Events (OPC-A&amp;E) servers.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.NodeDescriptor">
      <summary>Contains information necessary to identify a node in OPC address space.</summary>
      <remarks>A node can be identified using its qualified ID, or using a browse path.</remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeDescriptor.DefaultAsString">
      <summary>
            Default <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" />, expressed as string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeDescriptor.DefaultBrowsePath">
      <summary>
            Default browse path (<b>null</b>, i.e. none).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeDescriptor.DefaultNodePath">
      <summary>
            Default node path. Equals to <b>null</b>, meaning that no node path is specified.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor(OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, from specified node descriptor.</summary>
      <param name="nodeDescriptor">The node descriptor object.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified node identifier.</summary>
      <param name="nodeId">Contains OPC node identifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified item identifier, and browse path.</summary>
      <param name="nodeId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.#ctor(System.String,System.String,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <summary>
             Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.NodeDescriptor" /> class.
             </summary>
      <summary>Initializes a new instance of the class, with specified node path, item identifier, and browse path.</summary>
      <param name="nodePath">Contains node path (empty string for the root, null reference if unknown). Only used with OPC XML.</param>
      <param name="nodeId">Contains OPC item identifier (empty string for the root or if unknown).</param>
      <param name="browsePath">Contains the browse path for the OPC item.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.op_Equality(OpcLabs.EasyOpc.NodeDescriptor,OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.op_Inequality(OpcLabs.EasyOpc.NodeDescriptor,OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.ArgumentString">
      <summary>
            The node descriptor in form of an argument string, i.e. a <i>key</i>=<i>value</i> pairs separated by semicolons.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath">
      <summary>
            Specifies the browse path for the OPC node.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePathStartingNodeDescriptor">
      <summary>
            The starting node descriptor of the browse path.
            </summary>
      <remarks>
        <para>
            When the starting node descriptor is <c>null</c>, the browse path starts at the root node.</para>
        <para>
            This value is ignored if <see cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" /> is <c>null</c>.</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.HasBrowsePath">
      <summary>
            Determines whether there is a non-null browse path in the descriptor.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.HasNodeId">
      <summary>
            Determines whether there is a non-null node ID in the descriptor.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.IsNull">
      <summary>
            Determines whether the node descriptor is null, i.e. specifies neither node ID nor a browse path.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.IsRoot">
      <summary>
            Determines whether this object describes a root of the address space.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.NodeId">
      <summary>
            Contains node identifier (empty string for the root, null reference if unknown).
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.NodePath">
      <summary>
            Contains node path (empty string for the root, null reference if unknown). Only used with OPC XML.
            </summary>
      <remarks>
        <para>
            Not to be confused with the <see cref="P:OpcLabs.EasyOpc.NodeDescriptor.BrowsePath" />, or the access path (only in OPC-DA 1.0, and quite rare). </para>
        <para>
            This is called ItemPath in the OPC XML-DA Specification. "OPC XML-DA addresses OPC Items via ItemPath, and
            ItemName."</para>
        <para>
            ItemPath: "A portion of the namespace pointing to the data. The ItemPath is server specific and the client
            should not make any implications about its content, structure, or consistency across servers. ItemPath may or
            may not imply node, or server. <br />
            If an XML-DA server was front ending a DA based server, then an example could be: \\NODE\OPC.DAServer.2. <br />
            ItemPath is a hierarchical parameter. &gt;br/&gt;
            If ItemPath is Blank or missing at all levels of the hierarchy, then the ItemName is expected to be a fully
            qualified name."</para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.Match(OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
            Determines whether the node descriptor matches another node descriptor.
            </summary>
      <param name="other">The node descriptor to match against.</param>
      <returns>Returns <b>true</b> if two node descriptors match; otherwise, returns <b>false</b>.</returns>
      <remarks>
            Two node descriptors match if any information that is present in both node descriptors is equal. For example, if 
            a node Id in one of the node descriptors is not present (<b>null</b>), a node Id in the other node descriptor
            can be anything, or also not present. But if a node Id is present in both node descriptors, it must be the same
            node Id. Same rules apply to the browse path portion of the node descriptor.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.ToString">
      <summary>Returns a string describing the contents of the node descriptor.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.AliasName">
      <summary>
            When non-empty, specifies the name of the alias that will be used in place of this object.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.IsAliased">
      <summary>
            Determines whether this object is aliased.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="E:OpcLabs.EasyOpc.NodeDescriptor.PropertyChanged">
      <summary>
            This event is raised when a property is changed on a component.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.ReadStringList(System.Collections.Generic.IList{System.String})">
      <inheritdoc />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.OpcLabs#EasyOpc#ComTypes#_NodeDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ComTypes._NodeDescriptor.DisplayString" />
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeDescriptor.DefaultNodeId">
      <summary>
            Default node id (none, i.e. <b>null</b>).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeDescriptor.RootNodeId">
      <summary>
            A node Id that represents a root of the address space. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.DeserializeNodeDescriptorIfPresent(System.Xml.XmlReader,System.String,System.String)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.Equals(OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
      <param name="other">The object to compare members to.</param>
      <returns>Returns <c>true</c> iff the member values equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.Flatten``1">
      <summary>
            Computes an equivalent node descriptor that is flattened.
            </summary>
      <returns>Returns an equivalent node descriptor browse path is flattened.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.GetNodeIdArgumentName">
      <summary>
            Infrastructure.
            </summary>
      <returns>The name to be used for NodeId in argument strings.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.MakeArgumentString(System.Boolean)">
      <summary>
            Infrastructure.
            </summary>
      <param name="informativeOnly">Indicates whether an incomplete argument string with just the most important 
            information may be returned.</param>
      <returns>An argument string that represents the node descriptor.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.OnPropertyChanged(System.String)">
      <summary>
            Infrastructure.
            </summary>
      <param name="propertyName">The name of the property that has changed.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.SerializeNodeDescriptorIfNotNull(System.Xml.XmlWriter,System.String,System.String,OpcLabs.EasyOpc.NodeDescriptor)">
      <summary>
            Infrastructure.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ServerDescriptor">
      <summary>Contains information necessary to identify and connect to an OPC server, such as the server's ProgID.
            </summary>
      <remarks>
            It is possible to construct this object from <see cref="T:OpcLabs.EasyOpc.ServerElement" /> returned by the browsing methods.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerDescriptor.DefaultDescriptorString">
      <summary>
            Default value of the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.DescriptorString" /> property. 
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerDescriptor.DefaultScheme">
      <summary>
            Default URI scheme. Equals to "dcom".
            </summary>
      <remarks>
        <para>
            "dcom" as a scheme allows any COM/DCOM-based OPC specification, and the actual specification used then depends
            on the context.</para>
      </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerDescriptor.DefaultUrlString">
      <summary>
            Default URL string of the resource. Equals to "opcda:".
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerDescriptor.DefaultTechnology">
      <summary>
            Default technology. Equals to <see cref="F:OpcLabs.EasyOpc.OpcTechnologies.Com" />.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor">
      <overloads>
        <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      </overloads>
      <summary>Initializes a new instance of the class.</summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>
            Initializes a new instance of the class, given a <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" />.
            </summary>
      <param name="comClassRegistration">Registration data of a COM class.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String,OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>
            Initializes a new instance of the class, given the machine name and a <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" />.
            </summary>
      <param name="machineName">Name of the machine (computer on which the object is located).</param>
      <param name="comClassRegistration">Registration data of a COM class.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String,System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified machine name and object CLSID.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="clsid">The CLSID associated with the object to be created.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified machine name and object ID.</summary>
      <param name="machineName">Name of the machine. 
            Determines the computer on which the OPC server is located. May be an empty 
            string, in which case the OPC server is assumed to exist on the local computer or at the computer specified for it 
            by DCOM configuration.</param>
      <param name="objectId">Contains the object ID of the OPC server. The object ID is either the server's ProgID, 
            or its {CLSID}, or ProgID/{CLSID}.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified object CLSID.</summary>
      <param name="clsid">The CLSID associated with the object to be created.</param>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified server class (ProgID) or a URL string.</summary>
      <param name="descriptorString">Contains the descriptor string for the server.</param>
      <remarks>
        <para>
            The <paramref name="descriptorString" /> may contain one of the following:
            <ul><li>A server class, i.e. ProgID (or {CLSID}) of the object.</li><li>A string in the form "\\machineName\serverClass".</li><li>A URI of the object.</li></ul></para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String,OpcLabs.BaseLib.Security.NetworkSecurity)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified server class (ProgID) or a URL string,
            and network security.</summary>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.String,OpcLabs.EasyOpc.ServerElement)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified machine name and <see cref="T:OpcLabs.EasyOpc.ServerElement" />.
            </summary>
      <param name="location">Name of the machine (or host). 
            Replaces the location computer specified in the <paramref name="serverElement" />.
            </param>
      <param name="serverElement">Server element object (obtained through browsing for servers) that contains the
            server's ProgID or CLSID.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> object.</summary>
      <param name="serverDescriptor">The server descriptor object to be copied from.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(OpcLabs.EasyOpc.ServerElement)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified <see cref="T:OpcLabs.EasyOpc.ServerElement" />.</summary>
      <param name="serverElement">Server element object (obtained through browsing for servers) that contains the
            server's ProgID or CLSID.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(OpcLabs.EasyOpc.ServerElement,OpcLabs.BaseLib.Security.NetworkSecurity)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class, with specified <see cref="T:OpcLabs.EasyOpc.ServerElement" /> and
            <see cref="T:OpcLabs.BaseLib.Security.NetworkSecurity" />.</summary>
      <param name="serverElement">Server element object (obtained through browsing for servers) that contains the
            server's ProgID or CLSID.</param>
      <param name="networkSecurity">Security settings used when connecting to the endpoint.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" /> class.
            </summary>
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.DefaultUrl">
      <summary>
            Default URL. Represents "dcom:".
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.Null">
      <summary>
            A null server descriptor (contains an empty machine name and an empty server class).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Equality(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Inequality(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Implicit(OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration)~OpcLabs.EasyOpc.ServerDescriptor">
      <summary>Converts a <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" /> to a server descriptor.</summary>
      <param name="comClassRegistration">Registration data of a COM class.</param>
      <returns>Returns the server descriptor created from the <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" />.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Implicit(System.Guid)~OpcLabs.EasyOpc.ServerDescriptor">
      <summary>Converts a <see cref="T:System.Guid" /> containing object's CLSID to a server descriptor.</summary>
      <param name="clsid">Contains the CLSID for the object.</param>
      <returns>Returns the server descriptor created from the <see cref="T:System.Guid" />.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Implicit(OpcLabs.EasyOpc.ServerElement)~OpcLabs.EasyOpc.ServerDescriptor">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.ServerElement" /> to a server descriptor.</summary>
      <param name="serverElement">Contains the server element to be converted.</param>
      <returns>Returns the server descriptor created from the server element.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.op_Implicit(System.String)~OpcLabs.EasyOpc.ServerDescriptor">
      <summary>Converts a string containing server's descriptor string to a server descriptor.</summary>
      <param name="descriptorString">Contains the descriptor string for the server.</param>
      <returns>Returns the server descriptor created from the string.</returns>
      <remarks>
        <para>
            The <paramref name="descriptorString" /> may contain one of the following:
            <ul><li>A server class, i.e. ProgID (or {CLSID}) of the object.</li><li>A string in the form "\\machineName\serverClass".</li><li>A URI of the object.</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.FromComClassRegistration(OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration)">
      <summary>Converts a <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" /> to a server descriptor.</summary>
      <param name="comClassRegistration">Registration data of a COM class.</param>
      <returns>Returns the server descriptor created from the <see cref="T:OpcLabs.BaseLib.ComInterop.Database.ComClassRegistration" />.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.FromGuid(System.Guid)">
      <summary>Converts a <see cref="T:System.Guid" /> containing object's CLSID to a server descriptor.</summary>
      <param name="clsid">Contains the CLSID for the object.</param>
      <returns>Returns the server descriptor created from the <see cref="T:System.Guid" />.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.FromServerElement(OpcLabs.EasyOpc.ServerElement)">
      <summary>Converts a <see cref="T:OpcLabs.EasyOpc.ServerElement" /> to a server descriptor.</summary>
      <param name="serverElement">Contains the server element to be converted.</param>
      <returns>Returns the server descriptor created from the server element.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.FromString(System.String)">
      <summary>Converts a string containing server's descriptor string to a server descriptor.</summary>
      <param name="descriptorString">Contains the descriptor string for the server.</param>
      <returns>Returns the server descriptor created from the string.</returns>
      <remarks>
        <para>
            The <paramref name="descriptorString" /> may contain one of the following:
            <ul><li>A server class, i.e. ProgID (or {CLSID}) of the object.</li><li>A string in the form "\\machineName\serverClass".</li><li>A URI of the object.</li></ul></para>
      </remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.DescriptorString">
      <inheritdoc />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.Scheme">
      <summary>
            The scheme name of the URI.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.ServerCategories">
      <summary>
            Determines which specifications can be used with the OPC server.
            </summary>
      <remarks>
        <para>
            This property is only interpreted by the NET API client implementation; it is ignored by the Native Client
            implementation.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.ServerClass">
      <summary>
            Contains {CLSID} (if given) or ProgID of the OPC server.
            </summary>
      <remarks>
        <para>
            There are maximum length limitations on the server class.</para>
        <para>
            The <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerClass" /> and <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerProgram" /> return different values if both the CLSID and
            ProgID are present.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.ServerProgram">
      <summary>
            Contains ProgID (if given) or {CLSID} of the OPC server.
            </summary>
      <remarks>
        <para>
            There are maximum length limitations on the server program.</para>
        <para>
            The <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerClass" /> and <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerProgram" /> return different values if both the CLSID and
            ProgID are present.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.Technology">
      <summary>
            Determines the OPC technology used.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.Url">
      <summary>
            Gets or sets the <see cref="T:System.Uri" /> instance for this resource descriptor.
            </summary>
      <remarks>A <c>null</c> reference denotes that a URI is not available.</remarks>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.UrlString">
      <summary>
            A URL string of the resource.
            </summary>
      <remarks>
        <para>
            A generic string is used instead of <see cref="T:System.Uri" />, because in some cases, the value may not represent
            a real URI.</para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs#EasyOpc#ComTypes#_ServerDescriptor#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.DisplayString" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.InitialScheme">
      <inheritdoc cref="P:OpcLabs.BaseLib.ObjectDescriptor.InitialScheme" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.Equals(OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>
            Determines whether this object is equal to the other.
            </summary>
      <param name="other">The other object to be tested for equality with this one.</param>
      <returns>Returns <c>true</c> if the objects are equal; otherwise, returns <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ResetUrl">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.Url" /> property to its default value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ShouldSerializeUrl">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.Url" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ResetScheme">
      <summary>
            Reset the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.Scheme" /> property to its default value.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ShouldSerializeScheme">
      <summary>
            Determines whether the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.Scheme" /> property is equal to its default value.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ResetServerCategories">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerCategories" /> back to its default.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ShouldSerializeServerCategories">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.ServerDescriptor.ServerCategories" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="T:OpcLabs.EasyOpc.NodeElement">
      <summary>Contains information gathered about an OPC node (branch or leaf in OPC server's address space).</summary>
      <remarks>
            This object is filled in and returned e.g. when you browse the OPC server's address space.
            </remarks>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultBrowsePath">
      <summary>
            Default browse path (none, i.e. <b>null</b>).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultHasChildren">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.NodeElement.HasChildren" />. Equals to <b>false</b>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultNodeId">
      <summary>
            Default Node Id. Equals to <b>null</b>, meaning that no Node Id is specified.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultIsBranch">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.NodeElement.IsBranch" />. Equals to <b>false</b>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultIsLeaf">
      <summary>
            Default value of <see cref="P:OpcLabs.EasyOpc.NodeElement.IsLeaf" />. Equals to <b>false</b>.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultName">
      <summary>
            Default node name. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.NodeElement.DefaultNodePath">
      <summary>
            Default node path. Equals to <b>null</b>, meaning that no node path is specified.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.#ctor(OpcLabs.EasyOpc.NodeElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.NodeElement" /> object.</summary>
      <param name="nodeElement">The object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.#ctor(System.String,OpcLabs.BaseLib.Navigation.BrowsePath,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.op_Equality(OpcLabs.EasyOpc.NodeElement,OpcLabs.EasyOpc.NodeElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.op_Inequality(OpcLabs.EasyOpc.NodeElement,OpcLabs.EasyOpc.NodeElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="nodeElement1">First object to be compared.</param>
      <param name="nodeElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.op_Implicit(OpcLabs.EasyOpc.NodeElement)~System.String">
      <summary>
            Converts the object into a string usable for identification of the node when passed to other methods.
            The value returned is the value of the <see cref="P:OpcLabs.EasyOpc.NodeElement.NodeId" /> property.
            </summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="nodeElement">The object to be expressed as a string.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.MakePathElements``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates a path containing <see cref="T:OpcLabs.EasyOpc.NodeElement" />-s made from browse names, starting from the root.
            </summary>
      <param name="browseNames">The browse names that represent the path to be created.</param>
      <returns>An enumerable of node elements, starting from the root.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.BrowsePath">
      <summary>
            Specifies the browse path for the OPC node.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.HasChildren">
      <summary>The element has children and can be used for a subsequent browse.</summary>
      <remarks>
            In some cases this property may contain True even if there are no actual nodes below it, e.g. if it is too consuming
            for the OPC server to determine if an element has children.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.IsBranch">
      <summary>The node is a branch (a "folder" the can contain other nodes).</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.IsLeaf">
      <summary>
            The element is a leaf.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.IsRoot">
      <summary>
            Determines whether this element describes a root of the address space.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.Name">
      <summary>Short user friendly portion of the namespace pointing to the element. This is the string to be used for 
            display purposes.</summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.NodeId">
      <summary>The unique identifier for this node.</summary>
      <remarks>
            If the value is a null reference, then the server has failed provide the node ID.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.NodePath">
      <summary>The node path for this node. Only used with OPC XML.</summary>
      <remarks>
        <para>
            Not to be confused with the <see cref="P:OpcLabs.EasyOpc.NodeElement.BrowsePath" />, or the access path (only in OPC-DA 1.0, and quite rare). </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.ToString">
      <summary>Returns a string with the node Id.</summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeElement.OpcLabs#EasyOpc#ComTypes#_NodeElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ComTypes._NodeElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.Equals(OpcLabs.EasyOpc.NodeElement)">
      <summary>
            Infrastructure
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.ServerElement">
      <summary>Contains information gathered about an OPC server.</summary>
      <remarks>
            This object is filled in and returned e.g. when you browse a machine for a list of OPC servers installed on it.
            </remarks>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\_ServerElement\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\_ServerElement\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\_ServerElement\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultClsidString">
      <summary>
            Default CLSID string. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultDescription">
      <summary>
            Default description. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultLocation">
      <summary>
            Default location. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultProgId">
      <summary>
            Default programmatic identifier (ProgId). An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultTechnology">
      <summary>
            Default technology. Equals to <see cref="F:OpcLabs.EasyOpc.OpcTechnologies.None" />.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultUrlString">
      <summary>
            Default URL string. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultUrlStringUnescaped">
      <summary>
            Default unescaped URL string. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultVendor">
      <summary>
            Default vendor name. An empty string.
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultVersionIndependentProgId">
      <summary>
            Default version-independent programmatic identifier. An empty string.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor">
      <summary>Initializes a new instance of the class with default data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor(System.String,System.Guid,System.String,System.String,System.String,System.String,OpcLabs.EasyOpc.ServerCategories,System.String)">
      <summary>Initializes a new instance of the class with given data.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor(OpcLabs.EasyOpc.OpcTechnologies,System.String,System.String,System.Guid,System.String,System.String,System.String,System.String,OpcLabs.EasyOpc.ServerCategories)">
      <summary>Initializes a new instance of the class with given data (including URL string).</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor(OpcLabs.EasyOpc.ServerDescriptor)">
      <summary>Initializes a new <see cref="T:OpcLabs.EasyOpc.ServerElement" /> object from a <see cref="T:OpcLabs.EasyOpc.ServerDescriptor" />.</summary>
      <param name="serverDescriptor">The server descriptor object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor(OpcLabs.EasyOpc.ServerElement)">
      <summary>Initializes a new copy of the <see cref="T:OpcLabs.EasyOpc.ServerElement" /> object.</summary>
      <param name="serverElement">The server element object to be copied from.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the class with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination. 
            </param>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.DefaultServerCategories">
      <summary>
            Default server categories (none).
            </summary>
    </member>
    <member name="F:OpcLabs.EasyOpc.ServerElement.DefaultClsid">
      <summary>
            Default server's class identifier (CLSID). An empty GUID (<see cref="F:System.Guid.Empty" />).
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.op_Equality(OpcLabs.EasyOpc.ServerElement,OpcLabs.EasyOpc.ServerElement)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="serverElement1">First object to be compared.</param>
      <param name="serverElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.op_Inequality(OpcLabs.EasyOpc.ServerElement,OpcLabs.EasyOpc.ServerElement)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="serverElement1">First object to be compared.</param>
      <param name="serverElement2">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.op_Implicit(OpcLabs.EasyOpc.ServerElement)~System.String">
      <summary>
            Converts the object into a string usable for identification of the OPC server when passed to other methods.
            The value returned is the value of the <see cref="P:OpcLabs.EasyOpc.ServerElement.UrlString" /> property.
            </summary>
      <returns>Returns the main characteristics of the object expressed as a string.</returns>
      <param name="serverElement">The object to be expressed as a string.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Clsid">
      <summary>Gets or sets OPC server's class identifier (CLSID).</summary>
      <remarks>
        <para>
            A CLSID is a globally unique identifier that identifies an OPC server. The OPC server needs to register its CLSID
            with the system.</para>
        <para>
            In VBScript, use <see cref="P:OpcLabs.EasyOpc.ServerElement.ClsidString" /> instead.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.ClsidString">
      <summary>
            Contains the CLSID string of the server.
            </summary>
      <remarks>
        <para>
            The value is an empty string if no CLSID for the server is given.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Description">
      <summary>Gets or sets a user readable name for the OPC server.</summary>
      <remarks>
            The description may be presented to the user as the name of an available OPC server.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Location">
      <summary>
            The server's location.
            </summary>
      <remarks>
            Corresponds to the host or machine name.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.ProgId">
      <summary>Gets or sets a string value indicating the programmatic identifier (ProgID) of the OPC server.</summary>
      <remarks>
            ProgIDs present a human-readable version of the class identifier (CLSID) used to identify COM/ActiveX objects.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.ServerCategories">
      <summary>Gets or sets information about which specifications the OPC server claims to support.</summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\_ServerCategories\General.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\_ServerCategories\Net.General.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
      </example>
      <example>
        <h3>COM</h3>
        <code source="..\..\Native\Examples\VBScript\WSH\DocExamples\_ServerCategories\Main.vbs" lang="VBScript" title="VBScript" region="Example" />
      </example>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.ServerClass">
      <summary>
            Returns a string usable for identification of the OPC server when passed to other methods.
            If the <see cref="P:OpcLabs.EasyOpc.ServerElement.ProgId" /> is not empty, it is used. Otherwise, if the <see cref="P:OpcLabs.EasyOpc.ServerElement.VersionIndependentProgId" />
            is not empty, it is used. If both are empty, the string form of server's <see cref="P:OpcLabs.EasyOpc.ServerElement.Clsid" /> is returned.
            </summary>
      <remarks>
            For consistency, the corresponding property or parameter on other objects and methods is also called ServerClass.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Technology">
      <summary>
            Determines the OPC technology used.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Url">
      <summary>
            A URL of the server.
            </summary>
      <remarks>
        <para>
            This property is <c>null</c> if the underlying string does not represent a valid URI.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.UrlString">
      <summary>
            A URL string of the server.
            </summary>
      <remarks>
        <para>
            A generic string is used instead of <see cref="T:System.Uri" />, because in some cases, the value may not represent
            a real URI.</para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.UrlStringUnescaped">
      <summary>
            An unescaped URL string of the server.
            </summary>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.Vendor">
      <summary>Gets or sets a vendor name.</summary>
      <remarks>
            Vendor name may be empty when unknown, e.g. if obtained through OPCEnum object which does not provide it.
            It is simply a means of identifying the vendor who supplied the particular OPC server.
            </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.VersionIndependentProgId">
      <summary>Gets or sets version-independent programmatic identifier of the OPC server application.</summary>
      <remarks>
        <para>VersionIndependentProgId may be empty when unknown, e.g. if obtained through IOPCServerList interface of 
            OPCEnum object which does not provide it, or when registry does not contain that information. In some cases (e.g. 
            when IOPCServerList2 is used, and the VersionIndependentProgID is not available in the registry), the ProgID will be 
            copied to this property.</para>
        <para>The VersionIndependentProgID associates a ProgID with a CLSID.</para>
        <para>The version-independent ProgID refers to the OPC server's class and does not change from version to version, 
            instead remaining constant across all versions. It refers to the currently installed version of the OPC server's 
            class. The version-independent ProgID corresponds to the name of the latest version of the OPC server application.
            </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ToString">
      <summary>
            Converts the object into a string usable for identification of the OPC server when passed to other methods.
            The value returned is the value of the <see cref="P:OpcLabs.EasyOpc.ServerElement.UrlString" /> property.
            </summary>
      <returns>Returns the object contents expressed as readable string.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.Clone">
      <inheritdoc cref="M:System.ICloneable.Clone" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ReadStringList(System.Collections.Generic.IList{System.String})">
      <inheritdoc cref="M:OpcLabs.BaseLib.Text.IStringListSerializable.ReadStringList(System.Collections.Generic.IList{System.String})" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Text.IStringListSerializable.WriteStringList(System.Collections.Generic.IList{System.String},System.Boolean)" />
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElement.OpcLabs#EasyOpc#ComTypes#_ServerElement#DisplayString">
      <inheritdoc cref="P:OpcLabs.EasyOpc.ComTypes._ServerElement.DisplayString" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ReadXmlElement(System.Xml.XmlReader)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.ReadXmlElement(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.WriteXmlElement(System.Xml.XmlWriter)">
      <inheritdoc cref="M:OpcLabs.BaseLib.Info.WriteXmlElement(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.DeepClone">
      <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
      <returns>A new object that is a deep copy of this instance.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.Equals(OpcLabs.EasyOpc.ServerElement)">
      <summary>
            Determines whether the specified <see cref="T:OpcLabs.EasyOpc.ServerElement" /> is equal to the current object.
            </summary>
      <param name="other">The <see cref="T:OpcLabs.EasyOpc.ServerElement" /> to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ResetServerCategories">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.ServerElement.ServerCategories" /> back to its default.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ShouldSerializeServerCategories">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.ServerElement.ServerCategories" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ShouldSerializeUrl">
      <summary>
            Determines whether <see cref="P:OpcLabs.EasyOpc.ServerElement.Url" /> is in its default state.
            </summary>
      <returns>
        <c>true</c> if the property has changed from its default value; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElement.ResetUrl">
      <summary>
            Sets the <see cref="P:OpcLabs.EasyOpc.ServerElement.Url" /> back to its default.
            </summary>
    </member>
    <member name="T:OpcLabs.EasyOpc.ServerElementCollection">
      <summary>
            A collection of server elements (<see cref="T:OpcLabs.EasyOpc.ServerElement" />), keyed by their URI strings.
            </summary>
      <remarks>
            This collection is returned by the browsing methods.
            </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.#ctor">
      <summary>
            Initializes a new, empty instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.#ctor(System.Collections.Generic.IEnumerable{OpcLabs.EasyOpc.ServerElement})">
      <summary>
            Initializes a new copy of the collection.
            </summary>
      <param name="elements">The collection to be copied from.</param>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElementCollection.Empty">
      <summary>
            An empty server element collection.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.op_Equality(OpcLabs.EasyOpc.ServerElementCollection,OpcLabs.EasyOpc.ServerElementCollection)">
      <summary>Determines whether the two objects are equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.op_Inequality(OpcLabs.EasyOpc.ServerElementCollection,OpcLabs.EasyOpc.ServerElementCollection)">
      <summary>Determines whether the two objects are not equal.</summary>
      <param name="left">First object to be compared.</param>
      <param name="right">Second object to be compared.</param>
      <returns>
        <c>True</c> if the objects are not equal; <c>false</c> if they are equal.</returns>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerElementCollection.Keys">
      <summary>
            A collection of server URIs that are keys to the server elements in the dictionary.
            </summary>
      <returns>Returns a collection of keys. Returns null reference if the collection has not
            been yet allocated.</returns>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.Equals(System.Object)">
      <inheritdoc cref="M:System.Object.Equals(System.Object)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.GetHashCode">
      <inheritdoc cref="M:System.Object.GetHashCode" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.GetSchema">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.ReadXml(System.Xml.XmlReader)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerElementCollection.GetKeyForItem(OpcLabs.EasyOpc.ServerElement)">
      <inheritdoc cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
    </member>
    <member name="T:OpcLabs.EasyOpc.OpcResultException">
      <summary>
            The exception that is thrown when an OPC Classic result (return value or an argument) was not expected for the 
            requested operation.
            </summary>
      <remarks>This type is intentionally *not* derived from <see cref="T:OpcLabs.BaseLib.ResultException" />, because it represents an 
            exception in a different domain.</remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcResultException.#ctor">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcResultException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcResultException.#ctor(System.String,System.Exception)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference 
            (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             Initializes a new instance of the class.
             </summary>
      <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <seealso cref="T:System.Exception" />
    </member>
    <member name="T:OpcLabs.BaseLib.Internal.AssemblyNames">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Internal.PublicKeyTokens">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Internal.SystemAssemblyNames">
      <exclude />
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcSchemes.GetObsoleteMessage(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcSchemes.IsObsolete(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.OpcUtilities.GetStandardSchemes">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.FlattenBrowsePath(OpcLabs.EasyOpc.NodeDescriptor,OpcLabs.BaseLib.Navigation.BrowsePath)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.get_ArgumentString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.get_AliasName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.set_AliasName(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.OpcLabs.EasyOpc.ComTypes._NodeDescriptor.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.OpcLabs.EasyOpc.ComTypes._NodeDescriptor.Match(System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.Flatten">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.OnAlias(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.NodeDescriptor.OnUnalias">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.OpcLabs.BaseLib.Aliasing.ComTypes._Aliasable.AliasName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.NodeDescriptor.OpcLabs.EasyOpc.ComTypes._NodeDescriptor.AliasName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_DefaultUrl">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_DescriptorString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_DescriptorString(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_Scheme">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_Scheme(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_ServerCategories">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_ServerCategories(OpcLabs.EasyOpc.ServerCategories)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_ServerClass">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_ServerClass(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_ServerProgram">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_ServerProgram(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_Technology">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.get_UrlString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.set_UrlString(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.MemberwiseClone">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.ServerDescriptor.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.DescriptorString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.UrlString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ClsidString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.Location">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.MachineName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ObjectId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ProgId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ServerClass">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.ServerDescriptor.OpcLabs.EasyOpc.ComTypes._ServerDescriptor.ServerProgram">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.OperationModel.OpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <para>
             An error has occurred during serialization or deserialization.</para>
        <para>
             This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.OpcException.OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.OperationModel.OpcException.OpcLabs.EasyOpc.OperationModel.ComTypes._OpcException.Data">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Internal.EasyUtilities.CheckSuccess(OpcLabs.BaseLib.OperationModel.OperationResult)">
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_ClientReconnectDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.set_ClientReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_ComInstantiationParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.set_ComInstantiationParameters(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_ServerFailedReconnectDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.set_ServerFailedReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_ServerShutdownReconnectDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.set_ServerShutdownReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_ServerStatusCheckPeriod">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.set_ServerStatusCheckPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyClientParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyClientParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.get_GarbageCollectionPeriod">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.set_GarbageCollectionPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.get_WorkerSleepDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.set_WorkerSleepDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.get_DefaultEventQueueSize">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.set_DefaultEventQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyEngineParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.get_PersistenceKey">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.set_PersistenceKey(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.get_PersistenceKey">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.set_PersistenceKey(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyInstanceParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.get_ComInstantiationParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.set_ComInstantiationParameters(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.get_MachineReconnectDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.set_MachineReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.EasyMachineParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.Engine.EasyMachineParameters.OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_ClientReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_ComInstantiationParameters(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_ServerFailedReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_ServerShutdownReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyClientParameters.set_ServerStatusCheckPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.set_GarbageCollectionPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.set_WorkerSleepDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyEngineParameters.set_DefaultEventQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyInstanceParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.set_ComInstantiationParameters(OpcLabs.BaseLib.Runtime.InteropServices.ComInstantiationParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.Engine.ComTypes._EasyMachineParameters.set_MachineReconnectDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_DefaultQuality">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_Quality">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_Quality(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_Timestamp">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_Timestamp(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_TimestampDouble">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_TimestampDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_TimestampLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_TimestampLocal(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_TimestampLocalDouble">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_TimestampLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_Value">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.set_Value(System.Object)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.get_Timestamp">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.get_TimestampLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAVtq.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAVtq.OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_StandardNamedValues">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.FindStandardName(OpcLabs.EasyOpc.DataAccess.DAPropertyIds,System.String@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.FindStandardPropertyId(System.String,OpcLabs.EasyOpc.DataAccess.DAPropertyIds@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_InternalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.set_InternalValue(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_NumericalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.set_NumericalValue(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetName(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.GetPropertyType(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.get_NumericalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.set_NumericalValue(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.Equals(OpcLabs.EasyOpc.DataAccess.DAPropertyId)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAPropertyId.#cctor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAPropertyId.OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_StandardNamedValues">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.FindStandardName(OpcLabs.EasyOpc.DataAccess.DAQualities,System.String@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.FindStandardQuality(System.String,OpcLabs.EasyOpc.DataAccess.DAQualities@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_InternalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.set_InternalValue(OpcLabs.EasyOpc.DataAccess.DAQualities)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_LimitBitField">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.set_LimitBitField(OpcLabs.EasyOpc.DataAccess.DALimitChoice)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_NumericalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.set_NumericalValue(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_StatusBitField">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.set_StatusBitField(OpcLabs.EasyOpc.DataAccess.DAStatusChoice)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_StatusBitFieldNumerical">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_LimitBitFieldNumerical">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_StatusInfo">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.Equals(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAQuality.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAQuality.QualityChoiceBitFieldNumerical">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.AllowLeafOnly(OpcLabs.EasyOpc.DataAccess.AddressSpace.DANodeElement)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.get_AccessPath">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.set_AccessPath(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.get_RequestedDataType">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.set_RequestedDataType(OpcLabs.BaseLib.ComInterop.VarType)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.get_AccessPath">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.set_AccessPath(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Match(System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.Clone">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAItemDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.get_Root">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.get_BrowsePathStartingNodeDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.set_BrowsePathStartingNodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.get_ItemId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.set_ItemId(System.String)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Clone">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.Match(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DANodeDescriptor.OpcLabs.EasyOpc.DataAccess.ComTypes._DANodeDescriptor.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientExtension.TransformException(System.Exception,OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments,System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.get_PullItemChangedQueueCapacity">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.set_PullItemChangedQueueCapacity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClient.get_SupportedTechnologies">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption.get_ConnectionRetrialPeriod">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientConsumption.set_ConnectionRetrialPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.get_ItemChangedQueueCapacityRequest">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.set_ItemChangedQueueCapacityRequest(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.get_ItemChangedQueuePollingTimeout">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientDequeuing.set_ItemChangedQueuePollingTimeout(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientResiliency.get_PullErrorSpinDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientResiliency.set_PullErrorSpinDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.get_InstanceParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.set_InstanceParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.get_IsolatedParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.IEasyDAClientSettings.set_IsolatedParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_DefaultAccessRightsFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_DefaultDataTypeFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_Empty">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_BrowseFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.set_BrowseFilter(OpcLabs.EasyOpc.DataAccess.DABrowseFilter)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_ElementNameFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.set_ElementNameFilter(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_VendorFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.set_VendorFilter(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_DataTypeFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.set_DataTypeFilter(OpcLabs.BaseLib.ComInterop.VarType)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_AccessRightsFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.set_AccessRightsFilter(OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.Equals(OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.ElementNameFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DABrowseParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.VendorFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_Fast">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_Normal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_Slow">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_VeryFast">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_VerySlow">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_Locale">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.set_Locale(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_RequestedUpdateRate">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.set_RequestedUpdateRate(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_PercentDeadband">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.set_PercentDeadband(System.Single)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.get_Locale">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.set_Locale(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAGroupParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_CacheSource">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_DeviceSource">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_DataSource">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.set_DataSource(OpcLabs.EasyOpc.DataAccess.DADataSource)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_ValueAge">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.set_ValueAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_EffectiveValueAge">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.DAReadParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.DAReadParameters.OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Plugins.Optimizer.ComTypes._DAOptimizerPluginParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAAutoSubscribingParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterBucketingParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DAParameterRestrictingParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Optimization.ComTypes._DARequestChunkingParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.get_DefaultBrowseParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.get_BrowseParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.set_BrowseParameters(OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.#ctor(OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor,OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <summary>
            Initializes a new instance of the class.
            </summary>
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DABrowseArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.get_DefaultGroupParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.get_GroupParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.set_GroupParameters(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAHandleGroupArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.get_DefaultItemDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.get_DefaultServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.get_ServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.get_ItemDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.set_ItemDescriptor(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.get_DefaultGroupParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.get_GroupParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.set_GroupParameters(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.get_Value">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.set_Value(System.Object)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemValueArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.get_DefaultVtq">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.get_Vtq">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemVtqArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.get_DefaultServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.get_DefaultNodeDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.get_ServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.get_NodeDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.set_NodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.Construct">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.#ctor(OpcLabs.EasyOpc.DataAccess.InformationModel.DAModelNodeDescriptor)">
            Initializes a new instance of the class.
            <remarks><para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para></remarks></member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DANodeArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_DefaultNodeDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_DefaultPropertyDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_DefaultServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_NodeDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.set_NodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_ServerDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_PropertyDescriptor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.set_PropertyDescriptor(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.Equals(OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAPropertyArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.get_DefaultReadParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.get_ReadParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.set_ReadParameters(OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAReadItemArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemSubscriptionArguments.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.get_DefaultArguments">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.get_Arguments">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.set_Arguments(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.get_StatusInfo">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.get_Vtq">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemChangedEventArgs.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.get_StatusInfo">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.get_Vtq">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.SetState(System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.ToGoodValueResult(System.Func{System.Exception,System.Exception})">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult.OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DABrowseArguments.set_BrowseParameters(OpcLabs.EasyOpc.DataAccess.DABrowseParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAHandleGroupArguments.set_GroupParameters(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemArguments.set_ItemDescriptor(OpcLabs.EasyOpc.DataAccess.DAItemDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemGroupArguments.set_GroupParameters(OpcLabs.EasyOpc.DataAccess.DAGroupParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemValueArguments.set_Value(System.Object)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAItemVtqArguments.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DANodeArguments.set_NodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.set_NodeDescriptor(OpcLabs.EasyOpc.DataAccess.DANodeDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.set_ServerDescriptor(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAPropertyArguments.set_PropertyDescriptor(OpcLabs.EasyOpc.DataAccess.DAPropertyDescriptor)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAReadItemArguments.set_ReadParameters(OpcLabs.EasyOpc.DataAccess.DAReadParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._DAVtqResult.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.set_Arguments(OpcLabs.EasyOpc.DataAccess.OperationModel.EasyDAItemSubscriptionArguments)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.OperationModel.ComTypes._EasyDAItemChangedEventArgs.set_Vtq(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.TransformNodeDescriptorIfNeeded(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.DataAccess.DANodeDescriptor,System.String)">
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Internal.DelegatingEasyDAClient.TransformServerDescriptorIfNeeded(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient.GetInnerHandle(System.Int32)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient.GetOuterAndInnerHandleLists(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.HandleMappingEasyDAClient.#ctor(System.Int32,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Implementation.ResilientEasyDAClient.#ctor(System.Int32,OpcLabs.EasyOpc.DataAccess.IEasyDAClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAItemValueArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAItemVtqArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtq`1.#ctor(OpcLabs.EasyOpc.DataAccess.DAVtq)">
      <summary>
             Initializes a new instance of the class.
             </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.op_Explicit(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult)~OpcLabs.BaseLib.OperationModel.Generic.ValueResult{`0}">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.ToValueResult(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult)">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.DAVtqResult`1.#ctor(OpcLabs.EasyOpc.DataAccess.OperationModel.DAVtqResult)">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments`1.#ctor(OpcLabs.EasyOpc.DataAccess.Generic.EasyDAItemSubscriptionArguments)">
      <summary>
             Initializes a new instance of the class.
             </summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Extensions.IEasyDAClientExtension2.WaitForOneItemValue(OpcLabs.EasyOpc.DataAccess.IEasyDAClient,OpcLabs.EasyOpc.DataAccess.OperationModel.DAItemGroupArguments,System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.get_DesiredMethod">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.set_DesiredMethod(OpcLabs.EasyOpc.DataAccess.Engine.DAReadWriteMethod)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.DAClientMode.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_ItemDetach">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.set_ItemDetach(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_ServerDetach">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.set_ServerDetach(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_TopicRead">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.set_TopicRead(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_TopicWrite">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.set_TopicWrite(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_BrowseAccessPaths">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_BrowseAccessPaths(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_BrowseNodes">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_BrowseNodes(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_BrowseProperties">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_BrowseProperties(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_BrowseServers">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_BrowseServers(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_GetProperty">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_GetProperty(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_ReadItem">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_ReadItem(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_WriteItem">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.set_WriteItem(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.AbortIncomplete">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts.GroupByServer">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.get_HttpClientConnectionLimit">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.set_HttpClientConnectionLimit(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.get_SubscriptionPolledRefreshTimeoutFactor">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.set_SubscriptionPolledRefreshTimeoutFactor(System.Double)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.get_SubscriptionPolledRefreshTimeoutIncrease">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.set_SubscriptionPolledRefreshTimeoutIncrease(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAAdaptableParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_TopicProcessingIntervalTimeout">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_TopicProcessingIntervalTimeout(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_TopicProcessingTotalTimeout">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_TopicProcessingTotalTimeout(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_RequestQueueSize">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_RequestQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_LinkCallbackQueueSize">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_LinkCallbackQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_ResponseQueueSize">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_ResponseQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_BrowseNodesChunk">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_BrowseNodesChunk(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_TopicRetrialPeriod">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.set_TopicRetrialPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.get_MaxClientAge">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.set_MaxClientAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.get_MaxTopicAge">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.set_MaxTopicAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_DefaultPluginConfigurations">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_HoldPeriods">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.set_HoldPeriods(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_Mode">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.set_Mode(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_Timeouts">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.set_Timeouts(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HasHoldPeriods">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HasMode">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HasTimeouts">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.HoldPeriodsOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ModeOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDAInstanceParameters.TimeoutsOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_DefaultPluginConfigurations">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_DefaultPluginSetups">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_ClientParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.set_ClientParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_EngineParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.set_EngineParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_MachineParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.set_MachineParameters(OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_TopicParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.set_TopicParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ClientParametersOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.EngineParametersOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.HasClient">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.HasEngine">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.HasMachine">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.HasTopic">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.MachineParametersOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.TopicParametersOnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.DataAccess.Engine.EasyDASharedParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.get_TopicRetrialDelay">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.set_TopicRetrialDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._DAClientMode.set_DesiredMethod(OpcLabs.EasyOpc.DataAccess.Engine.DAReadWriteMethod)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.set_HttpClientConnectionLimit(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.set_SubscriptionPolledRefreshTimeoutFactor(System.Double)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAAdaptableParameters.set_SubscriptionPolledRefreshTimeoutIncrease(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_ItemDetach(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_ServerDetach(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_TopicRead(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientHoldPeriods.set_TopicWrite(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_TopicProcessingIntervalTimeout(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_TopicProcessingTotalTimeout(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_RequestQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_LinkCallbackQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_ResponseQueueSize(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_BrowseNodesChunk(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientParameters.set_TopicRetrialPeriod(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_BrowseAccessPaths(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_BrowseNodes(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_BrowseProperties(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_BrowseServers(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_GetProperty(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_ReadItem(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAClientTimeouts.set_WriteItem(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.set_MaxClientAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAEngineParameters.set_MaxTopicAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.set_HoldPeriods(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientHoldPeriods)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.set_Mode(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientMode)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDAInstanceParameters.set_Timeouts(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientTimeouts)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_ClientParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAClientParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_EngineParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDAEngineParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_MachineParameters(OpcLabs.EasyOpc.Engine.EasyMachineParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDASharedParameters.set_TopicParameters(OpcLabs.EasyOpc.DataAccess.Engine.EasyDATopicParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.Engine.ComTypes._EasyDATopicParameters.set_TopicRetrialDelay(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.set_BrowseFilter(OpcLabs.EasyOpc.DataAccess.DABrowseFilter)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.set_DataTypeFilter(OpcLabs.BaseLib.ComInterop.VarType)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DABrowseParameters.set_AccessRightsFilter(OpcLabs.EasyOpc.DataAccess.DAAccessRight)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.set_RequestedUpdateRate(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAGroupParameters.set_PercentDeadband(System.Single)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAItemDescriptor.set_RequestedDataType(OpcLabs.BaseLib.ComInterop.VarType)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAPropertyId.set_InternalValue(OpcLabs.EasyOpc.DataAccess.DAPropertyIds)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.set_InternalValue(OpcLabs.EasyOpc.DataAccess.DAQualities)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.set_LimitBitField(OpcLabs.EasyOpc.DataAccess.DALimitChoice)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.set_NumericalValue(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAQuality.set_StatusBitField(OpcLabs.EasyOpc.DataAccess.DAStatusChoice)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.set_DataSource(OpcLabs.EasyOpc.DataAccess.DADataSource)">
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <para>
             An invalid enumeration value was used.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAReadParameters.set_ValueAge(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.set_Quality(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.set_TimestampDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.set_TimestampLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.DataAccess.ComTypes._DAVtq.set_Value(System.Object)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.set_Scheme(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.ComTypes._ServerDescriptor.set_ServerCategories(OpcLabs.EasyOpc.ServerCategories)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.get_Empty">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.get_Item(System.Int32)">
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <para>
             The key specified for accessing an element in a collection did not match any key in the collection.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.set_Item(System.Int32,OpcLabs.BaseLib.Collections.Specialized.Int32Collection)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Add(System.Int32,System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidCastException">
        <para>
             An invalid casting or explicit conversion has been attempted.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.ContainsKey(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.GetEnumerator">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.Remove(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeSetDictionary.TryGetValue(System.Int32,System.Object@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.get_Empty">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.get_Item(System.Int32)">
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <para>
             The key specified for accessing an element in a collection did not match any key in the collection.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.set_Item(System.Int32,System.Object)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Add(System.Int32,System.Object)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.ContainsKey(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.GetEnumerator">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.Remove(System.Int32)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEAttributeValueDictionary.TryGetValue(System.Int32,System.Object@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_DefaultEventType">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_DefaultQuality">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_QualifiedSourceName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_QualifiedSourceName(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Time">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_Time(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_TimeDouble">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_TimeDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_TimeLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_TimeLocal(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_TimeLocalDouble">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_TimeLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Message">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_Message(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_EventType">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_EventType(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_CategoryId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_CategoryId(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Severity">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_Severity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_AttributeValues">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_AttributeValues(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_ConditionName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ConditionName(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_SubconditionName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_SubconditionName(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Quality">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_Quality(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_ActiveTime">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActiveTime(System.DateTime)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActiveTimeDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_ActiveTimeLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActiveTimeLocal(System.DateTime)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActiveTimeLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_ActiveTimeTicks">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActiveTimeTicks(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_Cookie">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_Cookie(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_ActorId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.set_ActorId(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultActiveTimeLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.DefaultTimeLocal">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ActorId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.CategoryId">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.ConditionName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.Message">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.QualifiedSourceName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventData.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.SubconditionName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_DefaultAreas">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_DefaultCategories">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_DefaultSources">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_Empty">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_DefaultEventTypes">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_Areas">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_Areas(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_Categories">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_Categories(System.Int64[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_EventTypes">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_EventTypes(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_HighSeverity">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_HighSeverity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_LowSeverity">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_LowSeverity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_Sources">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.set_Sources(OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.get_Areas">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_Areas(System.Object[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.get_Categories">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_Categories(System.Object[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
      <exception cref="T:System.InvalidCastException">
        <para>
             An invalid casting or explicit conversion has been attempted.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.get_Sources">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_Sources(System.Object[])">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.get_StandardNamedValues">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ClassInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.FindStandardName(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes,System.String@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.FindStandardEventType(System.String,OpcLabs.EasyOpc.AlarmsAndEvents.AEEventTypes@)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.get_InternalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.get_NumericalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.get_NumericalValue">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.Equals(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventType.StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.get_Null">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.get_Root">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Clone">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AENodeDescriptor.Match(System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary,System.Boolean)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter,OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientExtension.SubscribeEvents(OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient,System.String,System.String,System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.EasyAENotificationEventHandler,System.Object,OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <summary>
            Subscribe to particular OPC events. The <see cref="E:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.Notification" /> is generated for each event.
            </summary>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\PowerShell\Windows\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.ps1" lang="PowerShell" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.Main1.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.Main1.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <example>
        <h3>.NET</h3>
        <code source="..\..\Net\Examples\CSharp\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.cs" lang="CSharp" title="C#" region="Example" />
        <code source="..\..\Net\Examples\Python\CPython\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\Net.SubscribeEvents.FilterByCategories.py" lang="Python" title="Python (.NET)" region="Example" />
        <code source="..\..\Net\Examples\VBNET\VisualStudio\Console\DocExamples\AlarmsAndEvents\_EasyAEClient\SubscribeEvents.FilterByCategories.vb" lang="VB.NET" title="Visual Basic (VB.NET)" region="Example" />
      </example>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.get_PullNotificationQueueCapacity">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.set_PullNotificationQueueCapacity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient.get_SupportedTechnologies">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.get_InstanceParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.set_InstanceParameters(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEInstanceParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.get_IsolatedParameters">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClientSettings.set_IsolatedParameters(OpcLabs.EasyOpc.AlarmsAndEvents.Engine.EasyAEAdaptableParameters)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_Default">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_DefaultFilter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_NotificationRate">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.set_NotificationRate(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_Filter">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.set_Filter(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_ReturnedAttributesByCategory">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.set_ReturnedAttributesByCategory(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="P:OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionParameters.OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Plugins.Optimizer.ComTypes._AEOptimizerPluginParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.get_DefaultArguments">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.get_Arguments">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.set_Arguments(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.get_DisplayString">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.get_XmlNs">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAENotificationEventArgs.ObjectInvariant">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.ComTypes._EasyAENotificationEventArgs.set_Arguments(OpcLabs.EasyOpc.AlarmsAndEvents.OperationModel.EasyAEEventsSubscriptionArguments)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.TransformNodeDescriptorIfNeeded(OpcLabs.EasyOpc.ServerDescriptor,OpcLabs.EasyOpc.AlarmsAndEvents.AENodeDescriptor)">
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Internal.DelegatingEasyAEClient.TransformServerDescriptorIfNeeded(OpcLabs.EasyOpc.ServerDescriptor)">
      <exception cref="T:OpcLabs.EasyOpc.OperationModel.OpcException">
        <para>
            The OPC "Classic" (or OPC XML-DA) operation has failed. This operation exception in uniformly used to allow 
            common handling of various kinds of errors. The <see cref="P:System.Exception.InnerException" /> always contains
            information about the actual error cause.</para>
        <para>
            This is an operation error that depends on factors external to your program, and thus cannot be always avoided. Your code must handle it appropriately.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Implementation.HandleMappingEasyAEClient.#ctor(System.Int32,OpcLabs.EasyOpc.AlarmsAndEvents.IEasyAEClient)">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._AEClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEAdaptableParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientHoldPeriods.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientMode.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEClientParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEEngineParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAEInstanceParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAELinkParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.Engine.ComTypes._EasyAESharedParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEBrowseParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_Time(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_TimeDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_TimeLocal(System.DateTime)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_TimeLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_EventType(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_Severity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_AttributeValues(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeValueDictionary)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_Quality(OpcLabs.EasyOpc.DataAccess.DAQuality)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_ActiveTimeDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_ActiveTimeLocalDouble(System.Double)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AEEventData.set_ActiveTimeTicks(System.Int64)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_EventTypes(OpcLabs.EasyOpc.AlarmsAndEvents.AEEventType)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_LowSeverity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionFilter.set_HighSeverity(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.get_StandardName">
      <remarks>
        <para>
             This method or property does not throw any exceptions, aside from execution exceptions such as
             <see cref="T:System.Threading.ThreadAbortException" /> or <see cref="T:System.OutOfMemoryException" />. </para>
      </remarks>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.set_StandardName(System.String)">
      <exception cref="T:System.ArgumentException">
        <para>
             One of the arguments provided to a method is not valid.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.set_NotificationRate(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
             The value of an argument is outside the allowable range of values as defined by the invoked method.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.set_Filter(OpcLabs.EasyOpc.AlarmsAndEvents.AESubscriptionFilter)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
    <member name="M:OpcLabs.EasyOpc.AlarmsAndEvents.ComTypes._AESubscriptionParameters.set_ReturnedAttributesByCategory(OpcLabs.EasyOpc.AlarmsAndEvents.AEAttributeSetDictionary)">
      <exception cref="T:System.ArgumentNullException">
        <para>
             A <c>null</c> reference (<c>Nothing</c> in Visual Basic) is passed to a method that does not accept it as a valid argument.</para>
        <para>
             This is a usage error, i.e. it will never occur (the exception will not be thrown) in a correctly written program. Your code should not catch this exception.</para>
      </exception>
    </member>
  </members>
</doc>