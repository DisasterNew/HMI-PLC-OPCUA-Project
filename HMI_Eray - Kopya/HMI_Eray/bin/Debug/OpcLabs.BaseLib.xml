<?xml version="1.0"?>
<doc>
  <assembly>
    <name>OpcLabs.BaseLib</name>
  </assembly>
  <members>
    <member name="T:OpcLabs.BaseLib.Annotations.DesignableAttribute">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.ArrayEqualityComparer`1">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.InverterComparer`1">
      <exclude />
      <invariant>BaseComparer != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.ReferenceEqualityComparer`1">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.UInt32Comparer">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.ObjectModel.ObservableKeyedCollection`2">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1">
      <exclude />
      <summary> 
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list 
            is refreshed. 
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary> 
            Adds the elements of the specified collection to the end of the ObservableCollection(Of T). 
            </summary>
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary> 
            Removes the first occurence of each item in the specified collection from ObservableCollection(Of T). 
            </summary>
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.Replace(`0)">
      <summary> 
            Clears the current collection and replaces it with the specified item. 
            </summary>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
      <summary> 
            Clears the current collection and replaces it with the specified collection. 
            </summary>
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.#ctor">
      <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class. 
            </summary>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class that contains 
            elements copied from the specified collection. 
            </summary>
      <param name="collection">collection: The collection from which the elements are copied.</param>
      <exception cref="T:System.ArgumentNullException">The collection parameter cannot be null.</exception>
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1">
      <exclude />
      <remarks>
        <para>
            As opposed to ConcurrentQueue&lt;T&gt;, this class is available in pre-.NET 4, and it also supports
            a limit on the number of elements. Note that BoundedCollection&lt;T&gt; can also be used for similar purposes,
            but again it's only available in .NET 4+.</para>
        <para>
            As opposed to <see cref="T:System.Collections.Generic.Queue`1" />, this class has a bounded capacity, and offers "TryXXXX" members that do not
            throw exceptions unnecessarily.</para>
      </remarks>
      <invariant>_list != null</invariant>
      <invariant>BoundedCapacity &gt; 0</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.Utilities.DiagnosticsUtilities">
      <exclude />
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Utilities.DiagnosticsUtilities.ErrorBeep">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Reflection.Extensions.PropertyInfoExtension">
      <exclude />
    </member>
    <member name="T:System.Diagnostics.Contracts.NamespaceDoc">
      <summary>
            The System.Diagnostics.Contracts namespace contains static classes for representing program contracts such as 
            preconditions, postconditions, and invariants.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.NamespaceDoc">
      <summary>
            This namespace contains classes that provide runtime code diagnostics.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.NamespaceDoc">
      <summary>
            This namespace contains various extensions to system classes.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Contracts.PublicNoContract">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches">
      <exclude />
      <invariant>Serialize != null</invariant>
      <invariant>SwitchDictionary != null</invariant>
      <invariant>Contract.ForAll(SwitchDictionary.Values, sw =&gt; sw != null)</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs">
      <summary>
            Provides data for the log entry event handlers.
            </summary>
      <invariant>Message != null</invariant>
      <invariant>Source != null</invariant>
      <invariant>IsValidEventSource(Source)</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.#ctor(System.String,System.String)">
      <summary>
            Creates an information type entry with the given message text for the event log, using the specified event source.
            </summary>
      <param name="source">The application event source.</param>
      <param name="message">The string to write to the event log.</param>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="The event source string is invalid. It is either empty, or a null reference." exception="T:System.ArgumentException" csharp="IsValidEventSource(source)" vb="IsValidEventSource(source)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</requires>
      <exception cref="T:System.ArgumentException">!OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</exception>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <ensures csharp="this.RawData == null" vb="Me.RawData = Nothing">this.RawData == null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType)">
      <summary>
            Creates an error, warning, information, success audit, or failure audit entry with the given message text for the 
            event log, using the specified event source.
            </summary>
      <param name="source">The application event source.</param>
      <param name="message">The string to write to the event log.</param>
      <param name="entryType">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="The event source string is invalid. It is either empty, or a null reference." exception="T:System.ArgumentException" csharp="IsValidEventSource(source)" vb="IsValidEventSource(source)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</requires>
      <exception cref="T:System.ArgumentException">!OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</exception>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <ensures csharp="this.RawData == null" vb="Me.RawData = Nothing">this.RawData == null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>
            Creates an entry with the given message text and application-defined event identifier for the event log, using the 
            specified event source.
            </summary>
      <param name="source">The application event source.</param>
      <param name="message">The string to write to the event log.</param>
      <param name="entryType">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
      <param name="eventId">The application-specific identifier for the event.</param>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="The event source string is invalid. It is either empty, or a null reference." exception="T:System.ArgumentException" csharp="IsValidEventSource(source)" vb="IsValidEventSource(source)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</requires>
      <exception cref="T:System.ArgumentException">!OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</exception>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <ensures csharp="this.RawData == null" vb="Me.RawData = Nothing">this.RawData == null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>
            Creates an entry with the given message text, application-defined event identifier, and application-defined 
            category for the event log, using the specified event source. The <paramref name="category" /> can be used by the 
            Event Viewer to filter events in the log.
            </summary>
      <param name="source">The application event source.</param>
      <param name="message">The string to write to the event log.</param>
      <param name="entryType">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
      <param name="eventId">The application-specific identifier for the event.</param>
      <param name="category">The application-specific subcategory associated with the message.</param>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="The event source string is invalid. It is either empty, or a null reference." exception="T:System.ArgumentException" csharp="IsValidEventSource(source)" vb="IsValidEventSource(source)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</requires>
      <exception cref="T:System.ArgumentException">!OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</exception>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <ensures csharp="this.RawData == null" vb="Me.RawData = Nothing">this.RawData == null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.#ctor(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>
            Creates an entry with the given message text, application-defined event identifier, and application-defined 
            category for the event log (using the specified event source) and appends binary data to it.
            </summary>
      <param name="source">The application event source.</param>
      <param name="message">The string to write to the event log.</param>
      <param name="entryType">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
      <param name="eventId">The application-specific identifier for the event.</param>
      <param name="category">The application-specific subcategory associated with the message.</param>
      <param name="rawData">An array of bytes that holds the binary data associated with the entry.</param>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="The event source string is invalid. It is either empty, or a null reference." exception="T:System.ArgumentException" csharp="IsValidEventSource(source)" vb="IsValidEventSource(source)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</requires>
      <exception cref="T:System.ArgumentException">!OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(source)</exception>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(System.String)">
      <summary>
            Determines whether the given event source string is valid, i.e. not a null reference and not empty.
            </summary>
      <param name="source">The name of the event source.</param>
      <returns>
        <c>true</c> iff the event source string is valid.</returns>
      <pure />
      <ensures csharp="result == !IsNullOrEmpty(source)" vb="result = Not IsNullOrEmpty(source)">result == !string.IsNullOrEmpty(source)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.ToString">
      <inheritdoc />
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.Category">
      <summary>
            The application-specific subcategory associated with the message. 
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.EntryType">
      <summary>
            Entry type. One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values. 
            </summary>
      <remarks>
            Specifies the event type of an event log entry.
            </remarks>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.EventId">
      <summary>
            The application-specific identifier for the event. 
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.Message">
      <summary>
            The message text.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.RawData">
      <summary>
            An array of bytes that holds the binary data associated with the entry. 
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.Source">
      <summary>
            The name of the event source.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="IsValidEventSource(result)" vb="IsValidEventSource(result)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(result)</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires csharp="IsValidEventSource(value)" vb="IsValidEventSource(value)">OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.IsValidEventSource(value)</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs.Timestamp">
      <summary>
            Date and time of the log entry message.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource">
      <exclude />
      <invariant>!string.IsNullOrEmpty(SourceName)</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Resource1.NotABooleanSwitch">
      <summary>
              Looks up a localized string similar to The switch name denotes an existing switch that is not a boolean switch..
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.SymbolicCounters">
      <exclude />
      <invariant>_errors != null</invariant>
      <invariant>_serialize != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.Utilities.TraceUtilities">
      <exclude />
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Utilities.TraceUtilities.WriteSeparatorLine">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.BooleanExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.ValidatingConverter`2">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.ValidatingConverterWithWarnings`2">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Net.NetworkCredentialSurrogate">
      <exclude />
      <summary>For XML serialization.</summary>
      <invariant>NetworkCredential != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.ObjectProvider`2">
      <exclude />
      <summary>
            Provides objects according to specified selection criteria.
            </summary>
      <invariant>_objectEntryDictionary != null</invariant>
      <invariant>_serialize != null</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.ObjectProvider`2.ReleaseObject(`0)">
      <summary>
            Releases the specified object.
            </summary>
      <param name="anObject">The object to be released.</param>
      <requires description="anObject" exception="T:System.ArgumentNullException" csharp="(object)new OpcLabs.BaseLib.ObjectProvider&lt;TObject, TSelector&gt;.&lt;&gt;c__DisplayClass2(){&#xD;&#xA;    anObject = anObject, &#xD;&#xA;}.anObject != null" vb="((Object)(() =&gt; {&#xD;&#xA;    OpcLabs.BaseLib.ObjectProvider&lt;TObject, TSelector&gt;.&lt;&gt;c__DisplayClass2 local_2_prime = New OpcLabs.BaseLib.ObjectProvider(Of TObject, TSelector).&lt;&gt;c__DisplayClass2();&#xD;&#xA;    (local_2_prime.anObject = anObject)&#xD;&#xA;    return local_2_prime; })().anObject) &lt;&gt; Nothing">(object)new OpcLabs.BaseLib.ObjectProvider&lt;TObject, TSelector&gt;.&lt;&gt;c__DisplayClass2(){
    anObject = anObject, 
}.anObject != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)new OpcLabs.BaseLib.ObjectProvider&lt;TObject, TSelector&gt;.&lt;&gt;c__DisplayClass2(){
    anObject = anObject, 
}.anObject == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.ObjectProvider`2.RequestObject(`1)">
      <summary>
            Requests an object using the specified selector.
            </summary>
      <param name="selector">Describes how to select the object.</param>
      <returns>Returns an object according to the specified selector.</returns>
      <requires description="selector" exception="T:System.ArgumentNullException" csharp="(object)selector != null" vb="((Object)selector) &lt;&gt; Nothing">(object)selector != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)selector == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="T:OpcLabs.BaseLib.Reflected">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Sign">
      <summary>
            None, positive, or negative sign.
            </summary>
    </member>
    <member name="F:OpcLabs.BaseLib.Sign.Negative">
      <summary>
            Negative sign.
            </summary>
    </member>
    <member name="F:OpcLabs.BaseLib.Sign.None">
      <summary>
            No sign.
            </summary>
    </member>
    <member name="F:OpcLabs.BaseLib.Sign.Positive">
      <summary>
            Positive sign.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.InvalidValueAttribute">
      <exclude />
      <invariant>ExceptionTypeName != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.FactoryTypeAttribute">
      <exclude />
      <invariant>ClassName != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.InvalidValuesAttribute">
      <exclude />
      <invariant>ExceptionTypeName != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.ValidValueAttribute">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.ValidValuesAttribute">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.ExclusiveExecution">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.InstancesAttribute">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Testing.TesterAttribute">
      <exclude />
      <invariant>TesterTypeName != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion">
      <exclude />
      <invariant description="RegionName is not a null reference or a valid region name.">(RegionName == null) || IsValidRegionName(RegionName)</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.InterlockedExecution">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.InterlockedExecutionRegion">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.Utilities.MonitorUtilities">
      <exclude />
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.Utilities.MonitorUtilities.IsOwned(System.Object)">
      <remarks>This is an attempt to simulate Monitor.IsEntered for pre-.NET 4.5. 
            Has side effect for Monitor.Wait.</remarks>
      <requires description="obj" exception="T:System.ArgumentNullException" csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
      <exception cref="T:System.ArgumentNullException">obj == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.Utilities.MonitorUtilities.PossiblyEntered(System.Object)">
      <remarks>
        <para>
            This is an attempt to simulate Monitor.IsEntered for pre-.NET 4.5. 
            False positives are allowed.</para>
        <para>
            This method uses a secondary thread for evaluation, and is thus quite inefficient.
            </para>
      </remarks>
      <requires description="obj" exception="T:System.ArgumentNullException" csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
      <exception cref="T:System.ArgumentNullException">obj == null</exception>
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.ArrayUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.BooleanUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.ConvertUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Utilities.EnumerableUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Utilities.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Utilities.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Utilities.Resource1.ConvertUtilities_ChangeTypeFormatExceptionDetail">
      <summary>
              Looks up a localized string similar to The specified original value (string) was "{0}"..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Utilities.Resource1.ConvertUtilities_CheckedChangeType_ExceptionDetail_Object_Type">
      <summary>
              Looks up a localized string similar to Attempting to change an object of type '{0}' to type '{1}'..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Utilities.Resource1.ConvertUtilities_CheckedChangeType_OverflowExceptionDetail">
      <summary>
              Looks up a localized string similar to The specified original value (number) was {0}..
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.SignUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.TypeCodeUtilities">
      <exclude />
      <invariant>ConvertTypes != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.NamespaceDoc">
      <summary>
            This namespace contains classes that work with graphs.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.NamespaceDoc">
      <summary>
            This namespace contains commonly used fundamental and supporting classes.
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.UriUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.Utilities.WaitHandleUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.SystemAssemblyNames">
      <exclude />
      <invariant>Design != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.AssemblyNames">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.PublicKeyTokens">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.ActivatorUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.ArrayExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Reflection.AssemblyLoader">
      <exclude />
      <invariant>AssemblyDictionary != null</invariant>
      <invariant>Contract.ForAll(AssemblyDictionary, pair =&gt; (pair.Key != null) &amp;&amp; (pair.Value != null))</invariant>
      <invariant>Serialize != null</invariant>
      <invariant>ConfigurationSection != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Diagnostics.Call">
      <exclude />
      <invariant>_stopwatch != null</invariant>
      <invariant>Area != null</invariant>
      <invariant>Details != null</invariant>
      <invariant>Epilog != null</invariant>
      <invariant>Name != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Cls">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Drawing.Utilities.BitmapUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.IServiceProviderExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.MathUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.CookieManager">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Instrumentation">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.DictionaryEntry`2">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.ExceptionExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Extensions.ICollectionExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Extensions.ListExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.ArrayExtension_Add_NotSingleDimensional">
      <summary>
              Looks up a localized string similar to Attempt to add to an array that is not single-dimensional..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.AssemblyExtension_SafeCreateInstance_TypeLoadFailure">
      <summary>
              Looks up a localized string similar to Failed to load type '{0}' from assembly '{1}'..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.DictionaryExtension_ExistingKey">
      <summary>
              Looks up a localized string similar to Attempt to add existing key into a dictionary..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.DictionaryExtension_NonExistingKey">
      <summary>
              Looks up a localized string similar to Attempt to remove non-existing key from a dictionary..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.ExceptionExtension_AddDetail_NoInternalMessage">
      <summary>
              Looks up a localized string similar to Cannot add detail to an exception of type '{0}' that has no internal message..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.ExceptionExtension_InternalMessageNotAvailable">
      <summary>
              Looks up a localized string similar to The InternalMessage logical extension property of the Exception type is not available..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.HashSetExtension_ExistingItem">
      <summary>
              Looks up a localized string similar to Attempt to add existing item into a hash set..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.HashSetExtension_NonExistingItem">
      <summary>
              Looks up a localized string similar to Attempt to remove non-existing item from a hash set..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.KeyedCollectionExtension_ExistingItem">
      <summary>
              Looks up a localized string similar to Attempt to add existing item into a keyed collection..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Extensions.Resource1.ListExtension_ExistingItem">
      <summary>
              Looks up a localized string similar to The item already exists in the list..
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.Utilities.TimeoutUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Xml.Serialization.Extensions.XmlSerializerExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.HandleManager`1">
      <exclude />
      <invariant>_serialize != null</invariant>
      <invariant>_objectDictionary != null</invariant>
      <invariant>Contract.ForAll(_objectDictionary, pair =&gt; pair.Key != InvalidHandle)</invariant>
      <invariant>Contract.ForAll(_objectDictionary, pair =&gt; pair.Value != null)</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension">
      <exclude />
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.LongTake``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
      <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from 
            the start of the input sequence.
            </returns>
      <param name="source">The sequence to return elements from. </param>
      <param name="count">The number of elements to return. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.
            </returns>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
            </exception>
      <requires description="first" exception="T:System.ArgumentNullException" csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <exception cref="T:System.ArgumentNullException">first == null</exception>
      <requires description="second" exception="T:System.ArgumentNullException" csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <exception cref="T:System.ArgumentNullException">second == null</exception>
      <requires description="resultSelector" exception="T:System.ArgumentNullException" csharp="resultSelector != null" vb="resultSelector &lt;&gt; Nothing">resultSelector != null</requires>
      <exception cref="T:System.ArgumentNullException">resultSelector == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="T:OpcLabs.BaseLib.Contracts.NoContract">
      <exclude />
      <remarks>
            Note that <see cref="T:OpcLabs.BaseLib.Contracts.NoContract" /> is not suitable for external surface, as its methods are only present in DEBUG 
            configuration.Use <see cref="T:OpcLabs.BaseLib.Contracts.PublicNoContract" /> instead for external surface.
            </remarks>
    </member>
    <member name="T:OpcLabs.BaseLib.Reflection.Utilities.AssemblyUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.StringUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.TypeUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.MemberNotFoundException">
      <tocexclude />
      <summary>
            An exception thrown when the member with the specified name has not been found.
            </summary>
      <invariant>MemberName != null</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.MemberNotFoundException.#ctor(System.String)">
      <overloads>
        <summary>
             Initializes a new instance of the class.
             </summary>
      </overloads>
      <param name="memberName">The name of the member that has not been found.</param>
      <requires description="memberName" exception="T:System.ArgumentNullException" csharp="memberName != null" vb="memberName &lt;&gt; Nothing">memberName != null</requires>
      <exception cref="T:System.ArgumentNullException">memberName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.MemberNotFoundException.#ctor(System.String,System.String)">
      <param name="message">The message that describes the error.</param>
      <param name="memberName">The name of the member that has not been found.</param>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <requires description="memberName" exception="T:System.ArgumentNullException" csharp="memberName != null" vb="memberName &lt;&gt; Nothing">memberName != null</requires>
      <exception cref="T:System.ArgumentNullException">memberName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.MemberNotFoundException.#ctor(System.String,System.Exception,System.String)">
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference 
            (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
      <param name="memberName">The name of the member that has not been found.</param>
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
      <requires description="memberName" exception="T:System.ArgumentNullException" csharp="memberName != null" vb="memberName &lt;&gt; Nothing">memberName != null</requires>
      <exception cref="T:System.ArgumentNullException">memberName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.MemberNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
      <requires description="info" exception="T:System.ArgumentNullException" csharp="info != null" vb="info &lt;&gt; Nothing">info != null</requires>
      <exception cref="T:System.ArgumentNullException">info == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.MemberNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the 
            exception.</summary>
      <param name="info">
        <inheritdoc />
      </param>
      <param name="context">
        <inheritdoc />
      </param>
      <requires description="info" exception="T:System.ArgumentNullException" csharp="info != null" vb="info &lt;&gt; Nothing">info != null</requires>
      <exception cref="T:System.ArgumentNullException">info == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.MemberNotFoundException.MemberName">
      <summary>
            The name of the member that has not been found.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.ITreeEnumerable`1">
      <summary>
            Exposes the tree enumerator, which supports iteration over a tree of nodes of a specified type.
            </summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.ITreeEnumerable`1.GetTreeEnumerator">
      <summary>
            Returns a tree enumerator that iterates through the tree.
            </summary>
      <returns>An <see cref="T:OpcLabs.BaseLib.Graphs.ITreeEnumerator`1" /> that can be used to iterate through the tree.</returns>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.ITreeEnumerator`1">
      <summary>
            Supports iteration over a generic tree.
            </summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.ITreeEnumerator`1.GetChildEnumerator">
      <summary>
            Returns a tree enumerator that iterates through the child nodes of current node.
            </summary>
      <returns>An <see cref="T:OpcLabs.BaseLib.Graphs.ITreeEnumerator`1" /> that can be used to iterate through the child nodes.</returns>
    </member>
    <member name="T:OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Text.MacroExpander">
      <exclude />
      <invariant>_macroDictionary != null</invariant>
      <invariant>Contract.ForAll(_macroDictionary, pair =&gt; (pair.Key != null) &amp;&amp; (pair.Value != null))</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Runtime.InteropServices.Utilities.MarshalUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Utilities.ObjectUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.OleAutomation">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Text.ParameterStrings">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Threading.PeriodicWorker">
      <exclude />
      <invariant>ExecuteAction != null</invariant>
      <invariant>MillisecondsPeriod &gt;= 0</invariant>
      <invariant>_workerThread != null</invariant>
      <invariant>_stopEventWaitHandle != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.PlatformRegistry">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.AssemblyLoader_AddUseLegacyV2RuntimeActivationPolicyTrue">
      <summary>
              Looks up a localized string similar to In order to load the required mixed mode assembly, please add useLegacyV2RuntimeActivationPolicy="true" attribute to the 'startup' element in the configuration file. For more details, see documentation for this attribute on MSDN..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.AssemblyLoader_LoadExtended_NullSimpleName">
      <summary>
              Looks up a localized string similar to Attempt to extended load of assembly with a null simple name..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Cls_ArrayRankNotPositive">
      <summary>
              Looks up a localized string similar to CLS-compliant arrays must have a fixed number of dimensions, greater than zero..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Cls_CannotConvertObjectToClsCompliantType">
      <summary>
              Looks up a localized string similar to Cannot convert object to CLS-compliant type..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Cls_CannotDetermineArrayElementType">
      <summary>
              Looks up a localized string similar to Cannot determine array element type when converting to CLS-compliant type..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Cls_ConvertToClsArray_AllArrayDimensionsMustHaveZeroLowerBound">
      <summary>
              Looks up a localized string similar to All dimensions of a CLS-compliant array must have a zero lower bound..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.Cls_NoClsCompliantTypeForArrayElements">
      <summary>
              Looks up a localized string similar to There is no CLS-compliant type for the array elements..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.HandleManager_NonExistingHandle">
      <summary>
              Looks up a localized string similar to Attempt to free non-existing handle from the manager..
            </summary>
    </member>
    <member name="P:OpcLabs.BaseLib.Resource1.MemberNotFoundException_DefaultMessage">
      <summary>
              Looks up a localized string similar to The member with the specified name has not been found..
            </summary>
    </member>
    <member name="T:OpcLabs.BaseLib.Runtime.InteropServices.Utilities.RuntimeEnvironmentUtilities">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.IO.Extensions.StreamExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.StringExtension">
      <exclude />
    </member>
    <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
      <summary>
            Describes dependency between method input and output
            </summary>
      <syntax>
        <p>Function Definition Table syntax:</p>
        <list>
          <item>FDT      ::= FDTRow [;FDTRow]*</item>
          <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
          <item>Input    ::= ParameterName: Value [, Input]*</item>
          <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
          <item>Value    ::= true | false | null | notnull | canbenull</item>
        </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br /><c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br /></syntax>
      <examples>
        <list>
          <item>
            <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
          </item>
          <item>
            <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
          </item>
        </list>
      </examples>
    </member>
    <member name="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.ContractAnnotationAttribute.Contract">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.ContractAnnotationAttribute.ForceFullStates">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
      <tocexclude />
      <summary>
            Indicates that marked element should be localized or not.
            </summary>
    </member>
    <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
      <tocexclude />
      <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" /> class.
            </summary>
      <param name="required">
        <c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
    </member>
    <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
      <tocexclude />
      <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" />.
            </summary>
      <param name="obj">The object to test the value equality of. </param>
      <returns>
        <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
      <tocexclude />
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute" />.</returns>
    </member>
    <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
      <tocexclude />
      <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value></summary>
    </member>
    <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
      <tocexclude />
      <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> -like form
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.StringFormatMethodAttribute.myFormatParameterName">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <tocexclude />
      <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
      <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
    </member>
    <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
      <tocexclude />
      <summary>
            Gets format parameter name
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
      <tocexclude />
      <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException" /> has such parameter.
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
      <tocexclude />
      <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute
            </summary>
      <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute" />
    </member>
    <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
      <tocexclude />
      <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
      <seealso cref="T:JetBrains.Annotations.AssertionConditionType" />
    </member>
    <member name="F:JetBrains.Annotations.AssertionConditionAttribute.myConditionType">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <tocexclude />
      <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
      <param name="conditionType">Specifies condition type</param>
    </member>
    <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
      <tocexclude />
      <summary>
            Gets condition type
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.AssertionConditionType">
      <tocexclude />
      <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
      <tocexclude />
      <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
      <tocexclude />
      <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
      <tocexclude />
      <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
      <tocexclude />
      <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
      <tocexclude />
      <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.CanBeNullAttribute">
      <tocexclude />
      <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.NotNullAttribute">
      <tocexclude />
      <summary>
            Indicates that the value of marked element could never be <c>null</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
      <tocexclude />
      <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
      <tocexclude />
      <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
      <example>
        <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
      </example>
    </member>
    <member name="F:JetBrains.Annotations.BaseTypeRequiredAttribute.myBaseTypes">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <tocexclude />
      <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
      <param name="baseType">Specifies which types are required</param>
    </member>
    <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
      <tocexclude />
      <summary>
            Gets enumerations of specified base types
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
      <tocexclude />
      <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.UseKindFlags">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
      <tocexclude />
      <summary>
            Gets value indicating what is meant to be used
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
      <tocexclude />
      <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseKindFlags)">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.UseKindFlags">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
      <tocexclude />
      <summary>
            Gets value indicating what is meant to be used
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
      <tocexclude />
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Default">
      <tocexclude />
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
      <tocexclude />
      <summary>
            Only entity marked with attribute considered used
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
      <tocexclude />
      <summary>
            Indicates implicit assignment to a member
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
      <tocexclude />
      <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
      <tocexclude />
      <summary>
            Indicates implicit instantiation of a type
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
      <tocexclude />
      <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /></summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Default">
      <tocexclude />
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Itself">
      <tocexclude />
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
      <tocexclude />
      <summary>
            Members of entity marked with attribute are considered used
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
      <tocexclude />
      <summary>
            Entity marked with attribute and all its members considered used
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.PublicAPIAttribute">
      <tocexclude />
      <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
    </member>
    <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.PublicAPIAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.InstantHandleAttribute">
      <tocexclude />
      <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.PureAttribute">
      <tocexclude />
      <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute" /></summary>
    </member>
    <member name="T:JetBrains.Annotations.PathReferenceAttribute">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.PathReferenceAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.PathReferenceAttribute.BasePath">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.AspMvcControllerAttribute.AnonymousProperty">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.AspMvcAreaAttribute.AnonymousProperty">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor">
      <tocexclude />
    </member>
    <member name="M:JetBrains.Annotations.AspMvcActionAttribute.#ctor(System.String)">
      <tocexclude />
    </member>
    <member name="P:JetBrains.Annotations.AspMvcActionAttribute.AnonymousProperty">
      <tocexclude />
    </member>
    <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
      <tocexclude />
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ValidatedNotNullAttribute">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.TimePlus">
      <exclude />
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerable`1">
      <summary>
        <see cref="T:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerable`1" /> is an "adapter" that converts <see cref="T:OpcLabs.BaseLib.Graphs.ITreeEnumerable`1" /> to 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> by flattening the tree.
            </summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
      <invariant>_treeEnumerable != null</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerable`1.#ctor(OpcLabs.BaseLib.Graphs.ITreeEnumerable{`0})">
      <summary>
            Initializes a new instance of the class with given underlying tree.
            </summary>
      <param name="treeEnumerable">The tree enumerable to be flattened.</param>
      <requires description="treeEnumerable" exception="T:System.ArgumentNullException" csharp="treeEnumerable != null" vb="treeEnumerable &lt;&gt; Nothing">treeEnumerable != null</requires>
      <exception cref="T:System.ArgumentNullException">treeEnumerable == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerable`1.GetEnumerator">
      <inheritdoc />
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1">
      <exclude />
      <invariant>_rootTreeEnumerator != null</invariant>
      <invariant>_traversalStateStack != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Extensions.TypeExtension">
      <exclude />
    </member>
    <member name="M:OpcLabs.BaseLib.IO.Extensions.StreamExtension.BinaryDeserialize(System.IO.Stream)">
      <requires description="stream" exception="T:System.ArgumentNullException" csharp="stream != null" vb="stream &lt;&gt; Nothing">stream != null</requires>
      <exception cref="T:System.ArgumentNullException">stream == null</exception>
      <requires exception="T:System.ArgumentException" csharp="stream.CanSeek" vb="stream.CanSeek">stream.CanSeek</requires>
      <exception cref="T:System.ArgumentException">!stream.CanSeek</exception>
      <requires exception="T:System.ArgumentException" csharp="stream.Length &gt; (long)0" vb="stream.Length &gt; ((Long )0)">stream.Length &gt; (long)0</requires>
      <exception cref="T:System.ArgumentException">stream.Length &lt;= (long)0</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.IO.Extensions.StreamExtension.BinaryDeserialize``1(System.IO.Stream)">
      <requires description="stream" exception="T:System.ArgumentNullException" csharp="stream != null" vb="stream &lt;&gt; Nothing">stream != null</requires>
      <exception cref="T:System.ArgumentNullException">stream == null</exception>
      <requires exception="T:System.ArgumentException" csharp="stream.CanSeek" vb="stream.CanSeek">stream.CanSeek</requires>
      <exception cref="T:System.ArgumentException">!stream.CanSeek</exception>
      <requires exception="T:System.ArgumentException" csharp="stream.Length &gt; (long)0" vb="stream.Length &gt; ((Long )0)">stream.Length &gt; (long)0</requires>
      <exception cref="T:System.ArgumentException">stream.Length &lt;= (long)0</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.IO.Extensions.StreamExtension.BinarySerialize(System.IO.Stream,System.Object)">
      <requires description="stream" exception="T:System.ArgumentNullException" csharp="stream != null" vb="stream &lt;&gt; Nothing">stream != null</requires>
      <exception cref="T:System.ArgumentNullException">stream == null</exception>
      <requires description="graph" exception="T:System.ArgumentNullException" csharp="graph != null" vb="graph &lt;&gt; Nothing">graph != null</requires>
      <exception cref="T:System.ArgumentNullException">graph == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.IO.Extensions.StreamExtension.CopyTo(System.IO.Stream,System.IO.Stream)">
      <requires description="stream" exception="T:System.ArgumentNullException" csharp="stream != null" vb="stream &lt;&gt; Nothing">stream != null</requires>
      <exception cref="T:System.ArgumentNullException">stream == null</exception>
      <requires description="destination" exception="T:System.ArgumentNullException" csharp="destination != null" vb="destination &lt;&gt; Nothing">destination != null</requires>
      <exception cref="T:System.ArgumentNullException">destination == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1.#ctor(System.Int32)">
      <requires description="The boundedCapacity is not a positive value." exception="T:System.ArgumentOutOfRangeException" csharp="boundedCapacity &gt; 0" vb="boundedCapacity &gt; 0">boundedCapacity &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">boundedCapacity &lt;= 0</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1.#ctor(System.Int32,System.Int32)">
      <requires description="The boundedCapacity is not a positive value." exception="T:System.ArgumentOutOfRangeException" csharp="boundedCapacity &gt; 0" vb="boundedCapacity &gt; 0">boundedCapacity &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">boundedCapacity &lt;= 0</exception>
      <requires description="initialCapacity is less than 0." exception="T:System.ArgumentOutOfRangeException" csharp="initialCapacity &gt;= 0" vb="initialCapacity &gt;= 0">initialCapacity &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">initialCapacity &lt; 0</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1.LossyEnqueue(`0)">
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1.TryEnqueue(`0)">
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Collections.ThreadSafe.ThreadSafeQueue`1.BoundedCapacity">
      <getter>
        <ensures csharp="result &gt; 0" vb="result &gt; 0">result &gt; 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt; 0" vb="value &gt; 0">value &gt; 0</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.DictionaryEntry`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~OpcLabs.BaseLib.Collections.Generic.DictionaryEntry{`0,`1}">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.DictionaryEntry`2.FromKeyPair(System.Collections.Generic.KeyValuePair{`0,`1})">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.UInt32Comparer.Compare(System.UInt32,System.UInt32)">
      <ensures csharp="-1 &lt;= result" vb="-1 &lt;= result">-1 &lt;= result</ensures>
      <ensures csharp="result &lt;= 1" vb="result &lt;= 1">result &lt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Utilities.EnumerableUtilities.Infinite``1(``0)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.ICollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.ICollectionExtension.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <requires description="collection" exception="T:System.ArgumentNullException" csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <exception cref="T:System.ArgumentNullException">collection == null</exception>
      <requires description="items" exception="T:System.ArgumentNullException" csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
      <exception cref="T:System.ArgumentNullException">items == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension.AddNew``1(System.Collections.Generic.HashSet{``0},``0)">
      <requires description="hashSet" exception="T:System.ArgumentNullException" csharp="hashSet != null" vb="hashSet &lt;&gt; Nothing">hashSet != null</requires>
      <exception cref="T:System.ArgumentNullException">hashSet == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <requires exception="T:System.ArgumentException" csharp="!hashSet.Contains(item)" vb="Not hashSet.Contains(item)">!hashSet.Contains(item)</requires>
      <exception cref="T:System.ArgumentException">hashSet.Contains(item)</exception>
      <ensures csharp="hashSet.Contains(item)" vb="hashSet.Contains(item)">hashSet.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension.AddWithContract``1(System.Collections.Generic.HashSet{``0},``0)">
      <requires description="hashSet" exception="T:System.ArgumentNullException" csharp="hashSet != null" vb="hashSet &lt;&gt; Nothing">hashSet != null</requires>
      <exception cref="T:System.ArgumentNullException">hashSet == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <ensures csharp="hashSet.Contains(item)" vb="hashSet.Contains(item)">hashSet.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension.RemoveExisting``1(System.Collections.Generic.HashSet{``0},``0)">
      <requires description="hashSet" exception="T:System.ArgumentNullException" csharp="hashSet != null" vb="hashSet &lt;&gt; Nothing">hashSet != null</requires>
      <exception cref="T:System.ArgumentNullException">hashSet == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <requires exception="T:System.ArgumentException" csharp="hashSet.Contains(item)" vb="hashSet.Contains(item)">hashSet.Contains(item)</requires>
      <exception cref="T:System.ArgumentException">!hashSet.Contains(item)</exception>
      <ensures csharp="!hashSet.Contains(item)" vb="Not hashSet.Contains(item)">!hashSet.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension.RemoveWithContract``1(System.Collections.Generic.HashSet{``0},``0)">
      <requires description="hashSet" exception="T:System.ArgumentNullException" csharp="hashSet != null" vb="hashSet &lt;&gt; Nothing">hashSet != null</requires>
      <exception cref="T:System.ArgumentNullException">hashSet == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <ensures csharp="!hashSet.Contains(item)" vb="Not hashSet.Contains(item)">!hashSet.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.HashSetExtension.ToArray``1(System.Collections.Generic.HashSet{``0})">
      <requires description="hashSet" exception="T:System.ArgumentNullException" csharp="hashSet != null" vb="hashSet &lt;&gt; Nothing">hashSet != null</requires>
      <exception cref="T:System.ArgumentNullException">hashSet == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="action" exception="T:System.ArgumentNullException" csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
      <exception cref="T:System.ArgumentNullException">action == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.HashCodeOfElements``1(System.Collections.Generic.IEnumerable{``0})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.HashCodeOfElements``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.LongTakeIterator``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.NonNullLast``1(System.Collections.Generic.IEnumerable{``0})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires csharp="Count&lt;TSource&gt;(source) &gt; 0" vb="Count(source) &gt; 0">System.Linq.Enumerable.Count&lt;TSource&gt;(source) &gt; 0</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.NonNullSingle``1(System.Collections.Generic.IEnumerable{``0})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires csharp="Count&lt;TSource&gt;(source) == 1" vb="Count(source) = 1">System.Linq.Enumerable.Count&lt;TSource&gt;(source) == 1</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.SequenceMatch``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
      <requires description="first" exception="T:System.ArgumentNullException" csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <exception cref="T:System.ArgumentNullException">first == null</exception>
      <requires description="second" exception="T:System.ArgumentNullException" csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <exception cref="T:System.ArgumentNullException">second == null</exception>
      <requires description="matcher" exception="T:System.ArgumentNullException" csharp="matcher != null" vb="matcher &lt;&gt; Nothing">matcher != null</requires>
      <exception cref="T:System.ArgumentNullException">matcher == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.SequenceMatch``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Int64)">
      <requires description="first" exception="T:System.ArgumentNullException" csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <exception cref="T:System.ArgumentNullException">first == null</exception>
      <requires description="second" exception="T:System.ArgumentNullException" csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <exception cref="T:System.ArgumentNullException">second == null</exception>
      <requires description="matcher" exception="T:System.ArgumentNullException" csharp="local_4.matcher != null" vb="local_4.matcher &lt;&gt; Nothing">local_4.matcher != null</requires>
      <exception cref="T:System.ArgumentNullException">local_4.matcher == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.SoloElementOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.SoloElementOrValue``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.IEnumerableExtension.ZipIterator``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <requires description="first" exception="T:System.ArgumentNullException" csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <exception cref="T:System.ArgumentNullException">first == null</exception>
      <requires description="second" exception="T:System.ArgumentNullException" csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <exception cref="T:System.ArgumentNullException">second == null</exception>
      <requires description="resultSelector" exception="T:System.ArgumentNullException" csharp="resultSelector != null" vb="resultSelector &lt;&gt; Nothing">resultSelector != null</requires>
      <exception cref="T:System.ArgumentNullException">resultSelector == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.AddNew``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
      <requires exception="T:System.ArgumentException" csharp="!dictionary.ContainsKey(key)" vb="Not dictionary.ContainsKey(key)">!dictionary.ContainsKey(key)</requires>
      <exception cref="T:System.ArgumentException">dictionary.ContainsKey(key)</exception>
      <ensures csharp="dictionary.ContainsKey(key)" vb="dictionary.ContainsKey(key)">dictionary.ContainsKey(key)</ensures>
      <ensures csharp="1 &lt;= dictionary.Count" vb="1 &lt;= dictionary.Count">1 &lt;= dictionary.Count</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.AddWithContract``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
      <ensures csharp="dictionary.ContainsKey(key)" vb="dictionary.ContainsKey(key)">dictionary.ContainsKey(key)</ensures>
      <ensures csharp="1 &lt;= dictionary.Count" vb="1 &lt;= dictionary.Count">1 &lt;= dictionary.Count</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.LookupValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.RemoveExisting``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
      <requires csharp="dictionary.ContainsKey(key)" vb="dictionary.ContainsKey(key)">dictionary.ContainsKey(key)</requires>
      <ensures csharp="!dictionary.ContainsKey(key)" vb="Not dictionary.ContainsKey(key)">!dictionary.ContainsKey(key)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.RemoveWithContract``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
      <ensures csharp="!dictionary.ContainsKey(key)" vb="Not dictionary.ContainsKey(key)">!dictionary.ContainsKey(key)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.DictionaryExtension.TryGetValueWithContract``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
      <requires description="dictionary" exception="T:System.ArgumentNullException" csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">dictionary == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.ListExtension.AddNew``1(System.Collections.Generic.List{``0},``0)">
      <requires description="list" exception="T:System.ArgumentNullException" csharp="list != null" vb="list &lt;&gt; Nothing">list != null</requires>
      <exception cref="T:System.ArgumentNullException">list == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <requires exception="T:System.ArgumentException" csharp="!list.Contains(item)" vb="Not list.Contains(item)">!list.Contains(item)</requires>
      <exception cref="T:System.ArgumentException">list.Contains(item)</exception>
      <ensures csharp="list.Contains(item)" vb="list.Contains(item)">list.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.Extensions.ListExtension.AddWithContract``1(System.Collections.Generic.List{``0},``0)">
      <requires description="list" exception="T:System.ArgumentNullException" csharp="list != null" vb="list &lt;&gt; Nothing">list != null</requires>
      <exception cref="T:System.ArgumentNullException">list == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <ensures csharp="list.Contains(item)" vb="list.Contains(item)">list.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.InverterComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <requires description="baseComparer" exception="T:System.ArgumentNullException" csharp="baseComparer != null" vb="baseComparer &lt;&gt; Nothing">baseComparer != null</requires>
      <exception cref="T:System.ArgumentNullException">baseComparer == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.Generic.InverterComparer`1.Compare(`0,`0)">
      <ensures csharp="-1 &lt;= result" vb="-1 &lt;= result">-1 &lt;= result</ensures>
      <ensures csharp="result &lt;= 1" vb="result &lt;= 1">result &lt;= 1</ensures>
    </member>
    <member name="P:OpcLabs.BaseLib.Collections.Generic.InverterComparer`1.BaseComparer">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension.AddNew``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``1)">
      <requires description="keyedCollection" exception="T:System.ArgumentNullException" csharp="keyedCollection != null" vb="keyedCollection &lt;&gt; Nothing">keyedCollection != null</requires>
      <exception cref="T:System.ArgumentNullException">keyedCollection == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
      <requires exception="T:System.ArgumentException" csharp="!PureContains&lt;TKey, TValue&gt;(keyedCollection, item)" vb="Not PureContains(keyedCollection, item)">!OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension.PureContains&lt;TKey, TValue&gt;(keyedCollection, item)</requires>
      <exception cref="T:System.ArgumentException">OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension.PureContains&lt;TKey, TValue&gt;(keyedCollection, item)</exception>
      <ensures csharp="keyedCollection.Contains(item)" vb="keyedCollection.Contains(item)">keyedCollection.Contains(item)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension.PureContains``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``1)">
      <pure />
      <requires description="keyedCollection" exception="T:System.ArgumentNullException" csharp="keyedCollection != null" vb="keyedCollection &lt;&gt; Nothing">keyedCollection != null</requires>
      <exception cref="T:System.ArgumentNullException">keyedCollection == null</exception>
      <requires description="item" exception="T:System.ArgumentNullException" csharp="(object)item != null" vb="((Object)item) &lt;&gt; Nothing">(object)item != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)item == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.Extensions.KeyedCollectionExtension.TryGetValue``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0,``1@)">
      <requires description="keyedCollection" exception="T:System.ArgumentNullException" csharp="keyedCollection != null" vb="keyedCollection &lt;&gt; Nothing">keyedCollection != null</requires>
      <exception cref="T:System.ArgumentNullException">keyedCollection == null</exception>
      <requires description="key" exception="T:System.ArgumentNullException" csharp="(object)key != null" vb="((Object)key) &lt;&gt; Nothing">(object)key != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)key == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Collections.ObjectModel.ObservableKeyedCollection`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <requires description="eventArgs" exception="T:System.ArgumentNullException" csharp="eventArgs != null" vb="eventArgs &lt;&gt; Nothing">eventArgs != null</requires>
      <exception cref="T:System.ArgumentNullException">eventArgs == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Xml.Serialization.Extensions.XmlSerializerExtension.DeserializeNotNull(System.Xml.Serialization.XmlSerializer,System.Xml.XmlReader)">
      <requires description="xmlSerializer" exception="T:System.ArgumentNullException" csharp="xmlSerializer != null" vb="xmlSerializer &lt;&gt; Nothing">xmlSerializer != null</requires>
      <exception cref="T:System.ArgumentNullException">xmlSerializer == null</exception>
      <requires description="xmlReader" exception="T:System.ArgumentNullException" csharp="xmlReader != null" vb="xmlReader &lt;&gt; Nothing">xmlReader != null</requires>
      <exception cref="T:System.ArgumentNullException">xmlReader == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.InterlockedExecution.#ctor(OpcLabs.BaseLib.Threading.InterlockedExecutionRegion)">
      <requires description="region" exception="T:System.ArgumentNullException" csharp="region != null" vb="region &lt;&gt; Nothing">region != null</requires>
      <exception cref="T:System.ArgumentNullException">region == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.Utilities.MonitorUtilities.TestEnter(System.Object)">
      <requires description="obj" exception="T:System.ArgumentNullException" csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
      <exception cref="T:System.ArgumentNullException">obj == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.Utilities.TimeoutUtilities.IsValidTimeout(System.Int32)">
      <pure />
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.Utilities.WaitHandleUtilities.WaitAllBetter(System.Threading.WaitHandle[])">
      <requires description="waitHandles" exception="T:System.ArgumentNullException" csharp="waitHandles != null" vb="waitHandles &lt;&gt; Nothing">waitHandles != null</requires>
      <exception cref="T:System.ArgumentNullException">waitHandles == null</exception>
      <requires description="waitHandles is an array with no elements." exception="T:System.ArgumentNullException" csharp="waitHandles.Length != 0" vb="waitHandles.Length &lt;&gt; 0">waitHandles.Length != 0</requires>
      <exception cref="T:System.ArgumentNullException">waitHandles.Length == 0</exception>
      <requires description="One or more of the objects in the waitHandles array are null." exception="T:System.ArgumentNullException" csharp="for all i where 0 &lt;= i &lt; waitHandles.Length :: waitHandles[i] != null" vb="for all i where 0 &lt;= i &lt; waitHandles.Length :: waitHandles(i) &lt;&gt; Nothing">for all i where 0 &lt;= i &lt; waitHandles.Length :: waitHandles[i] != null</requires>
      <exception cref="T:System.ArgumentNullException">!System.Diagnostics.Contracts.Contract.ForAll(0, waitHandles.Length, (int i) =&gt; (waitHandles[i] != null))</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecution.#ctor(System.String,System.Boolean,System.Int32)">
      <requires description="regionName is not a null reference or a valid region name." exception="T:System.ArgumentException" csharp="regionName == default(string) || IsValidRegionName(regionName)" vb="regionName = Nothing OrElse IsValidRegionName(regionName)">regionName == default(string) || OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName)</requires>
      <exception cref="T:System.ArgumentException">regionName != default(string) ? !OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName) : !true</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecution.MakeMutexName(System.String,System.Boolean)">
      <requires description="regionName is not a null reference or a valid region name." exception="T:System.ArgumentException" csharp="regionName == default(string) || IsValidRegionName(regionName)" vb="regionName = Nothing OrElse IsValidRegionName(regionName)">regionName == default(string) || OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName)</requires>
      <exception cref="T:System.ArgumentException">regionName != default(string) ? !OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName) : !true</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecution.InitMutex(System.String)">
      <requires description="mutexName" exception="T:System.ArgumentNullException" csharp="mutexName != null" vb="mutexName &lt;&gt; Nothing">mutexName != null</requires>
      <exception cref="T:System.ArgumentNullException">mutexName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.#ctor(System.String,System.Boolean)">
      <requires description="regionName is not a null reference or a valid region name." exception="T:System.ArgumentException" csharp="regionName == default(string) || IsValidRegionName(regionName)" vb="regionName = Nothing OrElse IsValidRegionName(regionName)">regionName == default(string) || OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName)</requires>
      <exception cref="T:System.ArgumentException">regionName != default(string) ? !OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(regionName) : !true</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(System.String)">
      <pure />
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.WaitBegin">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.WaitBegin(System.Int32)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="P:OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.RegionName">
      <getter>
        <ensures description="RegionName is not a null reference or a valid region name." csharp="result == default(string) || IsValidRegionName(result)" vb="result = Nothing OrElse IsValidRegionName(result)">result == default(string) || OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(result)</ensures>
      </getter>
      <setter>
        <requires description="RegionName is not a null reference or a valid region name." csharp="value == default(string) || IsValidRegionName(value)" vb="value = Nothing OrElse IsValidRegionName(value)">value == default(string) || OpcLabs.BaseLib.Threading.ExclusiveExecutionRegion.IsValidRegionName(value)</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.PeriodicWorker.#ctor(System.Action)">
      <requires description="executeAction" exception="T:System.ArgumentNullException" csharp="executeAction != null" vb="executeAction &lt;&gt; Nothing">executeAction != null</requires>
      <exception cref="T:System.ArgumentNullException">executeAction == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.PeriodicWorker.#ctor(System.Action,System.Int32)">
      <requires description="executeAction" exception="T:System.ArgumentNullException" csharp="executeAction != null" vb="executeAction &lt;&gt; Nothing">executeAction != null</requires>
      <exception cref="T:System.ArgumentNullException">executeAction == null</exception>
      <requires csharp="millisecondsPeriod &gt; 0" vb="millisecondsPeriod &gt; 0">millisecondsPeriod &gt; 0</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Threading.PeriodicWorker.Start(System.Int32)">
      <requires csharp="millisecondsPeriod &gt; 0" vb="millisecondsPeriod &gt; 0">millisecondsPeriod &gt; 0</requires>
    </member>
    <member name="P:OpcLabs.BaseLib.Threading.PeriodicWorker.ExecuteAction">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Threading.PeriodicWorker.MillisecondsPeriod">
      <getter>
        <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt;= 0" vb="value &gt;= 0">value &gt;= 0</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.IServiceProviderExtension.GetService``1(System.IServiceProvider)">
      <requires description="serviceProvider" exception="T:System.ArgumentNullException" csharp="serviceProvider != null" vb="serviceProvider &lt;&gt; Nothing">serviceProvider != null</requires>
      <exception cref="T:System.ArgumentNullException">serviceProvider == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.AddDetail(System.Exception,System.String)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <requires description="detail" exception="T:System.ArgumentNullException" csharp="detail != null" vb="detail &lt;&gt; Nothing">detail != null</requires>
      <exception cref="T:System.ArgumentNullException">detail == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.AddDetail(System.Exception,System.String,System.Boolean)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <requires description="detail" exception="T:System.ArgumentNullException" csharp="detail != null" vb="detail &lt;&gt; Nothing">detail != null</requires>
      <exception cref="T:System.ArgumentNullException">detail == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.GetBaseMessage(System.Exception)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.GetDepth(System.Exception)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <ensures csharp="result &gt;= 1" vb="result &gt;= 1">result &gt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.GetDescendLines(System.Exception,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.GetInternalMessage(System.Exception)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <requires exception="T:System.InvalidOperationException" csharp="OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo != null" vb="OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo &lt;&gt; Nothing">OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo != null</requires>
      <exception cref="T:System.InvalidOperationException">OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ExceptionExtension.SetInternalMessage(System.Exception,System.String)">
      <requires description="exception" exception="T:System.ArgumentNullException" csharp="exception != null" vb="exception &lt;&gt; Nothing">exception != null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <requires exception="T:System.InvalidOperationException" csharp="OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo != null" vb="OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo &lt;&gt; Nothing">OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo != null</requires>
      <exception cref="T:System.InvalidOperationException">OpcLabs.BaseLib.Extensions.ExceptionExtension.InternalMessageFieldInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ArrayExtension.ConvertAll``2(System.Array,System.Converter{``0,``1})">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="projection" exception="T:System.ArgumentNullException" csharp="local_2.projection != null" vb="local_2.projection &lt;&gt; Nothing">local_2.projection != null</requires>
      <exception cref="T:System.ArgumentNullException">local_2.projection == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ArrayExtension.ConvertAll``2(System.Array,OpcLabs.BaseLib.ValidatingConverter{``0,``1},System.Array@)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="projection" exception="T:System.ArgumentNullException" csharp="projection != null" vb="projection &lt;&gt; Nothing">projection != null</requires>
      <exception cref="T:System.ArgumentNullException">projection == null</exception>
      <ensures csharp="result != default(System.Exception) || result != null" vb="result &lt;&gt; Nothing OrElse result &lt;&gt; Nothing">result != default(System.Exception) || result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ArrayExtension.ConvertAll``2(System.Array,OpcLabs.BaseLib.ValidatingConverter{``0,``1},System.Type,System.Array@)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="new OpcLabs.BaseLib.Extensions.ArrayExtension.&lt;&gt;c__DisplayClassc&lt;TSource, TResult&gt;(){&#xD;&#xA;    source = source, &#xD;&#xA;}.source != null" vb="(() =&gt; {&#xD;&#xA;    OpcLabs.BaseLib.Extensions.ArrayExtension.&lt;&gt;c__DisplayClassc&lt;TSource, TResult&gt; local_8_prime = New OpcLabs.BaseLib.Extensions.ArrayExtension.&lt;&gt;c__DisplayClassc(Of TSource, TResult)();&#xD;&#xA;    (local_8_prime.source = source)&#xD;&#xA;    return local_8_prime; })().source &lt;&gt; Nothing">new OpcLabs.BaseLib.Extensions.ArrayExtension.&lt;&gt;c__DisplayClassc&lt;TSource, TResult&gt;(){
    source = source, 
}.source != null</requires>
      <exception cref="T:System.ArgumentNullException">new OpcLabs.BaseLib.Extensions.ArrayExtension.&lt;&gt;c__DisplayClassc&lt;TSource, TResult&gt;(){
    source = source, 
}.source == null</exception>
      <requires description="projection" exception="T:System.ArgumentNullException" csharp="projection != null" vb="projection &lt;&gt; Nothing">projection != null</requires>
      <exception cref="T:System.ArgumentNullException">projection == null</exception>
      <requires description="resultElementType" exception="T:System.ArgumentNullException" csharp="resultElementType != null" vb="resultElementType &lt;&gt; Nothing">resultElementType != null</requires>
      <exception cref="T:System.ArgumentNullException">resultElementType == null</exception>
      <ensures csharp="result != default(System.Exception) || result != null" vb="result &lt;&gt; Nothing OrElse result &lt;&gt; Nothing">result != default(System.Exception) || result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ArrayExtension.ConvertAllWithContract``2(``0[],System.Converter{``0,``1})">
      <requires description="array" exception="T:System.ArgumentNullException" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <exception cref="T:System.ArgumentNullException">array == null</exception>
      <requires description="converter" exception="T:System.ArgumentNullException" csharp="converter != null" vb="converter &lt;&gt; Nothing">converter != null</requires>
      <exception cref="T:System.ArgumentNullException">converter == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.ArrayExtension.ConvertAllWithWarnings``2(System.Array,OpcLabs.BaseLib.ValidatingConverterWithWarnings{``0,``1},System.Type,System.Func{System.Exception,System.Int32,System.Exception},System.Array@,System.Collections.Generic.List{System.Exception}@)">
      <requires description="source" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires description="projectionWithWarnings" exception="T:System.ArgumentNullException" csharp="local_1.projectionWithWarnings != null" vb="local_1.projectionWithWarnings &lt;&gt; Nothing">local_1.projectionWithWarnings != null</requires>
      <exception cref="T:System.ArgumentNullException">local_1.projectionWithWarnings == null</exception>
      <requires description="resultElementType" exception="T:System.ArgumentNullException" csharp="resultElementType != null" vb="resultElementType &lt;&gt; Nothing">resultElementType != null</requires>
      <exception cref="T:System.ArgumentNullException">resultElementType == null</exception>
      <ensures csharp="result != default(System.Exception) || result != null" vb="result &lt;&gt; Nothing OrElse result &lt;&gt; Nothing">result != default(System.Exception) || result != null</ensures>
      <ensures csharp="warnings != null" vb="warnings &lt;&gt; Nothing">warnings != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.IsEmpty(System.String)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="result || input.Length &gt; 0" vb="result OrElse input.Length &gt; 0">result || input.Length &gt; 0</ensures>
      <ensures csharp="result ⇒ input.Length == 0" vb="result Implies input.Length = 0">!result || input.Length == 0</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.Left(System.String,System.Int32)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">count &lt; 0</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.Mid(System.String,System.Int32)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="start &gt;= 0" vb="start &gt;= 0">start &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">start &lt; 0</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.Mid(System.String,System.Int32,System.Int32)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="start &gt;= 0" vb="start &gt;= 0">start &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">start &lt; 0</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">count &lt; 0</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.MakeNonBreakable(System.String)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.MakeNonBreakable(System.String,System.Boolean)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.MakeSingleLine(System.String)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.ReplaceLineBreaks(System.String,System.String)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <requires description="newValue" exception="T:System.ArgumentNullException" csharp="newValue != null" vb="newValue &lt;&gt; Nothing">newValue != null</requires>
      <exception cref="T:System.ArgumentNullException">newValue == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.StringExtension.SubstringFromOccurrence(System.String,System.String,System.Int32,System.StringComparison)">
      <pure />
      <requires description="input" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <requires description="occurences" exception="T:System.ArgumentOutOfRangeException" csharp="occurrences &gt;= 0" vb="occurrences &gt;= 0">occurrences &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">occurrences &lt; 0</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.FireEvent(System.Type,System.String,System.Object,System.EventArgs)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="eventArgs" exception="T:System.ArgumentNullException" csharp="eventArgs != null" vb="eventArgs &lt;&gt; Nothing">eventArgs != null</requires>
      <exception cref="T:System.ArgumentNullException">eventArgs == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.FireEvent(System.Type,System.String,System.Object,System.EventArgs,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="eventArgs" exception="T:System.ArgumentNullException" csharp="eventArgs != null" vb="eventArgs &lt;&gt; Nothing">eventArgs != null</requires>
      <exception cref="T:System.ArgumentNullException">eventArgs == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetDataMembers(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetDataMembers(System.Type,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetEventDelegate(System.Type,System.String,System.Object)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetEventDelegate(System.Type,System.String,System.Object,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetLowestSingleMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetSingleDefaultMember(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetSingleDefaultMember(System.Type,System.Reflection.MemberTypes)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetSingleMember(System.Type,System.String)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetSingleMember(System.Type,System.String,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetSingleMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.GetStaticPropertyValue(System.Type,System.String)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.IsSameOrSubclassOf(System.Type,System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="c" exception="T:System.ArgumentNullException" csharp="c != null" vb="c &lt;&gt; Nothing">c != null</requires>
      <exception cref="T:System.ArgumentNullException">c == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.TryGetStaticPropertyValue(System.Type,System.String,System.Object@)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="result || value == null" vb="result OrElse value = Nothing">result || value == null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.TryImplicitConversion(System.Type,System.Object,System.Object@)">
      <requires description="toType" exception="T:System.ArgumentNullException" csharp="toType != null" vb="toType &lt;&gt; Nothing">toType != null</requires>
      <exception cref="T:System.ArgumentNullException">toType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Extensions.TypeExtension.TryConversions(System.Type,System.Object,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Object@)">
      <requires description="toType" exception="T:System.ArgumentNullException" csharp="toType != null" vb="toType &lt;&gt; Nothing">toType != null</requires>
      <exception cref="T:System.ArgumentNullException">toType == null</exception>
      <requires description="conversions" exception="T:System.ArgumentNullException" csharp="conversions != null" vb="conversions &lt;&gt; Nothing">conversions != null</requires>
      <exception cref="T:System.ArgumentNullException">conversions == null</exception>
      <requires description="At least one MemberInfo is a null reference." exception="T:System.ArgumentException" csharp="for all info in conversions info != null" vb="for all info in conversions info &lt;&gt; Nothing">for all info in conversions info != null</requires>
      <exception cref="T:System.ArgumentException">!System.Diagnostics.Contracts.Contract.ForAll&lt;System.Reflection.MemberInfo&gt;(conversions, (System.Reflection.MemberInfo info) =&gt; (info != null))</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflected.Assign(System.Object,System.Object)">
      <requires description="left" exception="T:System.ArgumentNullException" csharp="left != null" vb="left &lt;&gt; Nothing">left != null</requires>
      <exception cref="T:System.ArgumentNullException">left == null</exception>
      <requires description="right" exception="T:System.ArgumentNullException" csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
      <exception cref="T:System.ArgumentNullException">right == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Utilities.AssemblyUtilities.LoadFrom(System.String,System.String)">
      <requires description="assemblyFile" exception="T:System.ArgumentNullException" csharp="assemblyFile != null" vb="assemblyFile &lt;&gt; Nothing">assemblyFile != null</requires>
      <exception cref="T:System.ArgumentNullException">assemblyFile == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Utilities.AssemblyUtilities.LoadFromPath(System.String,System.String)">
      <requires description="path" exception="T:System.ArgumentNullException" csharp="path != null" vb="path &lt;&gt; Nothing">path != null</requires>
      <exception cref="T:System.ArgumentNullException">path == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <requires description="attributeType" exception="T:System.ArgumentNullException" csharp="attributeType != null" vb="attributeType &lt;&gt; Nothing">attributeType != null</requires>
      <exception cref="T:System.ArgumentNullException">attributeType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.GetDataType(System.Reflection.MemberInfo)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.GetValue(System.Reflection.MemberInfo,System.Object,System.Object[])">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <requires exception="T:System.NotImplementedException" csharp="index == null" vb="index = Nothing">index == null</requires>
      <exception cref="T:System.NotImplementedException">index != null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.HasCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <requires description="attributeType" exception="T:System.ArgumentNullException" csharp="attributeType != null" vb="attributeType &lt;&gt; Nothing">attributeType != null</requires>
      <exception cref="T:System.ArgumentNullException">attributeType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.IsSettable(System.Reflection.MemberInfo)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.IsStatic(System.Reflection.MemberInfo)">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.SetValue(System.Reflection.MemberInfo,System.Object,System.Object,System.Object[])">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <requires exception="T:System.NotImplementedException" csharp="index == null" vb="index = Nothing">index == null</requires>
      <exception cref="T:System.NotImplementedException">index != null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.MemberInfoExtension.SetValueWithConversion(System.Reflection.MemberInfo,System.Object,System.Object,System.Object[])">
      <requires description="memberInfo" exception="T:System.ArgumentNullException" csharp="memberInfo != null" vb="memberInfo &lt;&gt; Nothing">memberInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">memberInfo == null</exception>
      <requires exception="T:System.NotImplementedException" csharp="index == null" vb="index = Nothing">index == null</requires>
      <exception cref="T:System.NotImplementedException">index != null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.PropertyInfoExtension.IsStatic(System.Reflection.PropertyInfo)">
      <requires description="propertyInfo" exception="T:System.ArgumentNullException" csharp="propertyInfo != null" vb="propertyInfo &lt;&gt; Nothing">propertyInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyInfo == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyConfiguration(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyCulture(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyFileVersion(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyGuid(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyInformationalVersion(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyProduct(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyTitle(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetAssemblyVersion(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.GetPublicTypes(System.Reflection.Assembly)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.SafeCreateInstance``1(System.Reflection.Assembly,System.String)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.SafeCreateInstance``1(System.Reflection.Assembly,System.String,System.Boolean)">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.Extensions.AssemblyExtension.SafeCreateInstance``1(System.Reflection.Assembly,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <requires description="assembly" exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.LoadExtended(System.Reflection.AssemblyName,System.Reflection.Assembly)">
      <requires description="assemblyName" exception="T:System.ArgumentNullException" csharp="assemblyName != null" vb="assemblyName &lt;&gt; Nothing">assemblyName != null</requires>
      <exception cref="T:System.ArgumentNullException">assemblyName == null</exception>
      <requires exception="T:System.ArgumentException" csharp="assemblyName.Name != null" vb="assemblyName.Name &lt;&gt; Nothing">assemblyName.Name != null</requires>
      <exception cref="T:System.ArgumentException">assemblyName.Name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.LoadFromManifestResource(System.Reflection.Assembly,System.Reflection.AssemblyName,System.Reflection.Assembly)">
      <requires description="manifestAssembly" exception="T:System.ArgumentNullException" csharp="manifestAssembly != null" vb="manifestAssembly &lt;&gt; Nothing">manifestAssembly != null</requires>
      <exception cref="T:System.ArgumentNullException">manifestAssembly == null</exception>
      <requires description="assemblyName" exception="T:System.ArgumentNullException" csharp="assemblyName != null" vb="assemblyName &lt;&gt; Nothing">assemblyName != null</requires>
      <exception cref="T:System.ArgumentNullException">assemblyName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.InternalLoad(System.Reflection.AssemblyName,System.Reflection.Assembly)">
      <requires description="assemblyName" exception="T:System.ArgumentNullException" csharp="assemblyName != null" vb="assemblyName &lt;&gt; Nothing">assemblyName != null</requires>
      <exception cref="T:System.ArgumentNullException">assemblyName == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.LoadFromManifestResourceThroughBytes(System.Reflection.Assembly,System.String)">
      <requires description="manifestAssembly" exception="T:System.ArgumentNullException" csharp="manifestAssembly != null" vb="manifestAssembly &lt;&gt; Nothing">manifestAssembly != null</requires>
      <exception cref="T:System.ArgumentNullException">manifestAssembly == null</exception>
      <requires description="resourceName" exception="T:System.ArgumentNullException" csharp="resourceName != null" vb="resourceName &lt;&gt; Nothing">resourceName != null</requires>
      <exception cref="T:System.ArgumentNullException">resourceName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.LoadFromManifestResourceThroughFile(System.Reflection.Assembly,System.String,System.String,System.Reflection.Assembly)">
      <requires description="manifestAssembly" exception="T:System.ArgumentNullException" csharp="manifestAssembly != null" vb="manifestAssembly &lt;&gt; Nothing">manifestAssembly != null</requires>
      <exception cref="T:System.ArgumentNullException">manifestAssembly == null</exception>
      <requires description="resourceName" exception="T:System.ArgumentNullException" csharp="resourceName != null" vb="resourceName &lt;&gt; Nothing">resourceName != null</requires>
      <exception cref="T:System.ArgumentNullException">resourceName == null</exception>
      <requires description="fileName" exception="T:System.ArgumentNullException" csharp="fileName != null" vb="fileName &lt;&gt; Nothing">fileName != null</requires>
      <exception cref="T:System.ArgumentNullException">fileName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Reflection.AssemblyLoader.LoadFromResourceStreamThroughFile(System.IO.Stream,System.String,System.Reflection.Assembly)">
      <requires description="resourceStream" exception="T:System.ArgumentNullException" csharp="resourceStream != null" vb="resourceStream &lt;&gt; Nothing">resourceStream != null</requires>
      <exception cref="T:System.ArgumentNullException">resourceStream == null</exception>
      <requires description="filePath" exception="T:System.ArgumentNullException" csharp="filePath != null" vb="filePath &lt;&gt; Nothing">filePath != null</requires>
      <exception cref="T:System.ArgumentNullException">filePath == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Annotations.DesignableAttribute.Equals(OpcLabs.BaseLib.Annotations.DesignableAttribute)">
      <requires description="other" exception="T:System.ArgumentNullException" csharp="other != null" vb="other &lt;&gt; Nothing">other != null</requires>
      <exception cref="T:System.ArgumentNullException">other == null</exception>
    </member>
    <member name="T:OpcLabs.BaseLib.Instrumentation.CallDiagnostics.Display">
      <invariant>CallPortSwitch != null</invariant>
      <invariant>EnterPortSwitch != null</invariant>
      <invariant>ExitPortSwitch != null</invariant>
      <invariant>LeavePortSwitch != null</invariant>
    </member>
    <member name="T:OpcLabs.BaseLib.Instrumentation.Reflection">
      <invariant>AssemblyLoadingSwitch != null</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.Net.NetworkCredentialSurrogate.#ctor(System.Net.NetworkCredential)">
      <requires description="networkCredential" exception="T:System.ArgumentNullException" csharp="networkCredential != null" vb="networkCredential &lt;&gt; Nothing">networkCredential != null</requires>
      <exception cref="T:System.ArgumentNullException">networkCredential == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Net.NetworkCredentialSurrogate.NetworkCredential">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.FindClsType(System.Type,System.Type@)">
      <requires description="typeIn" exception="T:System.ArgumentNullException" csharp="typeIn != null" vb="typeIn &lt;&gt; Nothing">typeIn != null</requires>
      <exception cref="T:System.ArgumentNullException">typeIn == null</exception>
      <ensures csharp="(!result || typeOut != default(System.Type) &amp;&amp; typeOut.IsArray == typeIn.IsArray) != 0" vb="(result AndAlso Not (typeOut &lt;&gt; Nothing AndAlso typeOut.IsArray = typeIn.IsArray)) &lt;&gt; 0">(!result || typeOut != default(System.Type) &amp;&amp; typeOut.IsArray == typeIn.IsArray) != 0</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.GetClsType(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.IsPrimitiveClsType(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.ConvertToClsArray(System.Array)">
      <requires description="array" exception="T:System.ArgumentNullException" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <exception cref="T:System.ArgumentNullException">array == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.ConvertArrayElementsToCls(System.Array,System.Int32[],System.Array@)">
      <requires description="array" exception="T:System.ArgumentNullException" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <exception cref="T:System.ArgumentNullException">array == null</exception>
      <requires csharp="indices == default(int[]) || indices.Length &lt;= array.Rank" vb="indices = Nothing OrElse indices.Length &lt;= array.Rank">indices == default(int[]) || indices.Length &lt;= array.Rank</requires>
      <requires description="clsArray" exception="T:System.ArgumentNullException" csharp="clsArray != null" vb="clsArray &lt;&gt; Nothing">clsArray != null</requires>
      <exception cref="T:System.ArgumentNullException">clsArray == null</exception>
      <ensures csharp="clsArray != null" vb="clsArray &lt;&gt; Nothing">clsArray != null</ensures>
      <ensures csharp="0 &lt;= array.Rank" vb="0 &lt;= array.Rank">0 &lt;= array.Rank</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.CreateException(System.String)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Cls.FindClsArrayType(System.Type,System.Type@)">
      <requires description="arrayTypeIn" exception="T:System.ArgumentNullException" csharp="arrayTypeIn != null" vb="arrayTypeIn &lt;&gt; Nothing">arrayTypeIn != null</requires>
      <exception cref="T:System.ArgumentNullException">arrayTypeIn == null</exception>
      <requires exception="T:System.ArgumentException" csharp="arrayTypeIn.IsArray" vb="arrayTypeIn.IsArray">arrayTypeIn.IsArray</requires>
      <exception cref="T:System.ArgumentException">!arrayTypeIn.IsArray</exception>
      <ensures csharp="(!result || arrayTypeOut != default(System.Type) &amp;&amp; arrayTypeOut.IsArray) != 0" vb="(result AndAlso Not (arrayTypeOut &lt;&gt; Nothing AndAlso arrayTypeOut.IsArray)) &lt;&gt; 0">(!result || arrayTypeOut != default(System.Type) &amp;&amp; arrayTypeOut.IsArray) != 0</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.DefineMacro(System.String,System.String)">
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ExpandString(System.String)">
      <requires description="template" exception="T:System.ArgumentNullException" csharp="template != null" vb="template &lt;&gt; Nothing">template != null</requires>
      <exception cref="T:System.ArgumentNullException">template == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ExpandString(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
      <requires description="template" exception="T:System.ArgumentNullException" csharp="template != null" vb="template &lt;&gt; Nothing">template != null</requires>
      <exception cref="T:System.ArgumentNullException">template == null</exception>
      <ensures csharp="errors != null" vb="errors &lt;&gt; Nothing">errors != null</ensures>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ExpandString(System.String,System.Int32@)">
      <requires description="template" exception="T:System.ArgumentNullException" csharp="template != null" vb="template &lt;&gt; Nothing">template != null</requires>
      <exception cref="T:System.ArgumentNullException">template == null</exception>
      <ensures csharp="errorCount &gt;= 0" vb="errorCount &gt;= 0">errorCount &gt;= 0</ensures>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ToString">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ExpandMacro(System.String)">
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.ExpandMacro(System.String,System.Boolean@)">
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.MacroExpander.LookupMacro(System.String,System.String@)">
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.AppendWithContract(System.Text.StringBuilder,System.Char)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures csharp="result.Length &gt;= 1" vb="result.Length &gt;= 1">result.Length &gt;= 1</ensures>
      <ensures csharp="result.Length == old(stringBuilder.Length) + 1" vb="result.Length = old(stringBuilder.Length) + 1">result.Length == old(stringBuilder.Length) + 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.AppendWithContract(System.Text.StringBuilder,System.String)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures csharp="result.Length == old(stringBuilder.Length) + value.Length" vb="result.Length = old(stringBuilder.Length) + value.Length">result.Length == old(stringBuilder.Length) + value.Length</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.IsEmpty(System.Text.StringBuilder)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.Remove(System.Text.StringBuilder,System.Int32)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
      <requires csharp="startIndex &gt;= 0 &amp;&amp; !(startIndex &gt; stringBuilder.Length)" vb="startIndex &gt;= 0 AndAlso Not startIndex &gt; stringBuilder.Length">startIndex &gt;= 0 &amp;&amp; !(startIndex &gt; stringBuilder.Length)</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.Remove(System.Text.StringBuilder)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.Extensions.StringBuilderExtension.ToStringWithContract(System.Text.StringBuilder)">
      <requires description="stringBuilder" exception="T:System.ArgumentNullException" csharp="stringBuilder != null" vb="stringBuilder &lt;&gt; Nothing">stringBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">stringBuilder == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures csharp="result.Length == stringBuilder.Length" vb="result.Length = stringBuilder.Length">result.Length == stringBuilder.Length</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.ParameterStrings.ParseParameterString(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
      <requires description="parameterString" exception="T:System.ArgumentNullException" csharp="parameterString != null" vb="parameterString &lt;&gt; Nothing">parameterString != null</requires>
      <exception cref="T:System.ArgumentNullException">parameterString == null</exception>
      <ensures csharp="parameterDictionary != null" vb="parameterDictionary &lt;&gt; Nothing">parameterDictionary != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Text.ParameterStrings.MakeParameterString(System.Collections.Generic.Dictionary{System.String,System.String},System.String@)">
      <requires description="parameterDictionary" exception="T:System.ArgumentNullException" csharp="parameterDictionary != null" vb="parameterDictionary &lt;&gt; Nothing">parameterDictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">parameterDictionary == null</exception>
      <ensures csharp="parameterString != null" vb="parameterString &lt;&gt; Nothing">parameterString != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ObjectUtilities.ChangeType(System.Object,System.Type,System.Object@)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ObjectUtilities.ConvertTo(System.Object,System.Type,System.Object@)">
      <requires description="toType" exception="T:System.ArgumentNullException" csharp="toType != null" vb="toType &lt;&gt; Nothing">toType != null</requires>
      <exception cref="T:System.ArgumentNullException">toType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ObjectUtilities.GetType(System.Object)">
      <ensures csharp="obj != null == result != null" vb="obj &lt;&gt; Nothing = result &lt;&gt; Nothing">obj != null == result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ObjectUtilities.PassThroughNonNull``1(``0,System.String)">
      <requires description="value" exception="T:System.ArgumentNullException" csharp="(object)value != null" vb="((Object)value) &lt;&gt; Nothing">(object)value != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)value == null</exception>
      <requires description="paramName" exception="T:System.ArgumentNullException" csharp="paramName != null" vb="paramName &lt;&gt; Nothing">paramName != null</requires>
      <exception cref="T:System.ArgumentNullException">paramName == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.SignUtilities.CacheSome(OpcLabs.BaseLib.Sign@,System.Func{OpcLabs.BaseLib.Sign})">
      <requires description="func" exception="T:System.ArgumentNullException" csharp="func != null" vb="func &lt;&gt; Nothing">func != null</requires>
      <exception cref="T:System.ArgumentNullException">func == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.CheckedChangeType(System.Object,System.Type)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.CheckedChangeType(System.Object,System.Type,System.IFormatProvider)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.EnrichedChangeType(System.Object,System.Type)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.EnrichedChangeType(System.Object,System.Type,System.IFormatProvider)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.ChangeTypeExceptionDetail(System.Object,System.Type)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.ChangeTypeFormatExceptionDetail(System.Object)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.ChangeTypeOverflowExceptionDetail(System.Object)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ConvertUtilities.ChangeTypePrecheck(System.Object,System.Type)">
      <requires description="conversionType" exception="T:System.ArgumentNullException" csharp="conversionType != null" vb="conversionType &lt;&gt; Nothing">conversionType != null</requires>
      <exception cref="T:System.ArgumentNullException">conversionType == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.StringUtilities.FromChar(System.Char)">
      <pure />
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      <ensures csharp="result.Length == 1" vb="result.Length = 1">result.Length == 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.StringUtilities.FromElements(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <pure />
      <requires description="elements" exception="T:System.ArgumentNullException" csharp="elements != null" vb="elements &lt;&gt; Nothing">elements != null</requires>
      <exception cref="T:System.ArgumentNullException">elements == null</exception>
      <requires description="separator" exception="T:System.ArgumentNullException" csharp="separator != null" vb="separator &lt;&gt; Nothing">separator != null</requires>
      <exception cref="T:System.ArgumentNullException">separator == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.StringUtilities.IsNonNullAndEmpty(System.String)">
      <pure />
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.TypeCodeUtilities.GetTypeNonNull(System.TypeCode)">
      <requires description="The type code must not be empty." csharp="typeCode != (System.TypeCode)0" vb="typeCode &lt;&gt; ((System.TypeCode)0)">typeCode != (System.TypeCode)0</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.BooleanUtilities.CacheFalse(System.Boolean@,System.Func{System.Boolean})">
      <requires description="func" exception="T:System.ArgumentNullException" csharp="func != null" vb="func &lt;&gt; Nothing">func != null</requires>
      <exception cref="T:System.ArgumentNullException">func == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.BooleanUtilities.CacheTrue(System.Boolean@,System.Func{System.Boolean})">
      <requires description="func" exception="T:System.ArgumentNullException" csharp="func != null" vb="func &lt;&gt; Nothing">func != null</requires>
      <exception cref="T:System.ArgumentNullException">func == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ArrayUtilities.Add``1(``0[]@,``0)">
      <requires description="array" exception="T:System.ArgumentNullException" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <exception cref="T:System.ArgumentNullException">array == null</exception>
      <requires exception="T:System.ArgumentException" csharp="array.Rank == 1" vb="array.Rank = 1">array.Rank == 1</requires>
      <exception cref="T:System.ArgumentException">array.Rank != 1</exception>
      <ensures csharp="array != null" vb="array &lt;&gt; Nothing">array != null</ensures>
      <ensures csharp="array.Rank == 1" vb="array.Rank = 1">array.Rank == 1</ensures>
      <ensures csharp="array.Length - old(array.Length) == 1" vb="array.Length - old(array.Length) = 1">array.Length - old(array.Length) == 1</ensures>
      <ensures csharp="old(array.Rank) - array.Length &lt;= 0" vb="old(array.Rank) - array.Length &lt;= 0">old(array.Rank) - array.Length &lt;= 0</ensures>
      <ensures csharp="1 &lt;= array.Length" vb="1 &lt;= array.Length">1 &lt;= array.Length</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ExceptionUtilities.GetDepth(System.Exception)">
      <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      <ensures csharp="exception == default(System.Exception) || result &gt;= 1" vb="exception = Nothing OrElse result &gt;= 1">exception == default(System.Exception) || result &gt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ExceptionUtilities.GetDescendLines(System.Exception,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.MathUtilities.Sign(System.IntPtr)">
      <ensures csharp="(result == -1 ? !false : result == default(int)) || result == 1" vb="(result = -1 ? Not False : result = Nothing) OrElse result = 1">(result == -1 ? !false : result == default(int)) || result == 1</ensures>
      <ensures csharp="result == Sign(op_Explicit(value))" vb="result = Sign(operator value)">result == System.Math.Sign(System.IntPtr.op_Explicit(value))</ensures>
      <ensures csharp="-1 &lt;= result" vb="-1 &lt;= result">-1 &lt;= result</ensures>
      <ensures csharp="result &lt;= 1" vb="result &lt;= 1">result &lt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.MathUtilities.Sign(System.UInt64)">
      <ensures csharp="result == default(int) || result == 1" vb="result = Nothing OrElse result = 1">result == default(int) || result == 1</ensures>
      <ensures csharp="-1 &lt;= result" vb="-1 &lt;= result">-1 &lt;= result</ensures>
      <ensures csharp="result &lt;= 1" vb="result &lt;= 1">result &lt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.MathUtilities.Sign(System.UIntPtr)">
      <ensures csharp="result == default(int) || result == 1" vb="result = Nothing OrElse result = 1">result == default(int) || result == 1</ensures>
      <ensures csharp="-1 &lt;= result" vb="-1 &lt;= result">-1 &lt;= result</ensures>
      <ensures csharp="result &lt;= 1" vb="result &lt;= 1">result &lt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Utilities.ActivatorUtilities.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Object[])">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension.GetObject(System.Runtime.Serialization.SerializationInfo,System.String)">
      <requires description="serializationInfo" exception="T:System.ArgumentNullException" csharp="serializationInfo != null" vb="serializationInfo &lt;&gt; Nothing">serializationInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">serializationInfo == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension.GetObject``1(System.Runtime.Serialization.SerializationInfo,System.String)">
      <requires description="serializationInfo" exception="T:System.ArgumentNullException" csharp="serializationInfo != null" vb="serializationInfo &lt;&gt; Nothing">serializationInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">serializationInfo == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension.GetObjectNotNull(System.Runtime.Serialization.SerializationInfo,System.String)">
      <requires description="serializationInfo" exception="T:System.ArgumentNullException" csharp="serializationInfo != null" vb="serializationInfo &lt;&gt; Nothing">serializationInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">serializationInfo == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension.GetObjectNotNull``1(System.Runtime.Serialization.SerializationInfo,System.String)">
      <requires description="serializationInfo" exception="T:System.ArgumentNullException" csharp="serializationInfo != null" vb="serializationInfo &lt;&gt; Nothing">serializationInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">serializationInfo == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.Serialization.Extensions.SerializationInfoExtension.GetStringNotNull(System.Runtime.Serialization.SerializationInfo,System.String)">
      <requires description="serializationInfo" exception="T:System.ArgumentNullException" csharp="serializationInfo != null" vb="serializationInfo &lt;&gt; Nothing">serializationInfo != null</requires>
      <exception cref="T:System.ArgumentNullException">serializationInfo == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Runtime.InteropServices.Utilities.MarshalUtilities.GetTypedObjectForIUnknown``1(System.IntPtr,System.Type)">
      <requires description="t" exception="T:System.ArgumentNullException" csharp="t != null" vb="t &lt;&gt; Nothing">t != null</requires>
      <exception cref="T:System.ArgumentNullException">t == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.ObjectProvider`2.CreateObject(`1)">
      <requires description="selector" exception="T:System.ArgumentNullException" csharp="(object)selector != null" vb="((Object)selector) &lt;&gt; Nothing">(object)selector != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)selector == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="T:OpcLabs.BaseLib.ObjectProvider`2.ObjectEntry">
      <invariant>Object != null</invariant>
      <invariant>UsageCount &gt;= 0</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.ObjectProvider`2.ObjectEntry.#ctor(`0)">
      <requires description="anObject" exception="T:System.ArgumentNullException" csharp="(object)anObject != null" vb="((Object)anObject) &lt;&gt; Nothing">(object)anObject != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)anObject == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.ObjectProvider`2.ObjectEntry.Object">
      <getter>
        <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      </getter>
      <setter>
        <requires csharp="(object)value != null" vb="((Object)value) &lt;&gt; Nothing">(object)value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.ObjectProvider`2.ObjectEntry.UsageCount">
      <getter>
        <ensures csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
      <setter>
        <requires csharp="value &gt;= 0" vb="value &gt;= 0">value &gt;= 0</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.CookieManager.IsValidCookieValue(System.Int32)">
      <pure />
    </member>
    <member name="M:OpcLabs.BaseLib.CookieManager.NextCookieValue">
      <ensures csharp="IsValidCookieValue(result)" vb="IsValidCookieValue(result)">OpcLabs.BaseLib.CookieManager.IsValidCookieValue(result)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.HandleManager`1.AllocateHandle(`0)">
      <requires description="anObject" exception="T:System.ArgumentNullException" csharp="(object)anObject != null" vb="((Object)anObject) &lt;&gt; Nothing">(object)anObject != null</requires>
      <exception cref="T:System.ArgumentNullException">(object)anObject == null</exception>
      <ensures csharp="this._objectDictionary.ContainsKey(result)" vb="Me._objectDictionary.ContainsKey(result)">this._objectDictionary.ContainsKey(result)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.HandleManager`1.FreeExistingHandle(System.Int32)">
      <ensures csharp="!this._objectDictionary.ContainsKey(handle)" vb="Not Me._objectDictionary.ContainsKey(handle)">!this._objectDictionary.ContainsKey(handle)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.HandleManager`1.FreeHandle(System.Int32)">
      <ensures csharp="!this._objectDictionary.ContainsKey(handle)" vb="Not Me._objectDictionary.ContainsKey(handle)">!this._objectDictionary.ContainsKey(handle)</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValuesAttribute.#ctor(System.String,System.String)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValuesAttribute.#ctor(System.String,System.Type)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValuesAttribute.#ctor(System.Type,System.String)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValuesAttribute.#ctor(System.Type,System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="P:OpcLabs.BaseLib.Testing.InvalidValuesAttribute.ExceptionTypeName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Type,System.String,System.String)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Type,System.String,System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Char,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Char,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Byte,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Byte,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int16,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int16,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int32,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int32,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int64,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Int64,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Single,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Single,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Double,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Double,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Boolean,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Boolean,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.String,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.String,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Object,System.String)">
      <requires description="exceptionTypeName" exception="T:System.ArgumentNullException" csharp="exceptionTypeName != null" vb="exceptionTypeName &lt;&gt; Nothing">exceptionTypeName != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionTypeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InvalidValueAttribute.#ctor(System.Object,System.Type)">
      <requires description="exceptionType" exception="T:System.ArgumentNullException" csharp="exceptionType != null" vb="exceptionType &lt;&gt; Nothing">exceptionType != null</requires>
      <exception cref="T:System.ArgumentNullException">exceptionType == null</exception>
      <requires csharp="exceptionType.AssemblyQualifiedName != null" vb="exceptionType.AssemblyQualifiedName &lt;&gt; Nothing">exceptionType.AssemblyQualifiedName != null</requires>
    </member>
    <member name="P:OpcLabs.BaseLib.Testing.InvalidValueAttribute.ExceptionTypeName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.FactoryTypeAttribute.#ctor(System.String)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.FactoryTypeAttribute.#ctor(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
    </member>
    <member name="P:OpcLabs.BaseLib.Testing.FactoryTypeAttribute.ClassName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InstancesAttribute.#ctor(System.String)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.InstancesAttribute.#ctor(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.ValidValuesAttribute.#ctor(System.String)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.ValidValuesAttribute.#ctor(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.TesterAttribute.#ctor(System.String)">
      <requires description="typeName" exception="T:System.ArgumentNullException" csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <exception cref="T:System.ArgumentNullException">typeName == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.TesterAttribute.#ctor(System.Type)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentException" csharp="type.AssemblyQualifiedName != null" vb="type.AssemblyQualifiedName &lt;&gt; Nothing">type.AssemblyQualifiedName != null</requires>
      <exception cref="T:System.ArgumentException">type.AssemblyQualifiedName == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Testing.TesterAttribute.TesterTypeName">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Testing.ValidValueAttribute.#ctor(System.Type,System.String)">
      <requires description="type" exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="value" exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.#ctor(OpcLabs.BaseLib.Graphs.ITreeEnumerator{`0})">
      <requires description="treeEnumerator" exception="T:System.ArgumentNullException" csharp="treeEnumerator != null" vb="treeEnumerator &lt;&gt; Nothing">treeEnumerator != null</requires>
      <exception cref="T:System.ArgumentNullException">treeEnumerator == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.System#Collections#IEnumerator#get_Current">
      <ensures inheritedFrom="M:System.Collections.IEnumerator.get_Current" inheritedFromTypeName="IEnumerator" csharp="result == this.get_Model[this.get_CurrentIndex]" vb="result = Me.get_Model(Me.get_CurrentIndex)">result == this.get_Model[this.get_CurrentIndex]</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.MoveNext">
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_Model == old(this.get_Model)" vb="Me.get_Model = old(Me.get_Model)">this.get_Model == old(this.get_Model)</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex &lt; this.get_Model.Length" vb="Me.get_CurrentIndex &lt; Me.get_Model.Length">this.get_CurrentIndex &lt; this.get_Model.Length</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex &gt;= 0" vb="Me.get_CurrentIndex &gt;= 0">this.get_CurrentIndex &gt;= 0</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerator.MoveNext" inheritedFromTypeName="IEnumerator" csharp="this.get_CurrentIndex == old(this.get_CurrentIndex) + 1" vb="Me.get_CurrentIndex = old(Me.get_CurrentIndex) + 1">this.get_CurrentIndex == old(this.get_CurrentIndex) + 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.MoveToChild(OpcLabs.BaseLib.Graphs.ITreeEnumerator{`0})">
      <requires description="childEnumerator" exception="T:System.ArgumentNullException" csharp="childEnumerator != null" vb="childEnumerator &lt;&gt; Nothing">childEnumerator != null</requires>
      <exception cref="T:System.ArgumentNullException">childEnumerator == null</exception>
    </member>
    <member name="T:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.TraversalState">
      <invariant>TreeEnumerator != null</invariant>
      <invariant>ChildEnumeratorsToTraverse != null</invariant>
      <invariant>Contract.ForAll(ChildEnumeratorsToTraverse, enumerator =&gt; enumerator != null)</invariant>
    </member>
    <member name="M:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.TraversalState.#ctor(OpcLabs.BaseLib.Graphs.ITreeEnumerator{`0})">
      <requires description="treeEnumerator" exception="T:System.ArgumentNullException" csharp="treeEnumerator != null" vb="treeEnumerator &lt;&gt; Nothing">treeEnumerator != null</requires>
      <exception cref="T:System.ArgumentNullException">treeEnumerator == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.TraversalState.TreeEnumerator">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.TraversalState.ChildEnumeratorsToTraverse">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="for all enumerator in result enumerator != null" vb="for all enumerator in result enumerator &lt;&gt; Nothing">for all enumerator in result enumerator != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
        <requires csharp="for all enumerator in value enumerator != null" vb="for all enumerator in value enumerator &lt;&gt; Nothing">for all enumerator in value enumerator != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.Current">
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.IEnumerator`1.get_Current" inheritedFromTypeName="IEnumerator" csharp="(object)result == this.get_Model[this.get_CurrentIndex]" vb="((Object)result) = Me.get_Model(Me.get_CurrentIndex)">(object)result == this.get_Model[this.get_CurrentIndex]</ensures>
      </getter>
    </member>
    <member name="P:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.System#Collections#IEnumerator#Current">
      <getter>
        <ensures inheritedFrom="M:System.Collections.IEnumerator.get_Current" inheritedFromTypeName="IEnumerator" csharp="result == this.get_Model[this.get_CurrentIndex]" vb="result = Me.get_Model(Me.get_CurrentIndex)">result == this.get_Model[this.get_CurrentIndex]</ensures>
      </getter>
    </member>
    <member name="P:OpcLabs.BaseLib.Graphs.TreeTraversalEnumerator`1.TopTreeEnumerator">
      <getter>
        <requires csharp="this._traversalStateStack.Count &gt; 0" vb="Me._traversalStateStack.Count &gt; 0">this._traversalStateStack.Count &gt; 0</requires>
        <requires exception="T:System.ArgumentException" csharp="this._traversalStateStack.Peek() != null" vb="Me._traversalStateStack.Peek() &lt;&gt; Nothing">this._traversalStateStack.Peek() != null</requires>
        <requires exception="T:System.ArgumentException" csharp="this._traversalStateStack.Peek().TreeEnumerator != null" vb="Me._traversalStateStack.Peek().TreeEnumerator &lt;&gt; Nothing">this._traversalStateStack.Peek().TreeEnumerator != null</requires>
        <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      </getter>
      <exception cref="T:System.ArgumentException">this._traversalStateStack.Peek() == null</exception>
      <exception cref="T:System.ArgumentException">this._traversalStateStack.Peek().TreeEnumerator == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.#ctor(System.String)">
      <requires description="Source name must not be a null reference or an empty string." exception="T:System.ArgumentException" csharp="!IsNullOrEmpty(sourceName)" vb="Not IsNullOrEmpty(sourceName)">!string.IsNullOrEmpty(sourceName)</requires>
      <exception cref="T:System.ArgumentException">string.IsNullOrEmpty(sourceName)</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.RaiseLogEntry(OpcLabs.BaseLib.Diagnostics.LogEntryEventArgs)">
      <requires description="eventArgs" exception="T:System.ArgumentNullException" csharp="eventArgs != null" vb="eventArgs &lt;&gt; Nothing">eventArgs != null</requires>
      <exception cref="T:System.ArgumentNullException">eventArgs == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.RaiseLogEntry(System.String)">
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.RaiseLogEntry(System.String,System.Diagnostics.EventLogEntryType)">
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.RaiseLogEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <requires description="message" exception="T:System.ArgumentNullException" csharp="message != null" vb="message &lt;&gt; Nothing">message != null</requires>
      <exception cref="T:System.ArgumentNullException">message == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.NotifyingEventSource.SourceName">
      <getter>
        <ensures csharp="!IsNullOrEmpty(result)" vb="Not IsNullOrEmpty(result)">!string.IsNullOrEmpty(result)</ensures>
      </getter>
      <setter>
        <requires csharp="!IsNullOrEmpty(value)" vb="Not IsNullOrEmpty(value)">!string.IsNullOrEmpty(value)</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.DefineBooleanSwitch(System.String,System.String,System.Boolean)">
      <requires description="switchName" exception="T:System.ArgumentNullException" csharp="switchName != null" vb="switchName &lt;&gt; Nothing">switchName != null</requires>
      <exception cref="T:System.ArgumentNullException">switchName == null</exception>
      <requires description="description" exception="T:System.ArgumentNullException" csharp="description != null" vb="description &lt;&gt; Nothing">description != null</requires>
      <exception cref="T:System.ArgumentNullException">description == null</exception>
      <ensures csharp="1 &lt;= OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Count" vb="1 &lt;= OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Count">1 &lt;= OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Count</ensures>
      <ensures csharp="OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values != null" vb="OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values &lt;&gt; Nothing">OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.GetBooleanSwitch(System.String)">
      <requires description="switchName" exception="T:System.ArgumentNullException" csharp="switchName != null" vb="switchName &lt;&gt; Nothing">switchName != null</requires>
      <exception cref="T:System.ArgumentNullException">switchName == null</exception>
      <ensures csharp="OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values != null" vb="OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values &lt;&gt; Nothing">OpcLabs.BaseLib.Diagnostics.DiagnosticsSwitches.SwitchDictionary.Values != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.SymbolicCounters.Increment(System.String)">
      <requires description="The symbolic counter tag must be neither null nor empty." exception="T:System.ArgumentException" csharp="!IsNullOrEmpty(tag)" vb="Not IsNullOrEmpty(tag)">!string.IsNullOrEmpty(tag)</requires>
      <exception cref="T:System.ArgumentException">string.IsNullOrEmpty(tag)</exception>
      <ensures csharp="result &gt;= 1" vb="result &gt;= 1">result &gt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.SymbolicCounters.Increment(System.String,System.UInt64)">
      <requires description="The symbolic counter Id must be neither null nor empty." exception="T:System.ArgumentException" csharp="!IsNullOrEmpty(id)" vb="Not IsNullOrEmpty(id)">!string.IsNullOrEmpty(id)</requires>
      <exception cref="T:System.ArgumentException">string.IsNullOrEmpty(id)</exception>
      <ensures csharp="result &gt;= 1" vb="result &gt;= 1">result &gt;= 1</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.#ctor(System.String,System.String,System.Action{OpcLabs.BaseLib.Diagnostics.Call},System.Action{OpcLabs.BaseLib.Diagnostics.Call})">
      <requires description="area" exception="T:System.ArgumentNullException" csharp="area != null" vb="area &lt;&gt; Nothing">area != null</requires>
      <exception cref="T:System.ArgumentNullException">area == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="prolog" exception="T:System.ArgumentNullException" csharp="prolog != null" vb="prolog &lt;&gt; Nothing">prolog != null</requires>
      <exception cref="T:System.ArgumentNullException">prolog == null</exception>
      <requires description="epilog" exception="T:System.ArgumentNullException" csharp="epilog != null" vb="epilog &lt;&gt; Nothing">epilog != null</requires>
      <exception cref="T:System.ArgumentNullException">epilog == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.DefineArea(System.String,System.Boolean)">
      <requires description="area" exception="T:System.ArgumentNullException" csharp="area != null" vb="area &lt;&gt; Nothing">area != null</requires>
      <exception cref="T:System.ArgumentNullException">area == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.Diagnostics(System.String,System.String)">
      <requires description="area" exception="T:System.ArgumentNullException" csharp="area != null" vb="area &lt;&gt; Nothing">area != null</requires>
      <exception cref="T:System.ArgumentNullException">area == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.Diagnostics(System.String,System.String,System.String)">
      <requires description="area" exception="T:System.ArgumentNullException" csharp="area != null" vb="area &lt;&gt; Nothing">area != null</requires>
      <exception cref="T:System.ArgumentNullException">area == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="details" exception="T:System.ArgumentNullException" csharp="local_0.details != null" vb="local_0.details &lt;&gt; Nothing">local_0.details != null</requires>
      <exception cref="T:System.ArgumentNullException">local_0.details == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.Diagnostics(System.String,System.String,System.Action{OpcLabs.BaseLib.Diagnostics.Call},System.Action{OpcLabs.BaseLib.Diagnostics.Call})">
      <requires description="area" exception="T:System.ArgumentNullException" csharp="area != null" vb="area &lt;&gt; Nothing">area != null</requires>
      <exception cref="T:System.ArgumentNullException">area == null</exception>
      <requires description="name" exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="prolog" exception="T:System.ArgumentNullException" csharp="prolog != null" vb="prolog &lt;&gt; Nothing">prolog != null</requires>
      <exception cref="T:System.ArgumentNullException">prolog == null</exception>
      <requires description="epilog" exception="T:System.ArgumentNullException" csharp="epilog != null" vb="epilog &lt;&gt; Nothing">epilog != null</requires>
      <exception cref="T:System.ArgumentNullException">epilog == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.Dispose(System.Boolean)">
      <ensures csharp="this._disposed" vb="Me._disposed">this._disposed</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.FormatLine(System.String)">
      <requires description="port" exception="T:System.ArgumentNullException" csharp="port != null" vb="port &lt;&gt; Nothing">port != null</requires>
      <exception cref="T:System.ArgumentNullException">port == null</exception>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Diagnostics.Call.OutputLine(System.String)">
      <requires description="line" exception="T:System.ArgumentNullException" csharp="line != null" vb="line &lt;&gt; Nothing">line != null</requires>
      <exception cref="T:System.ArgumentNullException">line == null</exception>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Call.Area">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Call.Name">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Call.Details">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:OpcLabs.BaseLib.Diagnostics.Call.Epilog">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:OpcLabs.BaseLib.Contracts.ContractUtils.EnsuresNotNullResult``1">
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:OpcLabs.BaseLib.Contracts.ContractUtils.RequiresNotNull(System.Object)">
      <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Contracts.ContractUtils.RequiresNotNull(System.Object,System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Contracts.ContractUtils.RequiresNotNullState(System.Object)">
      <requires exception="T:System.InvalidOperationException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.InvalidOperationException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.Contracts.ContractUtils.RequiresNotNullState(System.Object,System.String)">
      <requires exception="T:System.InvalidOperationException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.InvalidOperationException">value == null</exception>
    </member>
    <member name="M:OpcLabs.BaseLib.OleAutomation.IsValidInVARIANT(System.Int32)">
      <pure />
    </member>
  </members>
</doc>